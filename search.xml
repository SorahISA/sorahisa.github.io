<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IOI 2021 場外心得</title>
    <url>/cp/contests/ioi21/</url>
    <content><![CDATA[<p>這是第一篇正式ㄉ文章ㄛ
&gt;////&lt;，本來該是另一篇的，但是因為太懶了還沒有動工，這篇就變成第一個了
www。</p>
<span id="more"></span>
<hr />
<p>前年的 IOI 2019 快結束的時候，看到 BB 搶下最後一題的首殺，拿到世界第
6
名，心情也不自覺的跟著變得激動雀躍，也讓我下定決心：只要還有認識的人在打，就一定要跟著看
scoreboard，甚至是同時打 Mirror（不知道為什麼 Yandex
沒開ㄌ），結果就變成線上了......</p>
<p>今年的 IOI 還是線上真的很可惜，少了那種在場外看著 scoreboard
跟著一起激動的感覺。當我想著自己一個人打會不會有點無聊的時候，正巧品庠來找我一起
virtual，就決定在 7/5 跟 7/7 的下午來打ㄌ！</p>
<hr />
<h2 id="day--2-day-0-----測試賽-nhdk-tpr">Day -2 ~ Day 0 --- 測試賽
&amp; NHDK TPR</h2>
<p>覺得自己需要稍微寫一下題目才不會燒雞，所以我就去找了測試賽的題目來打，但因為場外沒有今年的測試賽，所以我去
oj.uz 寫去年的測試題，發現有四分之三跟今年一樣ㄟ，賺到（X）。</p>
<p>反正也沒有限時，那就慢慢寫ㄅ。</p>
<ul>
<li><a href="https://oj.uz/problems/source/532">Judge</a></li>
</ul>
<h3 id="a---handcrafted-gift-gift">A - Handcrafted Gift (<a
href="https://oj.uz/problem/view/IOI20_gift">gift</a>)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(10\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(15\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(20\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(25\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(30\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>有一個長度 <span class="math inline">\(n\)</span> 的字串，每個字元是
<code>R</code> 或 <code>B</code>，你有 <span
class="math inline">\(r\)</span> 個任務，第 <span
class="math inline">\(i\)</span> 個任務要使 <span
class="math inline">\([a_i, b_i]\)</span> 恰有 <span
class="math inline">\(x_i\)</span>
種顏色，詢問有沒有合法的構造，有的話輸出任意一組。</p>
<ul>
<li><span class="math inline">\(n, r \le 500\,000\)</span>。</li>
<li><span class="math inline">\(x_i \in \{1, 2\}\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/440315">AC Solution</a></p>
<p>水題，把 <span class="math inline">\(x = 1\)</span> 的區間都 merge
起來剩下 RB 交錯放就好ㄌ。</p>
<h3 id="b---painting-squares-squares">B - Painting Squares (<a
href="https://oj.uz/problem/view/IOI20_squares">squares</a>)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(10\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(15\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(20\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(55\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>你需要完成兩個程式，第一個程式會給 jury 一個長度 <span
class="math inline">\(n\)</span> 的 01 陣列 <span
class="math inline">\(a\)</span> 和一個正整數 <span
class="math inline">\(k\)</span>，jury 會給你的第二個程式 <span
class="math inline">\(q\)</span> 段長度為 <span
class="math inline">\(k\)</span> 的 subarray <span
class="math inline">\(c = [a_x, a_{x+1}, \ldots,
a_{x+k-1}]\)</span>，你需要回傳這些 subarray 們在 <span
class="math inline">\(a\)</span> 的位置。</p>
<ul>
<li><span class="math inline">\(n, q \le 1000\)</span>。</li>
<li>給分方法：<span class="math inline">\(k \le 10\)</span> 滿分。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/441104">AC Solution</a> # <a
href="https://oj.uz/submission/440962">Random String</a></p>
<p>看到一眼就知道是要構造 de Bruijn sequence
的題目，但是忘記怎麼構造，所以先 random 生了一堆 01 字串來看看可以把
<span class="math inline">\(k\)</span> 壓到多少（BioInformatics 後遺症
www）。放了大約一小時最好的結果就是 <span class="math inline">\(k =
15\)</span>，就丟上去了。</p>
<p>想了幾個小時之後可恥的去看了 Wiki 寫了 inverse Burrows Wheeler
transform 過了。</p>
<p>有個小插曲是我中途交的所有 <span class="math inline">\(k \in [15,
20]\)</span> 的解也都拿到滿分，所以我就丟了一ㄍ issue
給他們，<del>不知道會不會被回 owo</del> 現在已經修好ㄌ
&gt;////&lt;。</p>
<h3 id="c---finding-routers-routers">C - Finding Routers (<a
href="https://oj.uz/problem/view/IOI20_routers">routers</a>)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(16\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(21\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(23\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(40\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>數線上 <span class="math inline">\([\,0, \ell\,]\)</span> 的位置放有
<span class="math inline">\(n\)</span> 座基地台，已知 <span
class="math inline">\(p_0 = 0, \quad p_i &lt; p_{i+1}\)</span> 且 <span
class="math inline">\(p_i \equiv 0 \pmod{2}\)</span>，你可以詢問他最多
<span class="math inline">\(q\)</span> 次離位置 <span
class="math inline">\(x\)</span>
最近的基地台在哪裡（相同距離就選左邊的），最後要回傳所有基地台的位置。</p>
<ul>
<li><span class="math inline">\(\ell = 100\,000\)</span>。</li>
<li><span class="math inline">\(n = 1000\)</span>。</li>
<li>給分方法：<span class="math inline">\(q \le 7500\)</span>
滿分。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/440944">AC Solution</a> # <a
href="https://oj.uz/submission/440817">Binary Search</a></p>
<p>詢問得到的陣列會長 <span class="math inline">\([\,0, \ldots, 1,
\ldots, i, \ldots, n-1\,]\)</span>
這樣子，每個數字都會出現至少一次且值非嚴格遞增。可以二分搜出每個 <span
class="math inline">\(p_c = x\)</span> 且 <span
class="math inline">\(p_{c+1} = x+1\)</span> 的位置並得到 <span
class="math inline">\(c\)</span> 就是 <span
class="math inline">\(x\)</span> 跟 <span
class="math inline">\(x+1\)</span> 的中點。這樣 query 的次數會是 <span
class="math inline">\(\mathcal{O}(n \lg \ell) \approx 20\,000\)</span>
次，拿到 <span class="score_70"><span
class="math inline">\(72.85\)</span> 分</span>。</p>
<p>不過，每一段的長度平均是 <span class="math inline">\(\frac{\ell}{n} =
100\)</span>，如果可以先花幾次把陣列分塊，大概就只需要再 <span
class="math inline">\(\mathcal{O}(n \lg \frac{\ell}{n}) \approx
7000\)</span> 次詢問。自然而然的就會想到用 CDQ
分治來做，實作也很簡單。</p>
<div class="note success"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq</span><span class="params">(<span class="type">int</span> nL, <span class="type">int</span> nR, <span class="type">int</span> pL, <span class="type">int</span> pR)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nL &gt; nR <span class="keyword">or</span> pL &gt; pR) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (pL == pR) <span class="keyword">return</span> <span class="built_in">chmax</span>(last_place[<span class="built_in">use_detector</span>(pL)], pL), <span class="built_in">void</span>();</span><br><span class="line">    <span class="type">int</span> pM = pL + pR &gt;&gt; <span class="number">1</span>, nM = <span class="built_in">use_detector</span>(pM);</span><br><span class="line">    <span class="built_in">chmax</span>(last_place[nM], pM);</span><br><span class="line">    <span class="built_in">cdq</span>(nL, nM<span class="number">-1</span>, pL, pM<span class="number">-1</span>), <span class="built_in">cdq</span>(nM, nR, pM+<span class="number">1</span>, pR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>實際上自己 random 的一些測資，大約會 query <span
class="math inline">\(7200 \sim 7300\)</span> 次。</p>
<h3 id="d---jelly-flavours-jelly">D - Jelly Flavours (<a
href="https://oj.uz/problem/view/IOI20_jelly">jelly</a>)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(11\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(24\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(9\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(10\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(14\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(32\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>有 <span class="math inline">\(n\)</span> 本相異的書，第 <span
class="math inline">\(i\)</span> 本書在商店 A 跟商店 B 分別賣 <span
class="math inline">\(a_i\)</span> 跟 <span
class="math inline">\(b_i\)</span> 元。你現在沒帶錢，但有 A 商店的 <span
class="math inline">\(x\)</span> 元折價券跟 B 商店的 <span
class="math inline">\(y\)</span>
元折價券，請求出你最多可以買幾本相異的書。</p>
<ul>
<li><span class="math inline">\(n \le 2000\)</span>。</li>
<li><span class="math inline">\(0 \le x, y \le 10\,000\)</span>。</li>
<li><span class="math inline">\(0 \le a_i, b_i \le
10\,000\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/440487">AC Solution</a></p>
<p>每個物品只有 3 種狀態：不選、選 Store A、選 Store B。Subtask 3
提供了很重要的想法，如果先對 <span class="math inline">\(a_i\)</span>
排序，之後會發現存在一個位置 <span class="math inline">\(p\)</span>
使在區間 <span class="math inline">\([\,0, p)\)</span> 的物品都會在
Store A 或 Store B 買；在區間 <span class="math inline">\([\,p,
N)\)</span> 的物品都會在 Store B 買或是不會買。</p>
<div class="note info"><details>
<summary>
<h4>
簡單的證明
</h4>
</summary>
以 A、B、X 代表在 Store A 買、在 Store B 買、不買的狀態。如果存在一個 A
在 X 後面 <span class="math inline">\([A, B, A, {\color{red}X}, B,
{\color{red}A}, X, B, X]\)</span>，那把 A 跟 X 交換一定更好。
</details>
</div>
<p>剩下就是 DP 了。你需要計算在一個前綴如何用 A 取代掉 B 來使剩下的 B
盡量小，這邊是一個簡單的背包問題，然後後綴就直接暴力計算 B 從小到大 B
可以買幾個。維護前綴是 <span
class="math inline">\(\mathcal{O}(x)\)</span>；維護後綴是 <span
class="math inline">\(\mathcal{O}(n \lg n)\)</span>。</p>
<p>總複雜度是 <span class="math inline">\(\mathcal{O}(nx + n^2 \lg
n)\)</span>。</p>
<h3 id="nhdk-ten-point-round-7-div.-1">NHDK Ten Point Round #7 (Div.
1)</h3>
<ul>
<li><a
href="https://codeforces.com/group/H0qY3QmnOW/contest/316436">Contest
link</a></li>
</ul>
<p>7/4
晚上又一次覺得沒事做，想說來找一場感覺不會太難的比賽來打，就選到了 NHDK
辦ㄉ TPR ㄌ。</p>
<p>題目基本上都蠻簡單的（？，花了兩個小時慢慢把他寫完，就去睡覺ㄌ。</p>
<hr />
<h2 id="day-1">Day 1</h2>
<ul>
<li><a href="https://oj.uz/problems/source/576">Judge</a></li>
<li><a href="https://youtu.be/GVPBfpvT6V0">Screencast</a></li>
</ul>
<p>開始之前先把兩天的題目都印好，因為開始之後就沒辦法跑出去印ㄌ。</p>
<h3 id="a---分發糖果-distributing-candies-candies">A - 分發糖果 /
Distributing Candies (<a
href="https://oj.uz/problem/view/IOI21_candies">candies</a>)</h3>
<p><span class="score_10">分數：<span
class="math inline">\(11\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(3\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(8\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(27\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(29\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(33\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>給定一長度為 <span class="math inline">\(n\)</span> 的陣列 <span
class="math inline">\(c\)</span> 跟 <span
class="math inline">\(q\)</span> 次操作，你需要對一個長度為 <span
class="math inline">\(n\)</span> 且初始值為 <span
class="math inline">\(0\)</span> 的陣列 <span
class="math inline">\(a\)</span> 執行操作：</p>
<ol type="1">
<li><span class="math inline">\(\forall i \in [l_j, r_j], \quad a_i =
\min\{c_i, a_i + v_j\}\)</span>（放糖果進盒子）；</li>
<li><span class="math inline">\(\forall i \in [l_j, r_j], \quad a_i =
\max\{0, a_i - v_j\}\)</span>（從盒子拿糖果）。</li>
</ol>
<p>最後需要輸出 <span class="math inline">\(a\)</span>。</p>
<ul>
<li><span class="math inline">\(n, q \le 200\,000\)</span>。</li>
<li><span class="math inline">\(1 \le c_i \le 10^9\)</span>。</li>
<li><span class="math inline">\(1 \le v_j \le 10^9\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/441424"><span
class="math inline">\(\mathcal{O}(nq)\)</span> brute force</a> # <a
href="https://oj.uz/submission/441429"><span class="math inline">\(v_j
&gt; 0\)</span></a> # <a href="https://oj.uz/submission/441562"><span
class="math inline">\((l_i, r_i) = (0, n-1)\)</span></a></p>
<p>看到題目的第一眼覺得是<a
href="https://codeforces.com/blog/entry/57319">吉如一線段樹</a>裸題（至少
Subtask 3（盒子容量都相同）是裸題），因為回想起第一次在 IOIC
刻他花了大約 6
小時，而且這題看起來要維護最大、次大、最小、次小，所以把這題放在最後想。</p>
<p>Subtask 1（<span class="math inline">\(n, q \le
2000\)</span>）是暴力，本來以為 Subtask
2（只有加值）要用線段樹，後來發現差分就好了 owo。拿到 <span
class="score_10"><span class="math inline">\(11\)</span>
分</span>之後，覺得好像對 Subtask
4（每次操作都是全域）有點想法，發現了一些性質：</p>
<p>首先，可以把整個陣列排序，然後你會發現：</p>
<ol type="1">
<li>每個盒子剩下的空位（<span class="math inline">\(c_i -
a_i\)</span>）非嚴格遞增；</li>
<li>每次 <span class="math inline">\(\texttt{Add}(l_j, r_j,
v_j)\)</span> 操作完會有且僅有一段前綴是滿的（<span
class="math inline">\(\exists\,p \Rightarrow (i \in [\,0, p)
\Longleftrightarrow a_i = c_i)\)</span>）；</li>
<li>每次 <span class="math inline">\(\texttt{Sub}(l_j, r_j,
v_j)\)</span> 操作完會有且僅有一段前綴是空的（<span
class="math inline">\(\exists\,p \Rightarrow (i \in [\,0, p)
\Longleftrightarrow a_i = 0)\)</span>）。</li>
</ol>
<p>接下來的要做的事會長這樣：</p>
<ol type="1">
<li>找到操作後全空（或全滿）的前綴 <span class="math inline">\([\,0,
p)\)</span>；</li>
<li>給 <span class="math inline">\([\,0, p)\)</span>
那段區間一個代表全空（或全滿）的 tag；</li>
<li>更新前綴 <span class="math inline">\([\,0, p)\)</span>
跟後面的交界處（<span class="math inline">\(a_{p-1}\)</span> 跟 <span
class="math inline">\(a_p\)</span>）的差值。</li>
</ol>
<div class="note success"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> lo = <span class="number">0</span>, hi = N, mi;</span><br><span class="line">    <span class="keyword">if</span> (V[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/// nothing or full ///</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">CheckVal</span>(N, i<span class="number">-1</span>) + V[i] &gt;= C[N].X) &#123;</span><br><span class="line">            <span class="built_in">RangeModify</span>(<span class="number">0</span>, N, <span class="number">-1</span>, i); <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">            mi = lo + hi &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">CheckVal</span>(mi, i<span class="number">-1</span>) + V[i] &gt;= C[mi].X) lo = mi + <span class="number">1</span>; <span class="comment">/// [0, mi] is full</span></span><br><span class="line">            <span class="keyword">else</span> hi = mi;                                         <span class="comment">/// [mi, N] is not full</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/// [0, lo) is full ///</span></span><br><span class="line">        <span class="built_in">PointModify</span>(lo, <span class="built_in">CheckVal</span>(lo, i<span class="number">-1</span>) - <span class="built_in">CheckVal</span>(lo<span class="number">-1</span>, i<span class="number">-1</span>));</span><br><span class="line">        <span class="built_in">RangeModify</span>(<span class="number">0</span>, lo<span class="number">-1</span>, <span class="number">-1</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/// nothing or empty ///</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>要找一個位置當下的值，就紀錄「上次變空（或變滿）是什麼時候」，再看那時候到現在的每次操作的
<span class="math inline">\(v_j\)</span> 的和就好了。</p>
<div class="note success"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">CheckVal</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> qID)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// push tags from root to idx ///</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/// pre_V[qID+1] - pre_V[last_change] ///</span></span><br><span class="line">    <span class="keyword">if</span> (seg[idx].last_type == <span class="string">&quot;Empty&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> pre_V[qID] - pre_V[seg[idx].last_change];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (seg[idx].last_type == <span class="string">&quot;Full&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> pre_V[qID] - pre_V[seg[idx].last_change] + C[idx].X;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>求答案就是最後再問一輪就好ㄌ。</p>
<div class="note success"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) ans[C[i].Y] = <span class="built_in">CheckVal</span>(i, Q);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>最慘的是因為這題實作的部份想太久，最後來不及 de 完 bug，在<a
href="https://youtu.be/GVPBfpvT6V0?t=18360">結束後 6 分鐘</a>才拿到
<span class="score_20"><span class="math inline">\(29\)</span>
分</span>，虧豹 QwQ。</p>
<h3 id="b---鑰匙-keys-keys">B - 鑰匙 / Keys (<a
href="https://oj.uz/problem/view/IOI21_keys">keys</a>)</h3>
<p><span class="score_30">分數：<span
class="math inline">\(37\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(9\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(11\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(17\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(30\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(33\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>有一座地牢，<span class="math inline">\(n\)</span>
個房間每間都有一把不盡相異的鑰匙 <span
class="math inline">\(r_i\)</span>，且 <span
class="math inline">\(m\)</span> 條雙向通道 <span
class="math inline">\((u_j, v_j)\)</span> 每條都有一顆需要鑰匙 <span
class="math inline">\(c_j\)</span>
才能開的鎖（不會消耗鑰匙），你要輸出從哪些房間出發可以到達的房間數量最少。</p>
<ul>
<li><span class="math inline">\(n, m \le 300\,000\)</span>。</li>
<li><span class="math inline">\(0 \le r_i, c_j &lt; n\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/441446"><span
class="math inline">\(\mathcal{O}(nm)\)</span> DFS</a></p>
<p>前 3 個 Subtask 都有 <span class="math inline">\(n, m \le
2000\)</span>，用 <span class="math inline">\(n\)</span> 次 DFS
就拿到了，因為之前在 <a
href="https://drive.google.com/file/d/1G5kHW5mN6tPeCqVI_QxrnF3GaT0U_CHT">TPOJ
#6 pE</a> 看過一樣的題目，所以就很順利的拿到這 <span
class="score_30"><span class="math inline">\(37\)</span> 分</span>。</p>
<p>接下來想了很久，對後面的其他 Subtask 怎麼做都毫無頭緒。</p>
<h3 id="c---噴泉公園-fountain-parks-parks">C - 噴泉公園 / Fountain Parks
(<a href="https://oj.uz/problem/view/IOI21_parks">parks</a>)</h3>
<p><span class="score_50">分數：<span
class="math inline">\(55\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(5\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(10\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(15\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(20\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(20\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(30\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>有 <span class="math inline">\(n\)</span> 座噴泉，第 <span
class="math inline">\(i\)</span> 座噴泉在 <span
class="math inline">\((x_i,
y_i)\)</span>，座標兩兩相異且必為偶數，你需要判斷可不可行並規劃一種道路構建跟長椅擺放方式使</p>
<ul>
<li>每條道路長度皆為 <span class="math inline">\(2\)</span>
且連接兩座噴泉；</li>
<li>所有噴泉必須被道路們連通；</li>
<li>每條道路都有一張相鄰的長椅面向他（長椅的座標需為奇數）；</li>
<li>兩張長椅不能被放在同個位置。</li>
</ul>
<!-- -->
<ul>
<li><span class="math inline">\(n \le 200\,000\)</span>。</li>
<li><span class="math inline">\(2 \le x_i, y_i \le
200\,000\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/441398"><span
class="math inline">\(2 \le x_i \le 4\)</span></a> # <a
href="https://oj.uz/submission/441994">No <span class="math inline">\(2
\times 2\)</span> square</a></p>
<p>因為這題看起來最有趣就第一個做ㄌ。前兩個 Subtask 都有 <span
class="math inline">\(2 \le x_i \le
4\)</span>，就算把所有可以連的邊都連起來也只會像下面那樣，一定有解。</p>
<p><img data-src="Z7wVLiu.png" style="width: auto; max-width: 150px"></p>
<p>接下來感覺 Subtask 4（只有一種蓋道路的方式）好像可做，不過感覺跟
Subtask 5（沒有任四個噴泉形成 <span class="math inline">\(2 \times
2\)</span> 的方格）蠻像，都不會有像下面兩條<span
style="color:orange">橘線</span>或<span
style="color:blue">藍線</span>的情況，於是就想出一個跟 <span
class="math inline">\(\bmod 4\)</span> 相關的作法：</p>
<p><img data-src="r26XQWf.png" style="width: auto; max-width: 120px"></p>
<p>先隨便建一棵樹，對所有的<span style="color:red">平行 <span
class="math inline">\(y\)</span> 軸的邊（紅邊）</span>把 <span
style="color:blue"><span class="math inline">\(x + y \equiv 2
\pmod{4}\)</span> 的椅子（藍椅）</span>指給他；對所有<span
style="color:lime">平行 <span class="math inline">\(x\)</span>
軸的邊（綠邊）</span>把 <span style="color:#FFBF00"><span
class="math inline">\(x + y \equiv 0 \pmod{4}\)</span>
的椅子（黃椅）</span>指給他。</p>
<p><img data-src="oDF75lk.png" style="width: auto; max-width: 400px"></p>
<p>因為不會有上面平行相鄰的狀況，所以不用擔心一張椅子被指到兩條平行的邊。</p>
<div class="note success"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (X[u[i]] == X[v[i]]) &#123;</span><br><span class="line">        <span class="type">int</span> midY = (Y[u[i]] + Y[v[i]]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ((X[u[i]] + <span class="number">1</span> + midY) % <span class="number">4</span> == <span class="number">2</span>) a[i] = X[u[i]] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> a[i] = X[u[i]] - <span class="number">1</span>;</span><br><span class="line">        b[i] = midY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Y[u[i]] == Y[v[i]]) &#123;</span><br><span class="line">        <span class="type">int</span> midX = (X[u[i]] + X[v[i]]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ((Y[u[i]] + <span class="number">1</span> + midX) % <span class="number">4</span> == <span class="number">0</span>) b[i] = Y[u[i]] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> b[i] = Y[u[i]] - <span class="number">1</span>;</span><br><span class="line">        a[i] = midX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>有這 <span style="score_40"><span class="math inline">\(40\)</span>
分</span>讓我放心了許多，可是感覺有很多人會的 Subtask 3（<span
class="math inline">\(2 \le x_i \le
6\)</span>）一直沒有想法，燒雞的以為是位元 DP owo。</p>
<h3 id="小結">小結</h3>
<ul>
<li>Day 1 總分：<span class="score_10"><span
class="math inline">\(11\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_30"><span
class="math inline">\(37\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_50"><span
class="math inline">\(55\)</span></span><span
class="math inline">\({}={}\)</span><span class="score_30"><span
class="math inline">\(103\)</span> 分</span></li>
<li>Day 1 排名：<span class="medal_cu"><span
class="math inline">\(106\)</span></span><span
class="math inline">\(/351\)</span></li>
</ul>
<p>因為在 IOI 當下也有看 scoreboard，所以清楚的記得有三位選手拿到 <span
class="score_30"><span class="math inline">\(38\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_30"><span
class="math inline">\(37\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_70"><span
class="math inline">\(70\)</span></span><span
class="math inline">\({}={}\)</span><span class="score_40"><span
class="math inline">\(145\)</span> 分</span>，本來想說拿到 gift 的 <span
class="score_20"><span class="math inline">\(29\)</span>
分</span>可以補上不太會寫的大資結，結果耍廢到什麼都沒有 QwQ。</p>
<p>開場打好模板，看了約半小時的題目，就開始寫水分ㄌ。我的策略是先給一題一個小時的時間寫，如果可以拿到精神分數就先換題。</p>
<p>在 C 跟 A 拿到水分之後意外有了 C Subtask 4+5
的想法，多花了一點時間把他寫完，再把 B
的水分拿掉之後總共的時間也才過一半而已，不過有了之前 vir JOISC
的經驗，我知道這之後我就會開始思考力下降，就算吃ㄌ一條巧克力也不會變好。果然，思考了一個小時，實作又花了一個半小時，剛剛好在結束之後作完。</p>
<p>希望明天的 Day 2 可以打好一點 owo，至少可以到銀牌線上ㄅ
&gt;////&lt;。</p>
<hr />
<h2 id="day-2">Day 2</h2>
<ul>
<li><a href="https://oj.uz/problems/source/577">Judge</a></li>
<li><a href="https://youtu.be/62C07VDg_1g">Screencast</a></li>
</ul>
<h3 id="a---dna-突變-mutating-dna-dna">A - DNA 突變 / Mutating DNA (<a
href="https://oj.uz/problem/view/IOI21_dna">dna</a>)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(21\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(22\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(13\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(28\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(16\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>給定兩個長度 <span class="math inline">\(n\)</span> 且只包含
<code>A</code>、<code>T</code>、<code>C</code> 的字串 <span
class="math inline">\(a, b\)</span>，接下來會有 <span
class="math inline">\(q\)</span> 次詢問，每次給一段區間 <span
class="math inline">\([x, y]\)</span>，你需要計算 <span
class="math inline">\(a[x..y]\)</span>
最少需要經過幾次「交換兩個字元的位置」來變成 <span
class="math inline">\(b[x..y]\)</span>。</p>
<ul>
<li><span class="math inline">\(n, q \le 100\,000\)</span>。</li>
<li><span class="math inline">\(0 \le x \le y \le n-1\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/442137">AC Solution</a></p>
<p>今年最水 IOI
題，一開始看錯題以為是「交換兩個<strong>相鄰</strong>字元的位置」，結果交上去
WA 才發現根本不需要那麼麻煩 QAQ。</p>
<p>發現之後就把他水掉了，大概只有 Div2B ~ Div2C
左右的難度吧，但是這時已經經過兩個小時了，慘。</p>
<h3 id="b---地牢遊戲-dungeons-game-dungeons">B - 地牢遊戲 / Dungeons
Game (<a
href="https://oj.uz/problem/view/IOI21_dungeons">dungeons</a>)</h3>
<p><span class="score_50">分數：<span
class="math inline">\(50\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(11\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(26\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(13\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(12\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(27\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(11\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>有 <span class="math inline">\((n+1)\)</span> 座地牢，其中編號 <span
class="math inline">\(i\)</span> <span class="math inline">\((0 \le i
\le n-1)\)</span> 的地牢有一位力量為 <span
class="math inline">\(s_i\)</span> 的對手，假設英雄現在在地牢 <span
class="math inline">\(x\)</span> 並擁有 <span
class="math inline">\(z\)</span> 的力量：</p>
<ul>
<li>如果 <span class="math inline">\(x = n\)</span>，遊戲結束；</li>
<li>如果 <span class="math inline">\(z \ge s_x\)</span>，則 <span
class="math inline">\(z \leftarrow z + s_x\)</span> 且 <span
class="math inline">\(x \leftarrow w_x\)</span>（<span
class="math inline">\(w_x &gt; x\)</span>）；</li>
<li>如果 <span class="math inline">\(z &lt; s_x\)</span>，則 <span
class="math inline">\(z \leftarrow z + p_x\)</span> 且 <span
class="math inline">\(x \leftarrow l_x\)</span>。</li>
</ul>
<p>你需要進行 <span class="math inline">\(q\)</span>
次模擬，每次給你英雄的初始位置 <span class="math inline">\(x\)</span>
跟初始力量 <span
class="math inline">\(z\)</span>，請求出當遊戲結束時英雄的力量。</p>
<ul>
<li><span class="math inline">\(n \le 400\,000\)</span>。</li>
<li><span class="math inline">\(q \le 50\,000\)</span>。</li>
<li><span class="math inline">\(1 \le s_i, p_i, z \le
10^7\)</span>。</li>
<li><span class="math inline">\(0 \le w_i, l_i \le n\)</span>。</li>
<li><span class="math inline">\(0 \le x &lt; n\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/442807">AC Solution</a> # <a
href="https://oj.uz/submission/442812"><span class="math inline">\(n \le
50\,000\)</span></a> # <a
href="https://oj.uz/submission/442814">Doubling on <span
class="math inline">\(s_i = p_i\)</span></a> # <a
href="https://oj.uz/submission/442835"><span class="math inline">\(\#\{x
: x \in s\} = 1\)</span></a> # <a
href="https://oj.uz/submission/442827"><span class="math inline">\(\#\{x
: x \in s\} \le 5\)</span></a> # <a
href="https://oj.uz/submission/442142"><span
class="math inline">\(\mathcal{O}(q(n + C))\)</span> brute force</a></p>
<p>在寫這題之前先想到 Subtask 2（<span class="math inline">\(s_i =
p_i\)</span>）有個有趣的性質可以倍增，那就是如果英雄某一場打輸了，那他的力量至少會變成兩倍，所以就做
<span class="math inline">\(\mathcal{O}(\lg n)\)</span>
次「最多可以連勝到哪裡」就會到終點了，複雜度大約是 <span
class="math inline">\(\mathcal{O}(\lg n \lg
C)\)</span>。把暴力寫完之後也把倍增寫掉了，這時才發現倍增的作法可以一次過前兩筆
Subtask www。</p>
<p>接著還剩下約 70 分鐘，接下來只能想 Subtask 3（<span
class="math inline">\(\#\{x : x \in s\} = 1\)</span>）了，因為 Subtask 3
<span class="math inline">\(\subsetneq\)</span> Subtask 4 <span
class="math inline">\(\subsetneq\)</span> Subtask 5 <span
class="math inline">\(\subsetneq\)</span> Subtask 6。有了剛剛 Subtask 2
的倍增想法，這邊就變的很好想了，只要同樣用倍增維護「力量 <span
class="math inline">\(&lt; s_0\)</span> 走 <span
class="math inline">\(2^i\)</span> 步會到哪裡」跟「力量 <span
class="math inline">\(\ge s_0\)</span> 走 <span
class="math inline">\(2^i\)</span> 步會到哪裡」就能 AC
了，應該也很好寫......</p>
<p>結果我因為開的陣列層數剛剛好只有 <span
class="math inline">\(\lceil{\lg(50\,000)}\rceil = 16\)</span>
層，最後一層是代表可以一次走 <span class="math inline">\(2^{15} =
32\,768\)</span> 步的值，結果在某些測資會爛掉，花了 10
分鐘寫完卻花了一小時 debug，最後還是真的找不出 bug
於是就倍增做完亂暴力，意外的在 4:56:56 拿到這唬爛來的 <span
class="score_10"><span class="math inline">\(13\)</span>
分</span>。真是不知道該感到笑還是該哭呢 OwO。</p>
<p>話說，這題是前國手何達睿學長出的ㄛ
&gt;////&lt;，最後面有他的心得文喵。</p>
<h3 id="c---位元移位暫存器-bit-shift-registers-registers">C -
位元移位暫存器 / Bit Shift Registers (<a
href="https://oj.uz/problem/view/IOI21_registers">registers</a>)</h3>
<p><span class="score_10">分數：<span
class="math inline">\(10\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(10\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(11\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(12\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(25\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(13\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(29\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>你有 <span class="math inline">\(100\)</span> 個容量 <span
class="math inline">\(2000\)</span> bits 的 register <span
class="math inline">\(r_0 \sim
r_{m-1}\)</span>，你可以進行以下操作：</p>
<ul>
<li><span class="math inline">\(\texttt{move}(t, y)\)</span>：<span
class="math inline">\(r_t = r_y\)</span>；</li>
<li><span class="math inline">\(\texttt{store}(t, v)\)</span>：<span
class="math inline">\(r_t = v\)</span>；</li>
<li><span class="math inline">\(\texttt{and}(t, x, y)\)</span>：<span
class="math inline">\(r_t = r_x \land r_y\)</span>；</li>
<li><span class="math inline">\(\texttt{or}(t, x, y)\)</span>：<span
class="math inline">\(r_t = r_x \lor r_y\)</span>；</li>
<li><span class="math inline">\(\texttt{xor}(t, x, y)\)</span>：<span
class="math inline">\(r_t = r_x \oplus r_y\)</span>；</li>
<li><span class="math inline">\(\texttt{not}(t, x)\)</span>：<span
class="math inline">\(r_t = \neg r_x\)</span>；</li>
<li><span class="math inline">\(\texttt{left}(t, x, p)\)</span>：<span
class="math inline">\(r_t = r_x \ll p\)</span>；</li>
<li><span class="math inline">\(\texttt{right}(t, x, p)\)</span>：<span
class="math inline">\(r_t = r_x \gg p\)</span>；</li>
<li><span class="math inline">\(\texttt{add}(t, x, y)\)</span>：<span
class="math inline">\(r_t = r_x + r_y\)</span>。</li>
</ul>
<p>一開始有 <span class="math inline">\(n\)</span> 個 <span
class="math inline">\(k\)</span>-bit 整數 <span
class="math inline">\(c_0 \sim c_{n-1}\)</span> 依序儲存在 <span
class="math inline">\(r_0\)</span>，其他所有 bits 皆為 <span
class="math inline">\(0\)</span>，你可以進行最多 <span
class="math inline">\(q\)</span> 次操作使：</p>
<ul>
<li><span class="math inline">\(s = 0\)</span>：<span
class="math inline">\(r_0\)</span> 在 <span class="math inline">\([\,0,
k)\)</span> 區間的 bits 需要是 <span
class="math inline">\(\min\limits_{0 \le i \le
n-1}\{c_i\}\)</span>；</li>
<li><span class="math inline">\(s = 1\)</span>：<span
class="math inline">\(r_0\)</span> 在 <span class="math inline">\([\,i
\cdot k, (i+1) \cdot k)\)</span> 區間的 bits 需要是 <span
class="math inline">\(c\)</span> 裡面第 <span
class="math inline">\(i\)</span> 小的數字。</li>
</ul>
<p>其他不在要求區間裡的 bit 可以是任意值。</p>
<ul>
<li>限制（<span class="math inline">\(s = 0\)</span>）：<span
class="math inline">\(n \le 100\)</span>、<span class="math inline">\(k
\le 10\)</span>、<span class="math inline">\(q = 150\)</span>。</li>
<li>限制（<span class="math inline">\(s = 1\)</span>）：<span
class="math inline">\(n \le 100\)</span>、<span class="math inline">\(k
\le 10\)</span>、<span class="math inline">\(q = 4000\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/442197"><span
class="math inline">\(s = 0\)</span>、<span class="math inline">\(n =
2\)</span>、<span class="math inline">\(k \le 2\)</span>、<span
class="math inline">\(q = 1000\)</span></a></p>
<p>光是題目敘述就有整整 6 頁，而且他的左移和右移的方向跟 grader
輸出的方向又讓我頭昏腦脹，很久才理解要怎麼實作出東西來。</p>
<p>根據我在「數位電路設計」<del>學習</del>耍廢的經驗，對兩個 <span
class="math inline">\(2\)</span>-bit 的數字 <span
class="math inline">\(a, b\)</span>，有以下式子：</p>
<p><span class="math display">\[\min\{a, b\}_1 = a_1 \cdot
(\overline{a_1} \cdot \overline{a_0} + b_1 \cdot b_0 + \overline{a_1}
\cdot b_1) + b_1 \cdot \overline{(\overline{a_1} \cdot \overline{a_0} +
b_1 \cdot b_0 + \overline{a_1} \cdot b_1)} \notag\]</span></p>
<p><span class="math display">\[\min\{a, b\}_0 = a_0 \cdot
(\overline{a_1} \cdot \overline{a_0} + b_1 \cdot b_0 + \overline{a_1}
\cdot b_1) + b_0 \cdot \overline{(\overline{a_1} \cdot \overline{a_0} +
b_1 \cdot b_0 + \overline{a_1} \cdot b_1)} \notag\]</span></p>
<p>我就花了一個多小時在把這個寫出來，結果還用了 <span
class="math inline">\(26\)</span> 次操作，只有拿到 <span
class="score_10"><span class="math inline">\(10\)</span>
分</span>，然後我就放棄了。</p>
<h3 id="小結-1">小結</h3>
<ul>
<li>Day 2 總分：<span class="score_ac"><span
class="math inline">\(100\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_50"><span
class="math inline">\(50\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_10"><span
class="math inline">\(10\)</span></span><span
class="math inline">\({}={}\)</span><span class="score_50"><span
class="math inline">\(160\)</span> 分</span></li>
<li>Day 2 排名：<span class="medal_cu"><span
class="math inline">\(105\)</span></span><span
class="math inline">\(/351\)</span></li>
</ul>
<p>多虧有印出題目，不然電腦先卡了大約 20 分鐘應該就會先死去ㄌ www。</p>
<p>策略跟 Day 1 是一樣的，但是因為 dna 跟 register
都太特別了，導致今天根本沒能按照計畫進行。</p>
<p>嘛，題目應該要多讀幾次的，最好可以把自己的理解寫出來再對比一次，不然在「看錯題目」這種小錯誤上花整整一小時還是很燒雞ㄉ，還有有時候遇到真的超級麻煩的題目應該先不要管他，<del>只要祈禱大家都拿不到分數就好了</del>。</p>
<p>今天整體狀況比較平靜，多虧 dna
超水，讓我沒有遇到「會做卻沒時間做」的狀況（也有我直接把 register
當成實作題的原因啦），Day 2 花在<del>寫 code</del> debug 的時間就比 Day
1 多出不少呢，能跟 Day 1 有著幾乎相同的名次也很令我意外吶。</p>
<hr />
<h2 id="總結">總結</h2>
<ul>
<li>總分：<span class="score_10"><span
class="math inline">\(11\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_30"><span
class="math inline">\(37\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_50"><span
class="math inline">\(55\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_ac"><span
class="math inline">\(100\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_50"><span
class="math inline">\(50\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_10"><span
class="math inline">\(10\)</span></span><span
class="math inline">\({}={}\)</span><span class="score_40"><span
class="math inline">\(263\)</span> 分</span></li>
<li>排名：<span class="medal_cu"><span
class="math inline">\(104\)</span></span><span
class="math inline">\(/351\)</span></li>
<li>牌線：<span class="medal_au"><span
class="math inline">\(373\)</span></span><span
class="math inline">\(/\)</span><span class="medal_ag"><span
class="math inline">\(289\)</span></span><span
class="math inline">\(/\)</span><span class="medal_cu"><span
class="math inline">\(203\)</span></span></li>
</ul>
<p>如你所見，Day 1、Day 2、總排名呈等差數列，而且有越來越好的趨勢
www。如果 Day 1 再多 6 分鐘就有壓線銀牌ㄌ QwQ。</p>
<p>目前覺得最大的缺陷是沒有調整好自己的心態，對分數沒有執著，有點把這種
virtual 當成在玩的感覺（？</p>
<p>現在，平常在打 ICPC
的時候也是這樣，甚至連正式比賽都有點提不起勁。如果沒辦法對得獎、對分數有執著，基本上就只能當個休閒選手了吧......</p>
<p>希望這個暑假可以讓我重新拿回學習新東西的熱情ㄅ &gt;////&lt;。</p>
<hr />
<ul>
<li><a href="https://www.wiwiho.me/2021/07/01/ioi2021/">現任國手 WiwiHo
的比賽心得</a></li>
<li><a
href="https://hackmd.io/@E3-nUNPsRmy1gPXmWIt8jQ/r1yMcVOhu">前國手何達睿學長的
dungeons 出題心得</a></li>
</ul>
]]></content>
      <categories>
        <category>競程</category>
        <category>比賽心得</category>
      </categories>
      <tags>
        <tag>IOI</tag>
      </tags>
  </entry>
  <entry>
    <title>MHC 2022 Qualification 比賽心得</title>
    <url>/cp/contests/mhc22-0/</url>
    <content><![CDATA[<p>今年開始 Facebook Hacker Cup 改叫 Meta Hacker
Cup，瞬間感覺變得高大上了 (X)，不過現在聽到 MHC
的簡寫完全無法直接反應過來 www。</p>
<span id="more"></span>
<div class="note primary"><p>如果你沒有打過 Meta Hacker Cup，可以參考看看
<a href="https://hackmd.io/@SorahISA-OIer/r1C5ZsT4F">這篇介紹文</a>。</p>
</div>
<h2 id="前言">前言</h2>
<p>雖然 Qualification 總共有三天、要什麼時候打都可以、也只要 AC
一題就能晉級，但是如果想要拿到高名次反而就只能選這種比較少電神會認真打的比賽了
www。</p>
<p>於是，目標就成形了：</p>
<ul>
<li>在 8/27 01:00 開始做題</li>
<li>把能寫的都寫完，能唬爛的都唬爛完
<ul>
<li>目標是在三個小時內全部 submit 成功</li>
<li><del>吃 FST 再說</del></li>
</ul></li>
<li>拿到盡量高的排名</li>
</ul>
<hr />
<h2 id="qualification-round">Qualification Round</h2>
<ul>
<li><a
href="https://www.facebook.com/codingcompetitions/hacker-cup/2022/qualification-round">Judge</a></li>
<li><a href="https://youtu.be/hsWBNidLFqY">Screencast</a></li>
</ul>
<p>因為是以破台為目標，所以基本上就是按照順序開題。開場先花了兩分鐘把東西整理好，就開始看題了～</p>
<h3 id="a.-second-hands">A. Second Hands</h3>
<p><span class="score_ac"><span class="math inline">\(9\)</span>
分</span> (6:17)</p>
<div class="note info no-icon"><p>你要把 <span class="math inline">\(N\)</span> 個正整數 <span
class="math inline">\(S_1, S_2, \ldots, S_N\)</span>
分成兩堆，使得兩堆的大小都 <span class="math inline">\(\le K\)</span>
且各自都不能包含重複的數字。<br/> 只要輸出 <code>YES</code> 或
<code>NO</code>，不用構造解法。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 90\)</span>。</li>
<li><span class="math inline">\(1 \le N, K \le 100\)</span>。</li>
<li><span class="math inline">\(1 \le S_i \le 100\)</span>（<span
class="math inline">\(1 \le i \le N\)</span>）。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0A.cpp">AC
Solution</a></p>
<p>直觀的想法就是把出現兩次的數字都分開放，有出現三次以上的數字或是
<span class="math inline">\(N &gt; 2K\)</span> 就是
<code>NO</code>。</p>
<p>稍微想了一下就發現不用真的放數字，只要上面 <code>NO</code>
的條件不符合就會有解。</p>
<h3 id="b1.-second-friend">B1. Second Friend</h3>
<p><span class="score_ac"><span class="math inline">\(9\)</span>
分</span> (30:18)</p>
<div class="note info no-icon"><p>在 <span class="math inline">\(R \times C\)</span> 的格子裡有一些道路
<code>.</code> 跟樹木
<code>^</code>，你要在道路上種一些樹使得每一棵樹的四方位相鄰格子都只少有兩棵樹。<br/>
如果有解請輸出構造方法。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 85\)</span>。</li>
<li><span class="math inline">\(1 \le R, C \le 100\)</span>。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0B.cpp">AC
Solution</a></p>
<p>我看到最上面說 B2 <span class="math inline">\(\supseteq\)</span> B1
之後就直接跳到 B2 了，所以我沒有看這題。</p>
<h3 id="b2.-second-second-friend">B2. Second Second Friend</h3>
<p><span class="score_ac"><span class="math inline">\(17\)</span>
分</span> (31:06)</p>
<div class="note info no-icon"><p>接 B1，在 <span class="math inline">\(R \times C\)</span>
的格子裡有一些道路 <code>.</code> 跟樹木 <code>^</code> <strong>跟石頭
<code>#</code></strong>。<br/></p>
<ul>
<li>測資數量<span class="math inline">\({} = 80\)</span>。</li>
<li><span class="math inline">\(1 \le R, C \le
\mathbf{3000}\)</span>。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0B.cpp">AC
Solution</a></p>
<p>第一眼的感覺是填滿會最好，不過因為有些位置會被石頭擋到只剩下一個
<em>氣</em>（定義一個位置的 <em>氣</em>
是他四方位相鄰的格子中可以種樹的位置數量），而那些只剩下 <span
class="math inline">\(0 \sim 1\)</span>
個氣的位置又會讓周圍的氣減少，於是要使用 DFS 來找所有會影響的位置。</p>
<p>寫了一堆 bug 讓我多花了 9 分鐘
QwQ。像是一開始把氣的初始值定義為周圍是道路或樹木的數量，結果 DFS
時又會把石頭周圍的氣都 <span
class="math inline">\(-1\)</span>，就導致石頭被扣兩次。</p>
<p>上傳的時候發現會燒雞，感覺是檔案太大的問題？於是就按照他們說的發了個
Clarification 附上 code 跟輸出 .zip 檔。</p>
<p>這時候我才發現每一題的名稱都有 Second www。</p>
<h3 id="c1.-second-meaning">C1. Second Meaning</h3>
<p><span class="score_ac"><span class="math inline">\(14\)</span>
分</span> (43:27)</p>
<div class="note info no-icon"><p>有一個神秘的語言，它總共有 <span class="math inline">\(N\)</span>
種符號，現在你希望只使用 <code>.</code> 跟 <code>-</code>
壓縮這個語言的任何訊息。<br/> 現在要求你第一種符號一定要壓縮成 <span
class="math inline">\(C_1\)</span>，請求出任何一組 <span
class="math inline">\(C_2, C_3, \ldots, C_N\)</span> 使得所有由
<code>.</code> 跟 <code>-</code> 構成的訊息都只有 <span
class="math inline">\(0\)</span> 或 <span
class="math inline">\(1\)</span> 種解讀方式。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 100\)</span>。</li>
<li><span class="math inline">\(2 \le N \le 100\)</span>。</li>
<li><span class="math inline">\(1 \le |C_1| \le 100\)</span>。</li>
<li><span class="math inline">\(1 \le |C_i| \le 200\)</span>（<span
class="math inline">\(2 \le i \le N\)</span>）。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0C.cpp">AC
Solution</a></p>
<p>第一個想法是「只要所有符號壓縮後的長度都一樣就不會出現歧異」，不過給你的
<span class="math inline">\(C_1\)</span> 可能會超短（<span
class="math inline">\(\le 6\)</span>）讓我們沒辦法弄出 <span
class="math inline">\(N\)</span> 個相異字串。</p>
<p>那不如就把 <span class="math inline">\(C_1\)</span> 獨立出來看？讓
<span class="math inline">\(C_1\)</span>
的開頭跟其他人都不一樣，這樣讀到 <span
class="math inline">\(C_1[0]\)</span> 就知道是 <span
class="math inline">\(C_1\)</span>；讀到不是 <span
class="math inline">\(C_1[0]\)</span> 就知道是 <span
class="math inline">\(C_2, C_3, \ldots, C_N\)</span>，再讓 <span
class="math inline">\(C_2, C_3, \ldots, C_N\)</span> 的長度都相同就能把
<span class="math inline">\(C_1\)</span> 分出來了！</p>
<h3 id="c2.-second-second-meaning">C2. Second Second Meaning</h3>
<p><span class="score_ac"><span class="math inline">\(18\)</span>
分</span> (43:44)</p>
<div class="note info no-icon"><p>接 C1。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 95\)</span>。</li>
<li><span class="math inline">\(2 \le N \le 100\)</span>。</li>
<li><span class="math inline">\(1 \le |C_1| \le 100\)</span>。</li>
<li><span class="math inline">\(1 \le |C_i| \le
\mathbf{10}\)</span>（<span class="math inline">\(2 \le i \le
N\)</span>）。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0C.cpp">AC
Solution</a></p>
<p>本來想說 C2 是給你 <span class="math inline">\(C_1, C_2, \ldots,
C_K\)</span> 求 <span class="math inline">\(C_{K+1}, C_{K+2}, \ldots,
C_N\)</span>（沒看題目被抓到），結果只是限制輸出長度要 <span
class="math inline">\(\le 10\)</span>，直接一起水掉 &gt;////&lt;。</p>
<p>C1 跟 C2 都上傳完之後看了一下輸出檢查有沒有弄錯檔案，結果發現我的
<code>Case #x:</code> 後面沒有換行，嚇死。</p>
<p>不過 validation 都有過，應該沒有差ㄅ？反正我又重新傳了一次。</p>
<blockquote>
<p>為什麼不要出到 <span class="math inline">\(|C_i| \le 7\)</span> 呢
OwO。</p>
</blockquote>
<h3 id="d.-second-flight">D. Second Flight</h3>
<p><span class="score_ac"><span class="math inline">\(33\)</span>
分</span> (91:40)</p>
<div class="note info no-icon"><p>有 <span class="math inline">\(N\)</span> 個城市，城市之間以 <span
class="math inline">\(M\)</span> 個航班 <span
class="math inline">\((A_i, B_i, C_i)\)</span> 連通。<br/>
每個航班在一天內會發 <span class="math inline">\(4\)</span> 班飛機，早晚
<span class="math inline">\(A_i \to B_i\)</span> 跟 <span
class="math inline">\(B_i \to A_i\)</span> 都各有一班，可以載 <span
class="math inline">\(C_i\)</span> 個 <strong>t</strong>ourists。<br/>
接著你會詢問 <span class="math inline">\(Q\)</span> 次 <span
class="math inline">\((X_j,
Y_j)\)</span>：在一天之內最多有多少人可以從城市 <span
class="math inline">\(X_j\)</span> 前往 <span
class="math inline">\(Y_j\)</span>。注意一個乘客一天之內最多可以搭乘兩個航班（早晚各一個）。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 70\)</span>。</li>
<li><span class="math inline">\(1 \le N, M, Q \le
200\,000\)</span>。</li>
<li><span class="math inline">\(\sum\limits_{所有測資}{Q} \le
5\,000\,000\)</span>。</li>
<li><span class="math inline">\(1 \le A_i, B_i \le N\)</span>（<span
class="math inline">\(1 \le i \le M\)</span>）。</li>
<li>保證 <span class="math inline">\(A_i \ne
B_i\)</span>，且所有<strong>無序數對</strong> <span
class="math inline">\((A_i, B_i)\)</span> 皆相異（<span
class="math inline">\(1 \le i \le M\)</span>）。</li>
<li><span class="math inline">\(1 \le C_i \le 10^9\)</span>（<span
class="math inline">\(1 \le i \le M\)</span>）。</li>
<li><span class="math inline">\(1 \le X_j, Y_j \le N\)</span>（<span
class="math inline">\(1 \le j \le Q\)</span>）。</li>
<li>保證 <span class="math inline">\(X_j \ne Y_j\)</span>（<span
class="math inline">\(1 \le j \le Q\)</span>）。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0D-1.cpp">AC
Solution (<span class="math inline">\(\texttt{bitset}\)</span>)</a> # <a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0D-2.cpp">AC
Solution (<span
class="math inline">\(\texttt{unordered_map}\)</span>)</a></p>
<p>一開始覺得跟最大流有關，不過發現只要看 <span
class="math inline">\((X_j, Y_j)\)</span> 有沒有邊以及枚舉中間點 <span
class="math inline">\(Z_j\)</span> 計算 <span
class="math inline">\(\min\left\{C_{(X_j, Z_j)}, C_{(Z_j,
Y_j)}\right\}\)</span> 就能得到答案，我就覺得與其好好想解不如直接寫暴力
www。</p>
<p>不過 <span class="math inline">\(\mathcal{O}(QN)\)</span>
還是太大了，就算暴力也應該跑不完。</p>
<p>我決定來試試一個簡單的簡化法：把詢問過的答案存起來，並每次枚舉 <span
class="math inline">\(X_j\)</span> 跟 <span
class="math inline">\(Y_j\)</span> 度數小的去詢問大的有沒有。</p>
<p>把度數前 <span
class="math inline">\(\mathcal{O}\left(\sqrt{N}\right)\)</span>
大的點的鄰居存成 <code>bitset</code> 以求 <span
class="math inline">\(\mathcal{O}(1)\)</span> 查詢，如果 <span
class="math inline">\(X_j\)</span> 跟 <span
class="math inline">\(Y_j\)</span>
都是度數小的那群就直接線性掃過去（先把鄰居按照編號排序）。這樣複雜度就會變成
<span
class="math inline">\(\mathcal{O}\left(Q\sqrt{N}\right)\)</span>。</p>
<blockquote>
<p>其實是 <span class="math inline">\(\mathcal{O}\left(M
\sqrt{Q}\right)\)</span>，我不會算複雜度 QwQ。</p>
</blockquote>
<div class="note success"><details>
<summary>
<h4>
複雜度證明
</h4>
</summary>
<p><a href="https://www.facebook.com/codingcompetitions/hacker-cup/2022/qualification-round/problems/D/solution">官方有提供證明（最下面
Solution
2）</a>，不過有個更簡單的作法（<a href="https://codeforces.com/blog/entry/106451?#comment-947999">Credit
to smax</a>）：</p>
<ul>
<li>首先，對於出現過的 <span class="math inline">\((X_j, Y_j)\)</span>
的回答都是 <span class="math inline">\(\mathcal{O}(1)\)</span>
的，因為有用 <code>unordered_map</code> 存起來。</li>
<li>以下假設有 <span class="math inline">\(\text{deg}(X_j) \le
\text{deg}(Y_j)\)</span>。</li>
<li>定義一個 threshold <span class="math inline">\(B\)</span>，把度數
<span class="math inline">\(\ge B\)</span> 的叫做阿姨，<span
class="math inline">\(&lt; B\)</span> 的叫ㄌㄌ。
<ul>
<li>如果 <span class="math inline">\(X_j\)</span>
是ㄌㄌ：&gt;////&lt;。因為ㄌㄌ的複雜度夠小，只有 <span
class="math inline">\(\mathcal{O}(B)\)</span>。</li>
<li>如果 <span class="math inline">\(X_j\)</span> 是阿姨：頂多只有 <span
class="math inline">\(\mathcal{O}\left(\frac{M}{B}\right)\)</span>
個阿姨，所以只會遇到至多 <span
class="math inline">\(\mathcal{O}\left(\frac{M^2}{B^2}\right)\)</span>
次。
<ul>
<li><span class="math inline">\(X_j\)</span> 是阿姨 <span
class="math inline">\(\implies\)</span> <span
class="math inline">\(Y_j\)</span> 是阿姨。</li>
<li>只考慮不重複的詢問，因為有把回答存起來。</li>
</ul></li>
</ul></li>
<li>所有遇到ㄌㄌ的複雜度加起來是 <span
class="math inline">\(\mathcal{O}(QB)\)</span>；所有遇到阿姨的複雜度加起來是
<span class="math inline">\(\mathcal{O}(\frac{M^2}{B^2} \cdot
B)\)</span>。</li>
<li>取 <span class="math inline">\(B = \frac{M}{\sqrt{Q}}\)</span>
可以讓複雜度達到最小的 <span class="math inline">\(\mathcal{O}\left(M
\sqrt{Q}\right)\)</span>。</li>
</ul>
</details>
</div>
<blockquote>
<p>寫到這裡我才發現其實把 <code>pair&lt;int, int&gt;</code> 壓成
<code>int64_t</code> 就可以用 <code>unordered_map</code> 了。<br/> 然後
<code>bitset</code> 跟整個 <code>adj[]</code> 也都可以被
<code>unordered_map</code> 取代掉，我 <code>bitset</code> 中毒 QwQ。</p>
</blockquote>
<p>光是 validation 就跑半分鐘了，所幸正式的 input
也大約兩分鐘就跑完了，不知道筆電如果開風扇會不會跑快一點。</p>
<blockquote>
<p>賽後才意識到 D 的輸出足足有 36 MB，不知道為什麼反而上傳的了？</p>
</blockquote>
<blockquote>
<p>做法可以參考
<a href="https://youtu.be/AbF6-TtkPLs?t=468">官方的影片解說</a>，我把上面的
Solution 1 改成 Solution 2 之後就跟其中一個官解幾乎一樣了。</p>
</blockquote>
<hr />
<h2 id="總結">總結</h2>
<ul>
<li>分數：<span class="score_ac"><span
class="math inline">\(100\)</span></span><span class="math inline">\(/
100\)</span> 分</li>
<li>排名：<span class="medal_au"><span
class="math inline">\(11\)</span></span><span class="math inline">\(/
27\,603\)</span> 名</li>
</ul>
<p><img data-src="scoreboard.png" width="90%"></p>
<p>果然拿到了超高的名次，感覺 C 意外的水，而且 D
看題解才發現根號就是官解的複雜度，有種失望的感覺... 本來希望看到神奇的帶
<span class="math inline">\(\log\)</span> 作法的。</p>
<p>能用原定時間的一半多一點點破台是我沒想過的，不過自己感覺還有許多可以進步的地方<del>（像是剪指甲）</del>，接下來可能還有許多題目要出，剩下的就等
Round 1 再說ㄅ。</p>
<div class="note primary"><ul>
<li>下一篇：<a href="../mhc22-1">Round 1</a></li>
</ul>
</div>
]]></content>
      <categories>
        <category>競程</category>
        <category>比賽心得</category>
      </categories>
      <tags>
        <tag>MHC</tag>
      </tags>
  </entry>
  <entry>
    <title>MHC 2022 Round 1 比賽心得</title>
    <url>/cp/contests/mhc22-1/</url>
    <content><![CDATA[<p>最近要開學了，交大 9/8 才能開始搬進宿舍，然後就撞連假又遇到颱風
QwQ。</p>
<p>因為這天（9/11）剛好要搬行李到學校，七點多就要起床，所以沒辦法好好打完。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>前言都寫在前面了耶～</p>
<h2 id="round-1">Round 1</h2>
<ul>
<li><a
href="https://www.facebook.com/codingcompetitions/hacker-cup/2022/round-1">Judge</a></li>
<li>Maybe no screencast</li>
</ul>
<h3 id="a1.-consecutive-cuts---chapter-1">A1. Consecutive Cuts - Chapter
1</h3>
<p><span class="score_ac"><span class="math inline">\(10\)</span>
分</span> (91:44)</p>
<div class="note info no-icon"><p>定義一次「切牌」的動作是把撲克牌分成非空的兩堆，再交換順序疊回去。<br>
現在給定 <span class="math inline">\(N\)</span> 張撲克牌由上而下的數字
<span class="math inline">\(A_1, A_2, \ldots,
A_N\)</span>，請問你能不能利用恰好 <span
class="math inline">\(K\)</span> 次切牌讓牌堆由上而下變成 <span
class="math inline">\(B_1, B_2, \ldots, B_N\)</span> 的樣子？</p>
<ul>
<li>測資數量<span class="math inline">\({} = 200\)</span>。</li>
<li><span class="math inline">\(2 \le N \le 500\,000\)</span>。</li>
<li><span class="math inline">\(\sum\limits_{所有測資}{N} \le
5\,000\,000\)</span>。</li>
<li><span class="math inline">\(0 \le K \le 10^9\)</span>。</li>
<li><span class="math inline">\(1 \le A_i, B_i \le N\)</span>（<span
class="math inline">\(1 \le i \le N\)</span>）。</li>
<li><span class="math inline">\(A\)</span> 跟 <span
class="math inline">\(B\)</span> 都是 <span class="math inline">\(1, 2,
\ldots, N\)</span> 的排列。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-1A.cpp">AC
Solution</a></p>
<p>因為只做 A1 不能晉級，所以我直接去看 A2。</p>
<h3 id="a2.-consecutive-cuts---chapter-2">A2. Consecutive Cuts - Chapter
2</h3>
<p><span class="score_ac"><span class="math inline">\(16\)</span>
分</span> (93:03)</p>
<div class="note info no-icon"><p>定義一次「切牌」的動作是把撲克牌分成非空的兩堆，再交換順序疊回去。<br>
現在給定 <span class="math inline">\(N\)</span> 張撲克牌由上而下的數字
<span class="math inline">\(A_1, A_2, \ldots,
A_N\)</span>，請問你能不能利用恰好 <span
class="math inline">\(K\)</span> 次切牌讓牌堆由上而下變成 <span
class="math inline">\(B_1, B_2, \ldots, B_N\)</span> 的樣子？</p>
<ul>
<li>測資數量<span class="math inline">\({} = 205\)</span>。</li>
<li><span class="math inline">\(2 \le N \le 500\,000\)</span>。</li>
<li><span class="math inline">\(\sum\limits_{所有測資}{N} \le
7\,000\,000\)</span>。</li>
<li><span class="math inline">\(0 \le K \le 10^9\)</span>。</li>
<li><span class="math inline">\(1 \le A_i, B_i \le
\mathbf{10^9}\)</span>（<span class="math inline">\(1 \le i \le
N\)</span>）。</li>
<li><strong><span class="math inline">\(\mathbf{A}\)</span> 跟 <span
class="math inline">\(\mathbf{B}\)</span> 是彼此的排列。</strong></li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-1A.cpp">AC
Solution</a></p>
<p>看到的當下就發現是循環字串匹配，也就是
<a href="https://oi-wiki.org/string/minimal-string/">最小表示法</a>
的裸題。</p>
<p>不過在 <span class="math inline">\(N = 2\)</span> 跟 <span
class="math inline">\(K = 0, 1\)</span> 時好像需要特判，有點噁心
._.。</p>
<p>因為想要自己寫寫看，於是我就手刻了 <span
class="math inline">\(\mathcal{O}(N \lg^2{N})\)</span> 的 suffix
array，大約在 35 分鐘時刻完，特判這幾種 case 又寫了 10 分鐘。</p>
<p>不過很慘的是複雜度太爛了，在 validation input
跑了兩分鐘都還沒有出來，我只好去<del>偷</del>利用 BBQube codebook 的
SA-IS 來算，過了一陣子之後發現我看不懂 SA-IS 所以不會把它改成我要的樣子
QwQ。</p>
<p>最後我決定直接拿 OI-Wiki 上的模板來用，就成功過了！</p>
<blockquote>
<p>直到比賽結束我才發現我漏看「<span class="math inline">\(A\)</span> 跟
<span class="math inline">\(B\)</span>
是彼此的排列」的限制，讓我多刻了幾行特判。</p>
</blockquote>
<blockquote>
<p>話說這題好多人吃 FST 喔 OwO。</p>
</blockquote>
<h3 id="b1.-watering-well---chapter-1">B1. Watering Well - Chapter
1</h3>
<p><span class="score_ac"><span class="math inline">\(12\)</span>
分</span> (102:20)</p>
<div class="note info no-icon"><p>平面上有 <span class="math inline">\(N\)</span> 棵樹 <span
class="math inline">\((A_i, B_i)\)</span> 以及 <span
class="math inline">\(Q\)</span> 個水井 <span
class="math inline">\((X_j, Y_j)\)</span>。請找出</p>
<p><span class="math display">\[\sum_{i=1}^{N}\sum_{j=1}^{Q}{(A_i -
X_j)^2 + (B_i - Y_j)^2} \notag\]</span> <!-- --></p>
<p>的值，並輸出其對 <span class="math inline">\(10^9+7\)</span>
取模的結果。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 55\)</span>。</li>
<li><span class="math inline">\(1 \le N, Q \le 500\,000\)</span>。</li>
<li><span class="math inline">\(\sum\limits_{所有測資}{N},
\sum\limits_{所有測資}{Q} \le 3\,000\,000\)</span>。</li>
<li><span class="math inline">\(0 \le A_i, B_i \le 3000\)</span>（<span
class="math inline">\(1 \le i \le N\)</span>）。</li>
<li><span class="math inline">\((A_i, B_i) \ne (A_j,
B_j)\)</span>（<span class="math inline">\(1 \le i &lt; j \le
N\)</span>）。</li>
<li><span class="math inline">\(0 \le X_i, Y_i \le 3000\)</span>（<span
class="math inline">\(1 \le i \le Q\)</span>）。</li>
<li><span class="math inline">\((X_i, X_i) \ne (X_j,
X_j)\)</span>（<span class="math inline">\(1 \le i &lt; j \le
Q\)</span>）。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-1B1.cpp">AC
Solution</a></p>
<p>因為對 B2 暫時沒有想法，於是就先來寫 B1。</p>
<p>上面那個算式的兩個維度是完全互斥的，所以可以紀錄每個 <span
class="math inline">\(x\)</span> 跟 <span
class="math inline">\(y\)</span> 分別有幾棵樹跟幾個水井，再 <span
class="math inline">\(\mathcal{O}(C^2)\)</span> 暴力計算答案。</p>
<h3 id="b2.-watering-well---chapter-2">B2. Watering Well - Chapter
2</h3>
<p><span class="score_ac"><span class="math inline">\(18\)</span>
分</span> (135:04)</p>
<div class="note info no-icon"><p>平面上有 <span class="math inline">\(N\)</span> 棵樹 <span
class="math inline">\((A_i, B_i)\)</span> 以及 <span
class="math inline">\(Q\)</span> 個水井 <span
class="math inline">\((X_j, Y_j)\)</span>。請找出</p>
<p><span class="math display">\[\sum_{i=1}^{N}\sum_{j=1}^{Q}{(A_i -
X_j)^2 + (B_i - Y_j)^2} \notag\]</span> <!-- --></p>
<p>的值，並輸出其對 <span class="math inline">\(10^9+7\)</span>
取模的結果。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 50\)</span>。</li>
<li><span class="math inline">\(1 \le N, Q \le 500\,000\)</span>。</li>
<li><span class="math inline">\(\sum\limits_{所有測資}{N},
\sum\limits_{所有測資}{Q} \le 3\,000\,000\)</span>。</li>
<li><span class="math inline">\(0 \le A_i, B_i \le
\mathbf{10^9}\)</span>（<span class="math inline">\(1 \le i \le
N\)</span>）。</li>
<li><span class="math inline">\((A_i, B_i) \ne (A_j,
B_j)\)</span>（<span class="math inline">\(1 \le i &lt; j \le
N\)</span>）。</li>
<li><span class="math inline">\(0 \le X_i, Y_i \le
\mathbf{10^9}\)</span>（<span class="math inline">\(1 \le i \le
Q\)</span>）。</li>
<li><span class="math inline">\((X_i, X_i) \ne (X_j,
X_j)\)</span>（<span class="math inline">\(1 \le i &lt; j \le
Q\)</span>）。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-1B2.cpp">AC
Solution</a></p>
<p>先去刷了牙、收了一部分的行李，突然意識到他只是維護平方和而已，而印象中這可以透過維護平方和、一次方和、零次方和來做到。</p>
<p><span class="math display">\[\begin{aligned}
\sum_{i=1}^{k}{(p_i + \Delta)^2}
&amp;= \sum_{i=1}^{k}{(p_i^2 + 2 \Delta p_i + \Delta^2)} \\
&amp;= \underbrace{\sum_{i=1}^{k}{p_i^2}}_{平方和} + 2 \Delta \cdot
\underbrace{\sum_{i=1}^{k}{p_i}}_{一次方和} + \Delta^2 \cdot
\underbrace{\sum_{i=1}^{k}{1}}_{零次方和} \\
\end{aligned} \notag\]</span> <!-- --></p>
<div class="note warning"><details>
<summary>
範例 code
</summary>
此處省略掉處理 mod 的部分。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> s0 = <span class="number">1</span>, s1 = <span class="number">0</span>, s2 = <span class="number">0</span>, dx;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Q; ++i) &#123;</span><br><span class="line">    <span class="keyword">while</span> (s0 &lt; N <span class="keyword">and</span> tree[s0] &lt;= well[i]) &#123;</span><br><span class="line">        dx = tree[s0] - tree[s0<span class="number">-1</span>];</span><br><span class="line">        s2 += <span class="number">2</span> * s1 * dx + s0 * dx * dx;</span><br><span class="line">        s1 += s0 * dx;</span><br><span class="line">        s0 += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dx = well[i] - tree[s0<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">if</span> (dx &gt;= <span class="number">0</span>) ans += s2 + <span class="number">2</span> * s1 * dx + s0 * dx * dx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<h3 id="c.-lemonade-life">C. Lemonade Life</h3>
<p><span class="score_na"><span class="math inline">\(44\)</span>
分</span></p>
<div class="note info no-icon"><p>平面上有 <span class="math inline">\(N\)</span> 個點 <span
class="math inline">\((X_i, Y_i)\)</span>，你要從點 <span
class="math inline">\(1\)</span> 走到點 <span
class="math inline">\(N\)</span>，並中途停在一些點休息，你只能停在「存在一個半平面，其上只有該點」的點上，並且你一次走的
Euclidean distance 不能超過 <span class="math inline">\(D\)</span>。</p>
<p>若你在點 <span class="math inline">\(H_1, H_2, \ldots, H_M\)</span>
停留（其中 <span class="math inline">\(H_1 = 1\)</span> 且 <span
class="math inline">\(H_M = N\)</span>），那麼你的花費會是</p>
<p><span class="math display">\[\sum_{i=1}^{M-1}{\max\left\{ K, (X_{H_i}
- X_{H_{i+1}})^2 + (Y_{H_i} - Y_{H_{i+1}})^2 \right\}}\]</span>
<!-- --></p>
<p>請求出從點 <span class="math inline">\(1\)</span> 到點 <span
class="math inline">\(N\)</span> 的最小花費，或判斷其不可能被達成。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 90\)</span>。</li>
<li><span class="math inline">\(2 \le N \le 1\,000\,000\)</span>。</li>
<li><span class="math inline">\(\sum\limits_{所有測資}{N} \le
4\,000\,000\)</span>。</li>
<li>至多只有 <span class="math inline">\(15\)</span> 筆測資滿足 <span
class="math inline">\(N &gt; 5000\)</span>。</li>
<li><span class="math inline">\(0 \le K, D \le 10^9\)</span>。</li>
<li><span class="math inline">\(0 \le X_i, Y_i \le
1\,000\,000\)</span>（<span class="math inline">\(1 \le i \le
N\)</span>）。</li>
<li><span class="math inline">\(X_1 &lt; \min\{X_2, X_3, \ldots,
X_N\}\)</span>。</li>
<li><span class="math inline">\(X_N &gt; \max\{X_1, X_2, \ldots,
X_{N-1}\}\)</span>。</li>
<li><span class="math inline">\((X_i, X_i) \ne (X_j,
X_j)\)</span>（<span class="math inline">\(1 \le i &lt; j \le
N\)</span>）。</li>
</ul>
</div>
<p>幾何題掰掰～</p>
<p>好啦，但是除了看出「存在一個半平面，其上只有該點」就是指凸包以及可以
<span class="math inline">\(\mathcal{O}(N^2)\)</span>
建圖跑最短路之外就沒想法了。</p>
<p>驅車前往新竹的路上有一大半的時間都在想這個，而且因為大塞車還開了九彎十八拐ㄉ北宜公路，整個超暈
zzz。</p>
<p>隱隱約約感覺會有什麼東西具有單調性，像是你在上路跟下路走的點都只會嚴格遞增（？）、最短路的轉移區間有單調性（爛的）等等，但最後還是什麼都沒有想出來。</p>
<h2 id="總結">總結</h2>
<ul>
<li>分數：<span class="score_50"><span
class="math inline">\(56\)</span></span><span class="math inline">\(/
100\)</span> 分（<span class="score_ac"><span
class="math inline">\(10\)</span></span><span
class="math inline">\(/\)</span><span class="score_ac"><span
class="math inline">\(16\)</span></span><span
class="math inline">\(/\)</span><span class="score_ac"><span
class="math inline">\(12\)</span></span><span
class="math inline">\(/\)</span><span class="score_ac"><span
class="math inline">\(18\)</span></span><span
class="math inline">\(/\)</span><span class="score_na"><span
class="math inline">\(44\)</span></span>）</li>
<li>排名：<span class="medal_ag"><span
class="math inline">\(212\)</span></span><span class="math inline">\(/
12\,330\)</span> 名</li>
</ul>
<p>因為總體排名輸慘，所以就放臺灣排名就好。</p>
<p><img data-src="scoreboard.png" width="90%"></p>
<p>結果 C 的官解就是直接建凸包跑最短路，不過他給出了有趣的性質：</p>
<div class="note success"><p>在 <span class="math inline">\(a \times a\)</span>
的格子點上做凸包最多只會包含 <span
class="math inline">\(\mathcal{O}(a^{2/3})\)</span> 的點。</p>
</div>
<p>於是直接暴力的複雜度會是好的 OwO。</p>
<p>不過這種題目感覺不適合出在比賽裡，因為他的難度全在證明上，而賽中會想用暴力唬爛的人也不在少數。</p>
<p>以下是檢討：</p>
<p>MHC 的賽制是開放使用網路上的公開程式碼的，所以若要最小化 penalty
其實我應該直接拿 OI-Wiki 上的 code
來用，而不是先嘗試自己刻。這樣的後果就是 A1 ~ B2 都多了約 75 分鐘的
penalty，致使排名下降了 120+ 名。</p>
<p>另外，在這場跟上一場的最後一題都是嚇人的題目，除了複雜度不好分析之外基本上就是暴力小優化就能過的類型。</p>
<p>從 Round 2 開始每場都只有三個小時，我應該多使用 codebook
以及面對無解題去嘗試暴力的做法並加以優化。MHC 的 validation input
都還蠻大的，或許也可以拿來驗證時間複雜度？</p>
<div class="note primary"><ul>
<li>上一篇：<a href="../mhc22-0">Qualification</a></li>
<li>下一篇：還不存在</li>
</ul>
</div>
]]></content>
      <categories>
        <category>競程</category>
        <category>比賽心得</category>
      </categories>
      <tags>
        <tag>MHC</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 東華盃 遊記</title>
    <url>/cp/contests/ndhu22/</url>
    <content><![CDATA[<blockquote>
<p>時間：2022.12.03 -- 2022.12.04</p>
</blockquote>
<p>東華盃是從去年開始辦的比賽，顧名思義，他就是東華大學所辦的比賽。</p>
<p>去年受 detaomega
推銷而去參加（結果他去年跟今年都沒來），雖然（他們的）問題重重，最終所幸還是順利的以
<code>ACKube</code> 的隊名拿下第一名，收穫 <span
class="math inline">\(15\,000\)</span> NTD 獎金。</p>
<span id="more"></span>
<p>去年的心得打到一半就放置了，可能就稍微紀錄一下去年最後發生什麼事情就好？</p>
<p>總之總共有 8 題，其中有 4
題測資是爛的，而這個「爛」是直到一年後的現在都沒有修好。</p>
<p>當時賽中一直 WA 還以為是邊界 case
或是讀題障礙，結果最後其中三題在出場後跟教授回報對測資的疑慮他才說是他們的官解爛掉
= =，最後一題則可能是 <code>\r\n</code> 跟 <code>\n</code>
的區別（沒有問出來，但這應該是唯一爛掉的可能性）。</p>
<p>但是有錢所以就算了，欸嘿 Ow&lt;～</p>
<h2 id="day-------報名階段">Day -? --- 報名階段</h2>
<p>今年又是被 detaomega 提醒報名東華盃（可是他又找藉口不去打 ._.）。</p>
<p>因為從今年開始跟黃迺絜（coldEr66）以及陳重諺（mmi366127）正式地在
ICPC 組隊，於是今年就用了 <code>NYCU_Yamada</code> 當作隊名。</p>
<p>可惜的是，迺絜到前一兩周突然發現跟系排出遊撞期無法參加，我跟重諺就決定<del>模仿
waynedisonitau123 今年在 World Final
的狀況</del>當成有一人缺席來打了，希望不會因此而爆炸。</p>
<h2 id="day-0-----前往花蓮-入住民宿">Day 0 --- 前往花蓮 &amp;
入住民宿</h2>
<ul>
<li>08:30</li>
</ul>
<p>因為早上在看球賽 + 出題導致 8:30
洗完澡變得超級累，結果就睡到將近一點。可能是被最近世界盃的作息搞的（本來好不容易都調整成可以五點前睡覺了耶），搭客運的時候一路上肚子又超級痛。本來打算跟重諺吃拉麵的計畫就移到明天比完賽了（希望可以吃的到），直到
15:10 左右到了台北車站隨便吃了個午餐。</p>
<p>然後我把我的百元粉紅雨傘丟在腳踏車上（清大門口 15-1）了
QAQ，希望明天回校能在草叢裡找到她，也希望今明兩天都不要下雨。</p>
<ul>
<li>15:10</li>
</ul>
<p>午餐吃的是北車微風廣場的某家的牛肉麵，我覺得無論是肉質、湯頭、份量都比段純真差多了
QQ</p>
<ul>
<li>16:20</li>
</ul>
<p>今天奶奶生日，我就去景平替奶奶慶生，讓重諺先去民宿 check-in。</p>
<p>差點搭不到末班車 OAO</p>
<ul>
<li>20:43</li>
</ul>
<p>搭上了開往志學站的末班車，在車上把要出的題目的題敘寫好感覺就花了我將近三個小時耶！至少這樣題目應該是全部都處理完了，就只剩下怎麼出真的很強的測資了。</p>
<ul>
<li>23:22</li>
</ul>
<p>都末班車了還能誤點五分鐘 ._.</p>
<p><img data-src="donghwa.jpg" style="width: 90%; max-width: 400px"></p>
<p>從志學站走到民宿要花整整 43
分鐘喔，而且手機在最糟糕的情況下沒電了：我走學校內的道路，Google
導航以為我在隔著一個鐵絲網的縣道，於是我就看著只剩 4
分鐘的路程、一線之隔的路口，我卻要再繞將近 30
分鐘才能抵達，此時手機就沒電了，我連要繞哪裡都不知道。</p>
<p><img data-src="donghwa-stuck.jpg" style="width: 90%; max-width: 400px"></p>
<p>所幸我有先拜託重諺在我手機沒電的時候來救我，最後是他找到了一個鐵絲網的破洞讓我從裡面鑽出去才逃出生天。因為重諺的飲料掉在洞口處，所以我們又回去拿，在那時候我踩到了一隻蝸牛，我很抱歉
QAQ</p>
<p>明天的比賽我想來試試看帶點風向？但搞不好都是實作題那也帶不起來。</p>
<ul>
<li>24:30</li>
</ul>
<p>其實我不知道是幾點到民宿的，今年住的這間「綠舍民宿」比去年的好上不少，除了灰塵比較少之外，終於不用爬樓梯了耶！但是也已經沒有什麼時間來混就是了。</p>
<p>重諺猜待會的阿根廷 v.s. 澳洲會是 1 : 2，因為他們都倒著踢球。</p>
<ul>
<li>27:47</li>
</ul>
<p>16 強阿根廷 v.s. 澳洲，上半場傷停補時階段，1 : 0
由阿根廷領先（沒，我今天沒打算看這場）。今天的紀錄終於寫完，明天 8:30
前要起床而我還沒洗澡。</p>
<p>ㄌㄌ之神啊！請保佑我能夠在明天的比賽上保持清醒，不要把東西留在東華或是民宿，也希望明天題目敘述跟測資一切正常。</p>
<h2 id="day-1-----2022-東華盃">Day 1 --- 2022 東華盃</h2>
<ul>
<li>09:15</li>
</ul>
<p><img data-src="green-villa.jpg" style="width: 90%"></p>
<p>本來預計是 08:30 要起床吃早餐，結果我跟重諺都睡著了，直到 09:15
老闆來敲門才起床 OwO</p>
<p>吃完老闆提供的早餐（沒有照片）之後，老闆還很好心的載我們去報到。</p>
<p>參加比賽的隊伍比想像中少了一大截，特別是高中組，去年還有 9
隊，今年直接只剩下被我推坑的 4 隊學弟們。雖然官網上寫說不足 6
隊將不會舉辦高中組，但看起來還是傲嬌地辦了呢～</p>
<p><img data-src="participants.jpg" style="width: 90%"></p>
<ul>
<li>10:00</li>
</ul>
<p>報到時他們說必須三人都到場才能進去，還好我們有先報備過才能入場比賽。</p>
<ul>
<li>10:20</li>
</ul>
<p>到了開幕式抽完座位，發現外面竟然有烤豬待會比賽可以吃！</p>
<p><img data-src="roast.jpg" style="width: 90%"></p>
<ul>
<li>10:50</li>
</ul>
<p>收完手機跟包包，被帶到座位之後就開始測機……喔不對沒有測機環節。工作人員說密碼紙放在報到時的紙袋裡面，結果因為我把那個袋子收進包包裡所以就跑出去拿，拿密碼回來的時候比賽已經開始了。</p>
<h3 id="比賽開始">比賽開始</h3>
<p>以金刀 template 重諺看題的分工開打。</p>
<p>然而那邊的電腦沒有 Notepad++、也沒有 DevC++，只有我不會用的
Code::Blocks，所以光是開檔案跟第一次成功編譯就花了十幾分鐘的時間
QQ。模板打完又一直編譯失敗，分段註解之後才發現是
<code>#include &lt;bits/stdc++.h&gt;</code> 的鍋，</p>
<p>花了約 25
分鐘，在我還在跟各種標頭檔苦戰時，重諺已經先把一些題目看完了，這是
pB：</p>
<h3 id="b---map-with-two-colors">B - Map with Two Colors</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(n\)</span> 點 <span
class="math inline">\(m\)</span> 邊的圖，請你判斷是不是二分圖。</p>
<ul>
<li>多筆測資。</li>
<li><span class="math inline">\(n &lt; 1000\)</span>。</li>
<li>其他範圍都沒給。</li>
</ul>
</div>
<blockquote>
<p>特別之處：</p>
<ul>
<li>多筆輸入，題目寫輸入 <span class="math inline">\(n = m = 0\)</span>
時結束，但範例是 <code>EOF</code> 結束。</li>
<li>輸出 <code>BICOLORABLE.</code> 或
<code>NOT BICOLORABLE.</code>，可能有句點坑掉了一些人 (?)。</li>
</ul>
</blockquote>
<p>在半小時的時候這題還只有一隊有 submission，而且沒人
AC。當模板就緒之後我就直接用 DSU 寫掉這題了。本來以為會是測資爛掉所以吃
WA，結果就直接 AC 了。</p>
<ul>
<li><strong>30 min, pB <span class="score_ac">Accepted</span> +
首殺</strong></li>
</ul>
<p>接著換重諺上去寫 pH，我去看題。</p>
<h3 id="d---texas-hold-em">D - Texas hold 'em</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(N\)</span>
個人的兩張底牌以及五張公共牌，請輸出誰會贏，多於兩人會贏則輸出
<code>Tie</code>。</p>
<ul>
<li><span class="math inline">\(N \le 10\)</span>。</li>
</ul>
</div>
<p>哈哈，是裸的 Texas
Hold'em（德州撲克判手排大小）ㄟ，可惜我們把它從模板裡註解掉了 QQ</p>
<h3 id="h---egg-shortage">H - Egg Shortage</h3>
<div class="note info no-icon"><p>有 <span class="math inline">\(n\)</span> 間商店，其中第 <span
class="math inline">\(i\)</span> 間有 <span
class="math inline">\(k_i\)</span> 件商品，每個人總共只能買至多 <span
class="math inline">\(\ell_i\)</span>
件，每件商品都只能買至多一個，且其中第 <span
class="math inline">\(j\)</span> 件物品的價格是 <span
class="math inline">\(p_{i,j}\)</span>、收益是 <span
class="math inline">\(w_{i,j}\)</span>。<br> 現在有兩個人帶著總共 <span
class="math inline">\(m\)</span>
元打算分別去一家商店買東西（可以去同一家），求收益最大多少，以及在此收益之下最少要花多少錢。</p>
<ul>
<li>測資數量 <span class="math inline">\(\le 100\)</span>。</li>
<li><span class="math inline">\(n \le 20\)</span>。</li>
<li><span class="math inline">\(m \le 10^4\)</span>。</li>
<li><span class="math inline">\(k_i \le 100\)</span>（<span
class="math inline">\(1 \le i \le n\)</span>）。</li>
<li><span class="math inline">\(\ell_i \le 10\)</span>（<span
class="math inline">\(1 \le i \le n\)</span>）。</li>
<li><span class="math inline">\(w_{i,j} \le 10^5\)</span>（<span
class="math inline">\(1 \le i \le n\)</span>、<span
class="math inline">\(1 \le j \le k_i\)</span>）。</li>
<li><span class="math inline">\(p_{i,j} \le 10^4\)</span>（<span
class="math inline">\(1 \le i \le n\)</span>、<span
class="math inline">\(1 \le j \le k_i\)</span>）。</li>
</ul>
</div>
<p>跟經典背包沒差多少，不過重諺把題目看錯成「每一家店的每個物品至多拿
<span class="math inline">\(\ell_i\)</span> 個」導致燒雞。</p>
<p>在他 debug 的時候我先把 pC 寫掉。</p>
<h3 id="c---optimal-resource">C - Optimal Resource</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(N\)</span>、<span
class="math inline">\((A_i, B_i, C_i)_{i=1}^{3}\)</span>，並定義 <span
class="math inline">\(f_i(x) = A_i x^2 + B_i x + C_i\)</span>，請求出
<span class="math display">\[\max\limits_{\substack{x + y \le N \\ x, y
\ge 1}}\{ f_1(x) + f_2(y), f_1(x) + f_3(y), f_2(x) + f_3(y) \}\]</span>
<!-- --></p>
<ul>
<li><span class="math inline">\(N \le 10^4\)</span>。</li>
<li>沒有 <span class="math inline">\(A_i, B_i, C_i\)</span>
的範圍。</li>
</ul>
</div>
<p>其實題目沒有說到底能不能 <span class="math inline">\(x + y &lt;
N\)</span>，但因為反正在 <span class="math inline">\(A, B, C\)</span>
都是正的時候不會影響到，所以我就寫了 <span
class="math inline">\(\mathcal{O}(N^2)\)</span> 枚舉取 max 的作法。</p>
<ul>
<li><strong>47 min, pC <span class="score_ac">Accepted</span> +
首殺</strong></li>
</ul>
<p>重諺又双叒叕少看 pH 題目了，他漏看了「兩個人」的條件，好在範例測資有
de 出這個問題。而我發現 pA 是字串處理，換我上去寫掉它。</p>
<h3 id="a---black-friday">A - Black Friday</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(X\)</span>
個商品的特價信息（皆為下面其中一種）：</p>
<ul>
<li><code>Buy N gets M free</code></li>
<li><code>Buy 2 second one get M% off</code></li>
<li><code>The total amount over N get M% off</code></li>
</ul>
<p>接著給你 <span class="math inline">\(Y\)</span>
次購買物品的紀錄，你需要計算出總共的花費，並四捨五入至整數。</p>
<ul>
<li><span class="math inline">\(Y \le X\)</span>。</li>
<li>沒有其他限制。</li>
</ul>
</div>
<blockquote>
<p>特別之處：</p>
<ul>
<li>題目沒有寫要四捨五入，範例也都是整數。這是問 clarification
才回覆的。</li>
<li>特價信息 3 的 over <span class="math inline">\(N\)</span> 其實是指
<span class="math inline">\(\ge
N\)</span>。這是經過很多次的測試才通靈出來的。</li>
</ul>
</blockquote>
<p>一開始用 double 計算再 round down，所以錯的很燒雞。</p>
<ul>
<li><strong>89 min, pA <span class="score_na">Compile
Error</span></strong></li>
<li><strong>90 min, pA <span class="score_na">Wrong
Answer</span></strong></li>
</ul>
<p>我在旁邊看算式有沒有問題時重諺終於把 pH 寫到可以過範測了！</p>
<ul>
<li><strong>98 min, pH <span class="score_na">Time Limit
Exceeded</span></strong></li>
</ul>
<p>因為重諺算複雜度時沒有考慮到測資筆數 <span
class="math inline">\(t\)</span>，其實複雜度是 <span
class="math inline">\(\mathcal{O}(t (nmkl + n^2m)) \approx 2 \cdot
10^{10}\)</span>，我認為是要利用 <span class="math inline">\(\ell_i \le
10\)</span> 來做到更好的複雜度。我接過 pH
的題敘想檢查重諺有沒有漏掉東西，順便問了一下 pF 沒寫的範圍限制，他去推
pG 的公式。</p>
<ul>
<li><strong>109 min, pF Request #1: "What is the upper bound of
N?"</strong></li>
</ul>
<h3 id="g---coding-square-plan">G - Coding Square Plan</h3>
<div class="note info no-icon"><p>給你一個長度 <span class="math inline">\(2k\)</span> 的 <span
class="math inline">\(\texttt{01}\)</span> 字串 <span
class="math inline">\(s\)</span>，請求出在 <span
class="math inline">\(2^k \times 2^k\)</span>
的方格內以希爾伯特曲線的方法依序填入數字 <span class="math inline">\(0,
1, \ldots, 2^{2k}-1\)</span> 之後，<span
class="math inline">\(s\)</span> 代表的數字會在哪個格子。</p>
<ul>
<li>測資數量 <span class="math inline">\(\le 1024\)</span>。</li>
<li><span class="math inline">\(2 \le 2k \le 30\,000\)</span>。</li>
</ul>
</div>
<p>pG
一開始就有精神出來了，只不過因為要用到大數所以先放一邊。重諺很快就推出遞迴式了，但我們遇到的第一個問題就是他的輸入格式。他是用
input-EOF，而我們都不知道怎麼用 python 做這件事。</p>
<p>一開始用了 <code>EOFError</code> 的寫法如下：</p>
<div class="note warning"><details>
<summary>
範例 code
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">expect EOFError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>在範例過了之後交上去，結果因為重諺把輸出格式打成
<code>f'Case: &#123;t&#125;: (&#123;x&#125;, &#123;y&#125;)'</code>，不出意外的吃了
WA。結果修好之後反而變成 RE？</p>
<ul>
<li><strong>120 min, pG <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>120 min, pG <span class="score_na">Runtime
Error</span></strong></li>
<li><strong>121 min, pF Respond #1: "N &lt;= 100"</strong></li>
</ul>
<p>pF <span class="math inline">\(N \le 100\)</span>
完全不會做，丟一邊。</p>
<p>我覺得這題可能像去年一樣又是測資再搞，所以就在字串長度是奇數的情況下在前面補零。</p>
<blockquote>
<p>事實證明這起到了反效果 QQ</p>
</blockquote>
<ul>
<li><strong>126 min, pG <span class="score_na">Runtime
Error</span></strong></li>
<li><strong>129 min, pG <span class="score_na">Wrong
Answer</span></strong></li>
</ul>
<p>這時其實非常危險，雖然 pB 跟 pC 兩題都是我們 1 try
首殺，其他題也都沒人 AC，但是一直到第 7 名都是 2 題，而且感覺上至少
pA、pD 題目也都不難只是搞人，如果有其他 3
隊過了某題我們就會直接沒有獎金。</p>
<p>分析了一下，好吧，還是只能繼續寫 code。重諺先回到旁邊 debug
算式，我則是繼續看 pA 有沒有什麼怪怪的地方。</p>
<p>猜了一下 <code>Buy N gets M free</code> 如果拿不到 <span
class="math inline">\(M\)</span> 個 free
就只能都用買的（猜錯了），還是吃了 WA。</p>
<ul>
<li><strong>134 min, pA <span class="score_na">Wrong
Answer</span></strong></li>
</ul>
<p>這時發現答案很可能不是整數，又因為題目寫 "Output a
integer"，所以我們打算問一下如果答案不是整數會怎麼樣。</p>
<ul>
<li><strong>136 min, pA Request #2: "If the answer is a floating point
number, how do we deal with it?"</strong></li>
<li><strong>137 min, pA Respond #2: "You should round it to
integer."</strong></li>
</ul>
<p>把計算答案的方法改成乘以 <span class="math inline">\(100\)</span>
之後用整數運算，又測了各種（他們）可能做錯的地方，還是一直吃 WA。</p>
<ul>
<li><strong>145 min, pA <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>145 min, pA <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>147 min, pA <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>148 min, pA <span class="score_na">Wrong
Answer</span></strong></li>
</ul>
<p>直到這時我想說「搞不好他的 over 定義是爛的呢？」於是就把
<code>A &lt;= N ? 100 : (100-M)</code> 改成
<code>A &lt; N ? 100 : (100-M)</code>，結果上傳上去，GOAL！</p>
<ul>
<li><strong>148 (+120) min, pA <span class="score_ac">Accepted</span> +
首殺</strong></li>
</ul>
<p>雖然拿到首殺卻一點也不開心。不過，其實原本今天的目標是成功抓到測資的問題啦哈哈哈，終於達成了耶！</p>
<p>放心了一些，繼續開水題 pE。</p>
<h3 id="e---through-the-dungeon">E - Through The Dungeon</h3>
<div class="note info no-icon"><p>給你由 <code>W</code>、<code>T</code>、<code></code>、<code>#</code>
構成的 <span class="math inline">\(h \times w\)</span>
迷宮矩陣，其中你的起始位置是 <code>W</code>、終點位置是
<code>T</code>。<br> 你每一步可以往四方位不是障礙物 <code>#</code>
的地方移動，而且你可以至多用一步來做一次「傳送到四方位兩格遠且不是障礙物的地方」，求
<code>W</code> 到 <code>T</code> 的最少步數。</p>
<ul>
<li><span class="math inline">\(h, w \le 1024\)</span>。</li>
<li>只會有一個 <code>W</code> 跟 <code>T</code>。</li>
<li>一定走的到終點。</li>
</ul>
</div>
<blockquote>
<p>特別之處：</p>
<ul>
<li>題目敘述沒有保證只有一個起點終點。這是問 clarification
才回覆的。</li>
<li>題目沒有保證一定走的到終點。這是問 clarification 才回覆的。</li>
<li>因為測資有大量空格，題本上又沒有用等寬字元，所以根本看不懂範例測資，也複製不下來。</li>
</ul>
</blockquote>
<p>這種只能做一次的通常都是從頭尾各做一遍，這題也不例外。</p>
<p><img data-src="pE-input.png" style="width: 90%"></p>
<p>看這噁心的輸入格式 = =</p>
<ul>
<li><strong>155 min, pE <span class="score_na">Compile
Error</span></strong></li>
<li><strong>156 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
</ul>
<p>搞不好是走不到終點呢？</p>
<ul>
<li><strong>158 min, pE Request #3: "Is it possible that Kazuma can't
reach treasure?"</strong></li>
<li><strong>160 min, pE Respond #3: "always can reach the treasure.
Maybe needs teleport"</strong></li>
</ul>
<p>？？？</p>
<p>感覺他測資又爛了，但是這次的寫法應該沒踩到 <code>\r\n</code>
的問題，也不知道怎麼 debug。</p>
<p>把 pG 的 input 換成 <code>for s in sys.stdin.readlines()</code>
之後重新上傳。得到 RE 之後認為可能是遞迴深度 <span
class="math inline">\(15\,000\)</span> 過深，所以換成 bottom-up
的做法。</p>
<ul>
<li><strong>160 min, pG <span class="score_na">Runtime
Error</span></strong></li>
<li><strong>164 min, pG <span class="score_na">Runtime
Error</span></strong></li>
</ul>
<p>反正現在罰時也已經不重要了，所以就把
<code>#define int long long</code> 關掉重傳 pH 看看能不能壓過。</p>
<ul>
<li><strong>172 min, pH <span class="score_na">Time Limit
Exceeded</span></strong></li>
</ul>
<p>回到 pG，決定把長度偶數的判斷關掉之後就拿到 AC 了？？？</p>
<p>結果是他輸入的長度可能是奇數，這時候要直接忽略最後一個字元 = =</p>
<p>又成功通靈出一題 &gt;////&lt;</p>
<ul>
<li><strong>181 min, pG <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>186 (+140) min, pG <span class="score_ac">Accepted</span> +
首殺</strong></li>
</ul>
<p>我們輪流 debug pE 跟 pH，順便對沒給範圍的 pF
丟了一個詢問，希望可以有特殊解法。</p>
<ul>
<li><strong>193 min, pF Request #4:
問人數跟人數和有沒有上限</strong></li>
<li><strong>195 min, pE Request #5: "Will there be multiple or no 'K' or
'T' on the map?"</strong></li>
<li><strong>201 min, pF Respond #4: "all the number can be handle using
int in C"</strong></li>
<li><strong>201 min, pE Respond #5: "both exactly one."</strong></li>
</ul>
<p>好吧，還是不會。</p>
<p>pH 前半邊的複雜度沒壓下來，倒是發現重諺在後半部找答案的地方根本就是
<span class="math inline">\(\mathcal{O}(t (n^2 m^2))\)</span>
的，把他改掉再 de 出一些小 bug 就成功 AC 了。</p>
<p>最可做的水題卻卡了快整場 QQ</p>
<ul>
<li><strong>207 min, pH <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>210 min, pH <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>210 min, pD <span class="score_na">No
Output</span></strong></li>
<li><strong>213 (+80) min, pH <span class="score_ac">Accepted</span> +
首殺</strong></li>
</ul>
<p>途中看到剩半小時封版了就直接傳了空檔案到 pD，strategic
submission（O）。</p>
<blockquote>
<p>啊封版之後怎麼還在發氣球 = =</p>
</blockquote>
<p>最後的時間都在猜 pE 出了什麼問題，可惜到最後都沒有猜出來 QQ</p>
<ul>
<li><strong>215 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>222 min, pE <span class="score_na">Compile
Error</span></strong></li>
<li><strong>223 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>224 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>233 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>237 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>238 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>239 min, pF <span class="score_na">No
Output</span></strong></li>
<li><strong>239 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
</ul>
<p>還沒有講到的題目是
pF，不過感覺很不可做再加上其他題問題太多，所以賽中基本上沒有花任何時間來想這題。</p>
<h3 id="f---on-the-giants-trail">F - On the giant's trail</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(N\)</span>
個點的簡單圖的鄰接矩陣，起點跟終點是 <span
class="math inline">\(M\)</span> 跟 <span
class="math inline">\(G\)</span>，每個點上都有一個數字 <span
class="math inline">\(a_i\)</span>。<br> 你的力量 <span
class="math inline">\(\text{str}\)</span> 一開始是 <span
class="math inline">\(a_M\)</span>，你走到一個點 <span
class="math inline">\(v\)</span> 時要保證 <span
class="math inline">\(\text{str} &gt; a_v\)</span>，之後 <span
class="math inline">\(\text{str}\)</span> 就會加上 <span
class="math inline">\(a_v\)</span>。<br> 你要找出在所有不經過重複點的
<span class="math inline">\(M \leadsto G\)</span> 路徑之中最小的 <span
class="math inline">\(\text{str}\)</span>。</p>
<ul>
<li><span class="math inline">\(N \le 100\)</span>。</li>
<li><span class="math inline">\(1 \le M, G \le N\)</span>。</li>
<li><span class="math inline">\(a_i \ge 0\)</span>（<span
class="math inline">\(1 \le i \le N\)</span>）。</li>
<li><span class="math inline">\(\sum_{i=1}^{N} a_i \le
2^{31}-1\)</span>。</li>
</ul>
</div>
<blockquote>
<p>特別之處：</p>
<ul>
<li>題目沒有給 <span class="math inline">\(N\)</span> 的範圍。這是問
clarification 才回覆的。</li>
<li>題目沒有給 <span class="math inline">\(a_i\)</span> 的範圍。這是問
clarification 才回覆的。</li>
</ul>
</blockquote>
<p>因為這題光是讓 <span class="math inline">\(a_M = 101\)</span>、<span
class="math inline">\(a_G = 101 + (N-2)\)</span>、其他 <span
class="math inline">\(a_i = 1\)</span> 就等價於找 <span
class="math inline">\(M \leadsto G\)</span> 的 Hamiltonian path
了，所以這個困難版更是完全不會做。</p>
<h3 id="總結">總結</h3>
<ul>
<li>Rank: 1 / 40</li>
<li>AC: 5 / 8</li>
<li>Penalty: 946</li>
</ul>
<p><img data-src="scoreboard.png" width="90%"></p>
<p>不出意外的拿下了第一名，但打得不甚理想。檢討如下：</p>
<ul>
<li>pA：應該直接乘 <span class="math inline">\(100\)</span>
算，不要用容易吃誤差的 double。</li>
<li>pD：實作沒有那麼難卻被「模板沒帶到」這件事嚇到了，應該還是要好好分析類似題目的實作細節。</li>
<li>pG：對 python 語法很不熟悉。話說如果我當時沒有特判奇數的 case
應該就會直接不知道測資有錯就過了ㄟ。</li>
<li>pH：題目多次看錯，重諺在分析複雜度的地方燒雞。</li>
<li>很多函式都不知道要 include
什麼咚咚（<code>int64_t</code>、<code>atoi</code>、<code>setprecision</code>），如果又遇到類似情況必須先有準備。</li>
</ul>
<h3 id="比賽結束">比賽結束</h3>
<ul>
<li>15:15</li>
</ul>
<p>結束之後領完包包跟手機，快速的把 code
跟提交紀錄都存下來，並去隔壁教室吃快被吃完的午餐。可惜他的油飯跟肉都冷掉了，不過肉還不錯
AwA。</p>
<ul>
<li>16:00</li>
</ul>
<p>開幕式的時候說如果東華明年沒有至少拿到前三名明年就沒有烤豬可以吃了，結果除了第一名是我們之外剩下的名次都被海大包攬了（烤豬
88888888）。高中更是只有四隊參加，但我記得他好像發出了前三名跟兩個佳作？到底是怎麼發的啊？</p>
<p>很開心的是學弟們在我在報名期限最後一天推薦之後還有來報名，去年還有好幾所高中組了九隊，今年直接只有花中的四隊包下了全部的高中組獎金（希望這套題目不會讓他們不想打競程
QQ）。</p>
<p>比賽結束並頒完獎之後就準備回家，從東華走到火車站真的超久，大概走了四十幾分鐘。</p>
<p><img data-src="teammate.jpg" style="width: 90%"></p>
<ul>
<li>17:10</li>
</ul>
<p>買了回程的票，結果本來想在台北吃拉麵卻發現只買的到 17:34 - 17:48
的志學 <span class="math inline">\(\leadsto\)</span> 花蓮跟 19:20 -
21:30 的花蓮 <span class="math inline">\(\leadsto\)</span>
台北車票。於是晚餐就只好改變計畫去車站樓下的「好正點港式點心」吃，吃完就順手買了伴手禮麻糬回去。</p>
<p>本來想點鮮蝦腸粉結果意外劃到紅米干貝腸粉，意外的好吃呢～</p>
<p>然後櫻花蝦高麗菜超盤，169 * 1.1 卻只有那樣的份量 QQ</p>
<p><img data-src="after-food.jpg" style="width: 90%"></p>
<ul>
<li>21:30</li>
</ul>
<p>到台北之後也沒有時間去安利美特或是逛地下街了，不過還是在空曠的地下街走了十幾分鐘才往客運站出發。北車果然是大型迷宮阿，我們迷路了好一陣子才終於找到轉運站在哪個方向。</p>
<p>轉運站大排長龍，又是排了一整圈才輪到我們。</p>
<ul>
<li>24:00</li>
</ul>
<p>因為清大風景比較好而在清大下車（?），這是清大的仙人掌。</p>
<p><img data-src="nthu-cactus.jpg" style="width: 90%"></p>
<ul>
<li>24:30</li>
</ul>
<p>好像差不多這個時間才回到宿舍，因為已經很累了所以就直接洗洗睡了，希望明年的比賽體驗可以更好一些吧。</p>
]]></content>
      <categories>
        <category>競程</category>
        <category>比賽心得</category>
        <category>遊記</category>
      </categories>
      <tags>
        <tag>ICPC</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 YCPC a.k.a. 交大年度賽 遊記</title>
    <url>/cp/contests/ycpc22/</url>
    <content><![CDATA[<blockquote>
<p>時間：2022.09.05 -- 2022.09.06</p>
</blockquote>
<p>一年一度的校內賽又來ㄌ &gt;////&lt;</p>
<p>大一拿到第三名，去年得了第七名（前六名可以去打
NCPC），結果因為忘記去開會導致來不及遞補到 NCPC 的名額 QwQ。</p>
<p>今年是跟新隊友黃迺絜（coldEr66）還有陳重諺（mmi366127）組隊，希望可以拿到好成績
&gt;w&lt;！</p>
<span id="more"></span>
<h2 id="day--1-day-0-----sitcon-宿舍入住">Day -1 ~ Day 0 --- SITCON
&amp; 宿舍入住</h2>
<p>賽前只有在 8/19 練到
<a href="https://codeforces.com/gym/102007">一場</a>。</p>
<p>9/4 恰逢
SITCON，所以就帶著行李出發去台北，可惜因為作息爆炸於是下午一點才到，有很多議程沒聽到。</p>
<p>晚上跟林律穎ㄘ睽違已久的北車武藏拉麵，五月在新竹吃完就確診了
QwQ。</p>
<p><img data-src="ramen.jpg" style="width: 90%"></p>
<p>回到交大先去借宿一晚，隔天中午醒來就去辦宿舍入住跟搬行李，發現有兩個室友暑宿。雖然只帶一箱行李但要整理都是灰塵的房間好麻煩
._.。</p>
<p>晚上在床上從 2:20 躺到
7:30，因為沒帶床墊感覺每一個小時就會醒過來一次，結果起床之後還是超累 =
=。</p>
<h2 id="day-1-----ycpc-2022">Day 1 --- YCPC 2022</h2>
<p>早上吃了麥當勞的雞塊薯餅跟紅茶，在 8:50
左右到校計中報到。迺絜一直裝弱說自己只會倒水。</p>
<p>比賽用的設備是 Windows +
VM，一開始只要全螢幕就會一直黑屏，還好比賽中都沒有發生這個問題。</p>
<p>發下密碼跟題本，大概在 DOMJudge 開放之前的半分鐘 lys
就進來說開始了？？？反正先看題目ㄅ～</p>
<ul>
<li><a
href="https://github.com/SorahISA/competitive_programming/tree/master/ICPC%20Practice/ycpc22">程式碼</a></li>
<li><a
href="https://github.com/SorahISA/competitive_programming/blob/master/ICPC%20Practice/ycpc22/ycpc22.pdf">題本</a></li>
</ul>
<blockquote>
<p>總共有 <span class="math inline">\(13\)</span>
題，我們開場的策略就是讓迺絜先打模板，我跟重諺先開前後的題目。不過我看到
pD 的題敘超短就先拿過來讀：</p>
</blockquote>
<h3 id="d---large-number-multiply">D - Large Number Multiply</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(A\)</span>、<span
class="math inline">\(B\)</span>，輸出 <span class="math inline">\(A
\times B\)</span>。</p>
<p>有 <span class="math inline">\(N\)</span> 組測資。</p>
<ul>
<li><span class="math inline">\(N\)</span> 的範圍不明。</li>
<li><span class="math inline">\(1 \le A, B &lt; 10^{21}\)</span>。</li>
</ul>
</div>
<ul>
<li><strong>1 min, pD <span class="score_ac">Correct</span> +
首殺</strong></li>
</ul>
<p>哈！直接用 python 寫拿到全場首殺，還是久違的 1 min AC
&gt;////&lt;。一開始看到分數不是深綠還以為沒有首殺ㄌ。</p>
<blockquote>
<p>總之我先繼續看我分到的 pABC，重諺看後面幾題，過一陣子重諺就發現 pM
跟我們
<a href="https://codeforces.com/gym/102007/problem/J">團練的一題</a>
一模一樣：</p>
</blockquote>
<h3 id="m---largest-quadrilateral">M - Largest Quadrilateral</h3>
<div class="note info no-icon"><p>給你四個正整數 <span class="math inline">\(a\)</span>、<span
class="math inline">\(b\)</span>、<span
class="math inline">\(c\)</span>、<span
class="math inline">\(d\)</span>，請求出他們可以圍出的最大四邊形面積。</p>
<ul>
<li><span class="math inline">\(1 \le a, b, c, d \le 100\)</span>。</li>
<li>保證可以圍出四邊形。</li>
<li>誤差 <span class="math inline">\(\le 10^{-6}\)</span>。</li>
</ul>
</div>
<p>在團練時我們使用的是二分搜，不過剛好在團練完的時候我們有看題解裡講到
<a href="https://en.wikipedia.org/wiki/Brahmagupta#Brahmagupta's_formula">Brahmagupta's
formula</a> 可以在 <span class="math inline">\(\mathcal{O}(1)\)</span>
時間求解，而且很精簡。</p>
<p><span class="math display">\[\begin{aligned} s &amp;=
\frac{a+b+c+d}{2} \\ A &amp;= \sqrt{(s-a)(s-b)(s-c)(s-d)} \\
\end{aligned} \notag\]</span> <!-- --></p>
<ul>
<li><strong>4 min, pM <span class="score_ac">Correct</span> +
首殺</strong></li>
</ul>
<p>於是我們自然又拿到了一個首殺 &gt;////&lt;！</p>
<blockquote>
<p>我覺得 pA 看起來很像 LCS，但是因為輸入看起來很麻煩所以先放一邊，其他
pBC 都是水題，所以繼續拿了 pEFG 來看。<br> pE 很水，pF
很經典的感覺所以丟給迺絜想，pG 看起來像子集枚舉裸題。<br> 重諺看 pHIJKL
發現 pH 也很水，於是確認了一下想法就在迺絜把模板打完之後上去寫掉ㄌ：</p>
</blockquote>
<h3 id="h---an-astronomers-task">H - An Astronomer's Task</h3>
<div class="note info no-icon"><p>給你兩個座標點 <span class="math inline">\((x_0, y_0)\)</span>、<span
class="math inline">\((x_1,
y_1)\)</span>，輸出他們連線會經過多少座標點。</p>
<p>有 <span class="math inline">\(T\)</span> 組測資。</p>
<ul>
<li><span class="math inline">\(0 \le T \le 100\)</span>。</li>
<li><span class="math inline">\(|x_0|, |y_0|, |x_1|, |y_1| \le
10^9\)</span>。</li>
</ul>
</div>
<p>顯然對 <span class="math inline">\(|x_0 - x_1|\)</span> 跟 <span
class="math inline">\(|y_0 - y_1|\)</span> 做個 <span
class="math inline">\(\text{gcd}\)</span> 就完事了。</p>
<ul>
<li><strong>15 min, pH <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>AC 之後換我寫相對最好寫的 pE：</p>
</blockquote>
<h3 id="e---total-number-of-segments-in-all-permutations">E - Total
Number of Segments in All Permutations</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(n\)</span>，詢問 <span
class="math inline">\(1, 2, \ldots, n\)</span>
的所有排列加起來共有幾個連續遞增區間。</p>
<ul>
<li><span class="math inline">\(1 \le n \le 11\)</span>。</li>
</ul>
</div>
<p>本來以為這是數學題，結果看範圍才發現是暴力題，於是好好的 <span
class="math inline">\(\mathcal{O}(n \times n!)\)</span> 水掉了。</p>
<ul>
<li><strong>19 min, pE <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>賽後才聽說這題有數學解，稍微推了一下發現就只是 <span
class="math inline">\(\frac{(n+1)!}{2}\)</span> OuO。<br>
接著我就繼續寫次好寫的 pC：</p>
</blockquote>
<h3 id="c---spiral-of-numbers">C - Spiral of Numbers</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(N\)</span>、<span
class="math inline">\(M\)</span>，你要在 <span class="math inline">\(N
\times M\)</span> 的表格上從左上角開始逆時針填上 <span
class="math inline">\(0, 1, \ldots, NM-1\)</span> 的數字。<br>
請輸出填完數字的表格。</p>
<ul>
<li><span class="math inline">\(0 \le N, M \le 100\)</span>。</li>
</ul>
</div>
<p>整個學科區賽感覺就出來了（X）。</p>
<ul>
<li><strong>27 min, pE <span
class="score_ac">Correct</span></strong></li>
</ul>
<p>現在才發現當時寫超久 QwQ，也不知道為什麼要寫那麼久。</p>
<blockquote>
<p>迺絜和重諺推出 pF 的做法了，所以換重諺上去刻：</p>
</blockquote>
<h3 id="f---fulcrum">F - Fulcrum</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(a_1, a_2, \ldots,
a_n\)</span>，定義一個 subarray <span class="math inline">\(b_1, b_2,
\ldots, b_m\)</span> 的權重如下：</p>
<p><span class="math display">\[\text{weight}(b) = \sum_{i=1}^{m}{i
\cdot b_i}\]</span> <!-- --></p>
<p>請求出有幾個非空 subarray 的權重 <span class="math inline">\(\le
k\)</span>。</p>
<ul>
<li><span class="math inline">\(1 \le n \le 200\,000\)</span>。</li>
<li><span class="math inline">\(0 \le a_i \le 10^9\)</span>（<span
class="math inline">\(1 \le i \le n\)</span>）。</li>
<li><span class="math inline">\(0 \le k \le 10^{18}\)</span>。</li>
</ul>
</div>
<p>我還不知道要怎麼做 :)，不過因為爆 <code>long long</code> 以及把
<code>i</code> 打成 <code>l</code> 導致吃了兩次 penalty。</p>
<ul>
<li><strong>56 min, pF <span
class="score_na">Wrong-Answer</span></strong></li>
<li><strong>61 min, pF <span
class="score_na">Wrong-Answer</span></strong></li>
<li><strong>71 (+40) min, pF <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>中途重諺 WA 的時候換我上去寫 B：</p>
</blockquote>
<h3 id="b---one-way-traveler">B - One-way Traveler</h3>
<div class="note info no-icon"><p>給一張 functional graph <span
class="math inline">\(G\)</span>（所有點的出度都是 <span
class="math inline">\(1\)</span>），求可以經過最多點的路徑可以經過幾個點。</p>
<ul>
<li><span class="math inline">\(1 \le |V(G)| \le
1\,000\,000\)</span>。</li>
</ul>
</div>
<p>有個顯然的 SCC 縮點作法，不過因為 functional graph
的每個點最終都會落在一個環裡面，所以我就從入度 <span
class="math inline">\(0\)</span> 的點做 DFS
計算最長路徑，剩下的都會是環。</p>
<ul>
<li><strong>70 min, pB <span
class="score_na">Wrong-Answer</span></strong></li>
</ul>
<p>這時我才發現不只有左圖的狀況，還會出現右圖的樣子，我沒有維護每個點可以走到幾個點才會
WA。</p>
<table>
<td>
<img data-src="b-1.png" style="width: 50%; max-width: 300px">
</td>
<td>
<img data-src="b-2.png" style="width: 50%; max-width: 300px">
</td>
</table>
<p>修了一陣子，修好就 AC 了。</p>
<ul>
<li><strong>94 (+20) min, pB <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>中途迺絜上來打 SCC 的模板，所以說其實我可以直接用 SCC
寫掉這題，而且這題跟 pJ 根本一樣：</p>
</blockquote>
<h3 id="j---exhibition">J - Exhibition</h3>
<div class="note info no-icon"><p>給一張帶點權的有向圖 <span
class="math inline">\(G\)</span>，你只可以經過每個點至多一次，請求出點權最大的路徑的值。</p>
<ul>
<li><span class="math inline">\(1 \le |V(G)| \le
200\,000\)</span>。</li>
<li><span class="math inline">\(1 \le |E(G)| \le
200\,000\)</span>。</li>
<li><span class="math inline">\(1 \le a_i \le 10^9\)</span>（<span
class="math inline">\(1 \le i \le |V(G)|\)</span>）。</li>
</ul>
</div>
<p>SCC 縮點 + DAG 最長路裸題，所以重諺就 AC 了。</p>
<ul>
<li><strong>102 min, pJ <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>現在積著可以寫的題目有 pG 子集枚舉、pK 裸分塊、pL 倒水題，於是我想
pAI 要怎麼做、迺絜想 pK 實作細節、重諺寫 pL：</p>
</blockquote>
<h3 id="l---underground-sewer-system">L - Underground Sewer System</h3>
<div class="note info no-icon"><p>給一張 <span class="math inline">\(N \times M\)</span> 的下水道圖（由
<code>x</code>、<code>|</code>、<code>-</code>、<code>+</code>
構成）以及每個位置的高度 <span
class="math inline">\(h_{i,j}\)</span>，水不能流到更高的地方。<br>
詢問你水能不能從 <span class="math inline">\((x_0, y_0)\)</span> 流到
<span class="math inline">\((x_1, y_1)\)</span>。</p>
<ul>
<li><span class="math inline">\(0 \le N, M \le 100\)</span>。</li>
<li><span class="math inline">\(h_{i,j} \in \mathbb{Z}\)</span>（<span
class="math inline">\(0 \le i \le N-1\)</span>、<span
class="math inline">\(0 \le j \le M-1\)</span>）。</li>
<li><span class="math inline">\(0 \le x_0, x_1 \le N-1\)</span>。</li>
<li><span class="math inline">\(0 \le y_0, y_1 \le M-1\)</span>。</li>
</ul>
</div>
<p>輸入有些毒瘤，不過處理完之後就是確確實實的水題。偷偷譴責迺絜說只會倒水，結果遇到倒水題又不寫。</p>
<ul>
<li><strong>115 min, pL <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>換迺絜上去寫 pK：</p>
</blockquote>
<h3 id="k---street-light">K - Street Light</h3>
<div class="note info no-icon"><p>有 <span class="math inline">\(n\)</span> 盞路燈位於 <span
class="math inline">\(x_1, x_2, \ldots, x_n\)</span>，且分別有著 <span
class="math inline">\(a_1, a_2, \ldots, a_n\)</span> 的強度，定義在位置
<span class="math inline">\(p\)</span> 的亮度是</p>
<p><span class="math display">\[\text{luminance}(p) =
\sum_{i=1}^{n}{\left\lfloor\frac{a_i}{|p - x_i| + 1}\right\rfloor}
\notag\]</span> <!-- --></p>
<p>請求出在 <span class="math inline">\(1, 2, \ldots, L\)</span>
裡亮度最低跟最高的值。</p>
<ul>
<li><span class="math inline">\(1 \le n \le 500\)</span>。</li>
<li><span class="math inline">\(1 \le L \le 10^8\)</span>。</li>
<li><span class="math inline">\(1 \le x_1 \le x_2 \le \cdots \le x_n \le
L\)</span>。</li>
<li><span class="math inline">\(1 \le a_i \le 10^8\)</span>（<span
class="math inline">\(1 \le i \le n\)</span>）。</li>
</ul>
</div>
<p>因為一盞路燈的亮度只會有 <span
class="math inline">\(\mathcal{O}(\sqrt{C})\)</span> 種，所以就對那
<span class="math inline">\(\mathcal{O}(\sqrt{C})\)</span>
做區間加值。區間加值可以直接用差分 + <code>map</code> + 前綴和做掉。</p>
<ul>
<li><strong>129 min, pK <span class="score_ac">Correct</span> +
首殺</strong></li>
</ul>
<p>都這個時間了怎麼還有首殺可以拿啊 www。</p>
<blockquote>
<p>突然意識到這場比賽有點太過簡單了，才過 <span
class="math inline">\(\frac{2}{5}\)</span>
的時間卻有三隊只剩下三題。<br> 不過也沒有時間多想了，我就上去寫 pG：</p>
</blockquote>
<h3 id="g---gambling">G - Gambling</h3>
<div class="note info no-icon"><p>給定 <span class="math inline">\(n\)</span>
張牌的權重，其中第一張牌是鬼牌。</p>
<p>在每一輪中都會先洗牌，而你會依序抽牌並統計分數，若你抽到鬼牌可以接著選擇直接結束這輪。</p>
<p>你的總分是 <span
class="math inline">\(\frac{分數之和}{總共抽的卡牌數量}\)</span>，你想知道最佳策略下的期望得分是多少。</p>
<ul>
<li><span class="math inline">\(1 \le n \le 20\)</span>。</li>
<li><span class="math inline">\(0 \le a_i \le
1\,000\,000\)</span>（<span class="math inline">\(1 \le i \le
n\)</span>）。</li>
<li>誤差 <span class="math inline">\(\le 10^{-6}\)</span>。</li>
</ul>
</div>
<p>本來我以為計分方法是 <span
class="math inline">\(\sum{\frac{每輪分數之和}{每輪抽卡數}}\)</span>，所以就直接寫出遇到鬼牌就依據
break 掉會不會更好來判斷，但是在範例二就爛掉了。</p>
<p>重看一遍題目就意識到這個問題了，所以就回到角落重新想作法。</p>
<blockquote>
<p>這時我突然感覺 pA 可以直接給每個點 assign
根到他的字元所組成的字串並直接套 LCS，於是就把做法丟給其他人驗：</p>
</blockquote>
<h3 id="a---largest-common-ghassan-of-two-trees">A - Largest Common
Ghassan of Two Trees</h3>
<div class="note info no-icon"><p>給你兩棵有根樹，每個點上都有 <code>a</code> 到 <code>z</code>
的字母。你可以把兩棵樹都刪掉若干個 subtree
使剩下的部分完全一樣（孩子的順序也要相同），問你樹最大的大小是多少。</p>
<ul>
<li>兩棵樹點樹之和 <span class="math inline">\(\le 150\)</span>。</li>
</ul>
</div>
<p>確定解是好的之後我就開始刻這題，輸入雖然看起來毒瘤但其實卻很好寫，code
也超短 OwO。</p>
<ul>
<li><strong>165 min, pA <span
class="score_ac">Correct</span></strong></li>
</ul>
<p>接著想到 pG
的分數算法跟比例最短路一樣，好像也能套二分搜的做法上去。在算子集出現的頻率時卡了一陣子，不過大部分的
code 都沒有變，所以馬上就寫完了。</p>
<ul>
<li><strong>189 min, pG <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>這時只剩下
pI，打算看看計分板的時候發現封版了？結果又發公告說因為有隊伍已經 <span
class="math inline">\(12\)</span> 題所以要封版？？？<br>
總之這時記分板上只有我們是 <span class="math inline">\(12\)</span>
題。雖然如此，但 ACtame（team105）已經首殺 pI 了，而且我們 penalty
輸慘，感覺第一無望。</p>
</blockquote>
<h3 id="i---isomorphism">I - Isomorphism</h3>
<div class="note info no-icon"><p>給你字串 <span class="math inline">\(s\)</span>、<span
class="math inline">\(t\)</span>，你要求出有幾個 <span
class="math inline">\(s\)</span> 的 substring <span
class="math inline">\(s&#39;\)</span> 可以跟 <span
class="math inline">\(t\)</span> 匹配。</p>
<p>匹配的定義是存在一種雙射的 <span class="math inline">\(f : \Sigma \to
\Sigma\)</span> 使 <span class="math inline">\(s_i&#39; =
f(t_i)\)</span>。</p>
<ul>
<li><span class="math inline">\(1 \le |s| \le 10^7\)</span>。</li>
<li><span class="math inline">\(1 \le |t| \le |s|\)</span>。</li>
<li><span class="math inline">\(\Sigma = \{\texttt{a}, \texttt{b},
\ldots, \texttt{z}\}\)</span>。</li>
</ul>
</div>
<p>在先前看到題目的當下我就想到一種簡化法：紀錄 <span
class="math inline">\(s&#39;\)</span> 跟 <span
class="math inline">\(t\)</span>
內每個字元的出現順序，比對時只要出現順序相同就是能匹配的。當時因為很多細節不會寫所以沒有細想，在把這個方法丟出來之後越來越覺得可行，比對序列可以單純的用
hash，而加入跟刪除字元都可以在 <span
class="math inline">\(\mathcal{O}(|\Sigma|)\)</span>
更新順序以及每個字元對 hash 值的貢獻。</p>
<p>我們三個人一起手忙腳亂的寫
code，迺絜負責整體架構，重諺計算每個字元的貢獻，我更新字元出現的順序。雖然寫的很醜也出很多
bug ，但他至少有在動了！</p>
<ul>
<li><strong>287 min, pI <span
class="score_na">Wrong-Answer</span></strong></li>
</ul>
<p>想說是只對一個數字取模導致撞 hash，所以就加了第二個數字，code
整個變超醜 www。</p>
<ul>
<li><strong>293 min, pI <span
class="score_na">Wrong-Answer</span></strong></li>
</ul>
<p>我想說是不是我的部分寫爛了，準備打算換成 <span
class="math inline">\(\mathcal{O}(|\Sigma| \lg{|\Sigma|})\)</span>
的暴力計算法，不過他們覺得是模的數字太大才爛掉，於是就從 <span
class="math inline">\(10^{15}+7\)</span> 改成 <span
class="math inline">\(10^9+7\)</span> 就過了！</p>
<ul>
<li><strong>297 min, pI <span
class="score_ac">Correct</span></strong></li>
</ul>
<p>我還是不知道為什麼 <span class="math inline">\(10^{15}+7\)</span>
會爛耶 OuO。</p>
<blockquote>
<p>這題 hank 的官解是確定性的，而且複雜度不會帶 <span
class="math inline">\(\mathcal{O}(|\Sigma|)\)</span>。本來所有做出這題的四隊都會被
TLE 掉，可惜時限定的不夠緊。</p>
</blockquote>
<h2 id="總結">總結</h2>
<ul>
<li>Rank: 2 / 13</li>
<li>AC: 13 / 13</li>
<li>Penalty: 1328</li>
</ul>
<p><img data-src="scoreboard.png" width="90%"></p>
<p>以結果論的話，其實不做出 pI 也是第二名，penalty
會小贏第三名兩分鐘。<del>所以其實我們可以隨便傳一筆 pI
然後提早出場給其他人製造壓力。</del></p>
<p>很可惜除了 pA
之外好像沒有什麼在賽場上感覺不錯的題目（比完賽當然又多了一題 pI）。</p>
<p>比賽的狀況我感覺前期開局打得還算不錯，但是中期忽略了要考慮實作難易度的問題，浪費了不少時間。</p>
<p>還有一個重要的問題是我沒有在空閒時間先看範測會不會出事，這次的 pB 跟
pG 其實都是看範測就會抓到 bug 的。</p>
<p>最後一個可能不算問題的是沒有用到記分板，雖然有定期檢查記分板，卻幾乎沒有拿到資訊。別人開的題目我們已經在想了；別人都沒過的題目我們也還是照寫。可能是比賽偏水導致把簡單題開掉之後只剩下沒幾題可以想，希望之後團練可以好好利用記分板。</p>
<p>總之，接下來就是 10/22 的 TOPC 及 ??/?? 的 NCPC 了，加油
&gt;////&lt;！</p>
<p>P.S. 聽說去年跟今年的 Regional
只會算參加一場，所以有沒有可能打到六年呢？</p>
<p>P.P.S. 如果 ACtame 去年有拿到票，今年的 Regional
好像還是可以打，而且好像可以再拿一張票（但不能用），是不是代表只要
ACtame 夠強交大第二名就有機會坐享其成？</p>
<p>P.P.P.S. 好擔心 NCPC 的獎金ㄛ，現在是幾乎保底 20k 啦，不過想要拿 50k
甚至是 100k 就得要加緊練習啊 &gt;w&lt;！</p>
]]></content>
      <categories>
        <category>競程</category>
        <category>比賽心得</category>
        <category>遊記</category>
      </categories>
      <tags>
        <tag>ICPC</tag>
      </tags>
  </entry>
  <entry>
    <title>2022.11.30 -- 2022.12.17</title>
    <url>/cp/diaries/2022-12-17/</url>
    <content><![CDATA[<p>感覺上應該要來定期寫篇日記或周記來記錄自己到底都在幹嘛，不然可能耍個廢就一兩週過去了
QQ</p>
<p>目標是 World Final 冠軍，先將明年最可能是第一場重要比賽的時間
2023.10.07（六）當作 Day 0 來努力吧！</p>
<span id="more"></span>
<h3 id="重要時間">重要時間</h3>
<p>先來說一下接下來的重要時間點們：</p>
<ol type="1">
<li>九月初的 NYCU 校內賽</li>
<li>十月初的 NCPC</li>
<li>十月中的 TOPC</li>
<li>十一月的 Taoyuan Site</li>
<li>其他國外 Site (?)</li>
<li>World Final</li>
</ol>
<p>聽說好像明年桃園站會提早到十月，不過那樣比賽勢必會變得非常緊湊，就仍然先以今年
NCPC 的時間往前一個禮拜來當作第一戰的時間了。</p>
<p>除了這些當然也還有其他目標，像是 CF 2800+、進 GCJ 跟 FHC
決賽、為各大比賽出題、擔任營隊講師等等，不過那些就等到時候再開一個「目標」的欄位好了。</p>
<h3 id="出國比賽">出國比賽</h3>
<p>對於「可能可以出國比賽」這點，一直是抱著喜憂參半的心態。</p>
<p>喜的部分當然就是能夠到以比賽的名義出國，這也一直是我的夢想，可惜的是四年的
COVID-19 已經讓我錯失了太多東西。</p>
<p>憂的部分則是桃園賽區的晉級名額可能會變得只有一隊，要能夠將國內外的天才們斬於馬下才有可能得到最終戰的門票。</p>
<h3 id="day--311----2022.11.30">Day -311 -- 2022.11.30</h3>
<p>跟隊友們討論了今後的<a
href="https://hackmd.io/@NYCU-Yamada/main">練習方針</a>，主要就是藉著
8BQube 的模版來學習各式主題並互相教學。</p>
<h3 id="day--308----2022.12.03">Day -308 -- 2022.12.03</h3>
<p>去台北為奶奶慶生，之後前往花蓮參加東華盃。</p>
<p>在九月到交大之後，這還是第一次回花蓮呢～</p>
<h3 id="day--307----2022.12.04-2022-ndhu">Day -307 -- 2022.12.04 (2022
NDHU)</h3>
<p>比賽結果不錯，順利拿下第一名並獲得 <span
class="math inline">\(\frac{15\,000}{2}\)</span> NTD
的獎金，但是狀態完全不理想。</p>
<ul>
<li><a
href="https://hackmd.io/@NYCU-Yamada/team-20221204">團練紀錄</a></li>
<li><a
href="https://sorahisa.github.io/cp/contests/ndhu22/">遊記</a></li>
</ul>
<h3 id="day--304----2022.12.07-2023-eurasia">Day -304 -- 2022.12.07
(2023 Eurasia)</h3>
<p>恰好在禮拜三的晚上 Codeforces 有一場 ICPC
Mirror，於是就問隊友要不要一起來打，就有了這場團練。</p>
<ul>
<li><a
href="https://hackmd.io/@NYCU-Yamada/team-20221207">團練紀錄</a></li>
</ul>
<h3 id="day--301----2022.12.10-2022-nhspc-sim">Day -301 -- 2022.12.10
(2022 NHSPC sim)</h3>
<p>2022 全國模擬賽，出題、觀賽心得還沒寫。</p>
<h3 id="day--300----2022.12.11-2022-oii">Day -300 -- 2022.12.11 (2022
OII)</h3>
<p>vir 了今年的義大利 OI，心得還沒寫。</p>
<h3 id="day--297----2022.12.14-2023-ois-round-2">Day -297 -- 2022.12.14
(2023 OIS Round 2)</h3>
<p>跟 ub33 PK 了 2023 OIS Round 2，成功在剩下 80
分鐘的時候僅剩一題樹剖，並花了 40 分鐘把它解決掉成功 AK。</p>
<p>這一場的 AK 也讓我以 790 + 900
的分數來到場外總排名第二名，第一名是兩場都 AK 的電神。</p>
<p>在比賽中我遇到了一題還不錯的題目：</p>
<div class="note info no-icon"><p>請計算有幾個 array <span
class="math inline">\(\{a_i\}_{i=1}^{N}\)</span> 使得對所有 <span
class="math inline">\(i\)</span> 都有 <span class="math inline">\(L \le
a_i \le R\)</span> 且 <span
class="math inline">\(\sum\limits_{i=1}^{N}{a_i} \equiv K
\pmod{M}\)</span>，並輸出答案模 <span class="math inline">\(10^9 +
7\)</span> 的結果。</p>
<ul>
<li><span class="math inline">\(1 \le N \le 10^{18}\)</span>。</li>
<li><span class="math inline">\(1 \le M \le 1000\)</span>。</li>
<li><span class="math inline">\(1 \le L \le R \le 2 \cdot
10^9\)</span>。</li>
<li><span class="math inline">\(0 \le K &lt; M\)</span>。</li>
</ul>
</div>
<p>很容易就能想到一個 <span class="math inline">\(\mathcal{O}(N
M^2)\)</span> 的 DP 做法：維護 <span class="math inline">\(i\)</span>
個數字時模 <span class="math inline">\(M\)</span> 餘 <span
class="math inline">\(j\)</span> 的方法數。</p>
<p>可以發現到只要有 <span class="math inline">\(i_1\)</span> 跟 <span
class="math inline">\(i_2\)</span> 個數字的 DP 表格就可以在 <span
class="math inline">\(\mathcal{O}(M^2)\)</span> 時間內推出 <span
class="math inline">\(i_1 + i_2\)</span> 個數字的 DP
表格，於是可以套用快速冪來解決這個問題，變成 <span
class="math inline">\(\mathcal{O}(M^2 \lg{N})\)</span>。</p>
<p>配上 FFT 或是如果模數改一改配上 NTT 甚至可以加速到 <span
class="math inline">\(\mathcal{O}(M \lg{M} \lg{N})\)</span>。</p>
<p>這好像又被稱為「<span class="math inline">\(\times 2, + 1\)</span>
trick」。</p>
<h3 id="個人實力">個人實力</h3>
<p>在看到 World Final 的時候 edisonhello 直接被
KOvid-19，我也很擔心在未來的這一年之間會不會有各種意外而導致隊友無心練習或是無法參加比賽。</p>
<p>雖然 ICPC
是團隊競賽，但是實際上打起來的感覺更像是三個人各自解自己擅長的題目，再將其拼湊起來。在這種分工明確的隊伍下，若突然有人燒雞那後果想必是相當慘重的。</p>
<p>看著 polarischiba
單刷桃園站並拿下了金牌、看著他過往幾年的經歷，我突然意識到團體配合並不是我想要發展的方向。以我現在的實力根本只會拖他們的後腿而已。</p>
<h3 id="世界盃">世界盃</h3>
<p>最近正好是四年一度的世界盃，而世界盃算是我這個完全不想運動的人唯一會追著看的運動比賽了吧。在為日本隊加油的同時，我也去看了「藍色監獄」的動畫跟漫畫，而其中便有著一些感觸著我的台詞（之後再補）：</p>
<ul>
<li>唯有全力奮戰的人，「運氣」才會始終平等地垂青他們。</li>
</ul>
<h3 id="day--296----2022.12.15">Day -296 -- 2022.12.15</h3>
<p>這是下定決心要開始寫差不多是周記的咚咚來記錄練習狀態的日子，之後應該幾乎每天都會花幾分鐘在本機寫點紀錄。</p>
<p>每周四早上 8:00 我都要騎腳踏車到高爾夫球場上體育課，車程大約是 15
分鐘，但因為是上班時段所以會大塞車。高爾夫球課基本上就是一直不斷練習揮七號桿，老師會來回巡視並修正每個人的動作，不過一個多小時裡面大概也只會被關切到一兩次而已。</p>
<p>高爾夫球課的時間變成為了我的「冥想」時間，我會不斷開 AtCoder
的黃題並思考大約 20
分鐘，大約有一半的題目會想的出做法，而另一半就暫時一直累積在清單裡面
QQ</p>
<p>想出來的題目暫時都完全沒有去補，希望能夠在 2022.12.25
以前把那些題目補起來。</p>
<h3 id="day--295----2022.12.16">Day -295 -- 2022.12.16</h3>
<p>雖然兩周前才見過爸媽，也有來到花蓮，但是那次只是來打比賽的，並沒有回家抱抱可愛的拉菲。</p>
<p>再加上現在天氣真的爆幹冷，再不回家換長袖長褲跟發熱衣我就要被凍死了。</p>
<p>晚上直到 5:30 才穿著雨衣拖著行李從宿舍往清大門口走去，好像走了 40
多分鐘嗎？感覺不走清交小徑會更快到。本來打算是 4:30 坐上客運，最後應該是
6:15 左右上了客運。</p>
<p>路上也是大塞車，客運開了兩個小時是我看過最久的一次，導致我又把訂好的車票給退了，最後只能搭
22:00 - 24:22 再麻煩爸爸來接了 QQ</p>
<p>在台北車站發生了一件慘劇：提行李箱的那個握把在要上樓梯的時候爆開了，看起來是修不好了嗎？</p>
<p>晚餐吃的是太陽番茄（拉）麵，因為前陣子聊天講到而問了位置發現意外的近就決定來吃了。雖然不錯吃但完全不像拉麵，下次點雞骨白湯試試好了。</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="2021217-ramen-1.jpg" /></div><div class="group-picture-column"><img data-src="2021217-ramen-2.jpg" /></div><div class="group-picture-column"><img data-src="2021217-ramen-3.jpg" /></div></div><div class="group-picture-row"><div class="group-picture-column"><img data-src="2021217-ramen-4.jpg" /></div><div class="group-picture-column"><img data-src="2021217-ramen-5.jpg" /></div></div></div>
<p>晚上回家幫拉菲跟四糸乃洗了澡，就一起睡覺覺ㄌ &gt;////&lt;</p>
<h3 id="day--294----2022.12.17-2022-nhspc">Day -294 -- 2022.12.17 (2022
NHSPC)</h3>
<p>今天是全國賽的日子，雖然很想到現場看但是再不回家換衣服我就要死ㄌ
OAO</p>
<p>今年跟之前的感覺都不一樣，以往都是最後一個小時最刺激，今天是前三小時一堆
event，後面反而比較無聊。就把紀錄直接放這裡好了～</p>
<ul>
<li><a
href="https://sorahisa-rank.github.io/nhspc-fin/2022/problems.pdf">題本</a></li>
<li><a
href="https://sorahisa-rank.github.io/nhspc-fin/2022/ranking/">記分板</a></li>
</ul>
<p>Timestamp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[general]       0:04:00 恆毅中學 李昶毅 首 submit</span><br><span class="line">[general]       0:07:41 建國中學 陳柏凱 首 100 分</span><br><span class="line">[general]       0:16:38 恆毅中學 李昶毅 首 partial</span><br><span class="line">[general]       0:18:46 建國中學 陳柏凱 首 200 分</span><br><span class="line">[general]       0:30:28 建國中學 陳柏凱 首 300 分</span><br><span class="line">[general]       1:00:00     336 / 300 (*4) / 200 (*15)</span><br><span class="line">[general]       1:22:21 建國中學 陳柏凱 首在兩題拿 partial</span><br><span class="line">[general]       1:32:06 台南一中 王　淇 首 400 分</span><br><span class="line">[general]       1:44:02     min 0 =&gt; 29</span><br><span class="line">[general]       2:00:00     404 / 400 (*2) / 300+ (*8) / 300 (*12)</span><br><span class="line">[general]       2:28:32     min 29 =&gt; 100</span><br><span class="line">[general]       2:33:17 台南一中 王　淇 首 500 分 (536)</span><br><span class="line">[general]       2:46:33 建國中學 張秉中 首在三題拿 partial</span><br><span class="line">[general]       2:58:24 台南一中 王　淇 首 600 分 (636)</span><br><span class="line">[general]       3:00:00     636 / 477 / 436 (*3) / 400=+ (*6) / 300+ (*10) / 300 (*8)</span><br><span class="line">[general]       3:00:00     AC 人數 0 / 0 / 37 / 8 / 46 / 5 / 2 / 0 / 30</span><br><span class="line">[general]       3:15:00 高雄中學 吳威錡 首在四題拿 partial</span><br><span class="line">[general]       3:41:40 台南一中 王　淇 首在所有題有 submission</span><br><span class="line">[general]       3:53:11 建國中學 張秉中 首 partial 總和 &gt;= 100</span><br><span class="line">[general]       3:59:36     min 100 =&gt; 106</span><br><span class="line">[general]       4:00:00     640 / 598 / 511 / 508 / 504 / 440=+ (*5) / 350=+ (*10)</span><br><span class="line">[general]       4:00:00     AC 人數 0 / 0 / 39 / 14 / 46 / 6 / 3 / 0 / 31</span><br><span class="line">[general]       4:03:35 台南一中 王　淇 首 650 分 (671)</span><br><span class="line">[general]       4:03:35 台南一中 王　淇 達成所有人聯集</span><br><span class="line">[general]       4:29:50 建國中學 張庭瑋 達成所有人聯集</span><br><span class="line">[general]       4:59:11 建國中學 陳柏凱 達成所有人聯集</span><br><span class="line">[general]       5:02:00     671 (*3) / 504-591 (*7) / 415-477 (*10) / 309-400 (*10)</span><br><span class="line">[general]       5:02:00     AC 人數 0 / 0 / 41 / 22 / 46 / 6 / 6 / 0 / 34</span><br><span class="line"></span><br><span class="line">[base]          0:35:58 板橋高中 林加樂 首 submit</span><br><span class="line"></span><br><span class="line">[bicycle]       0:06:58 中和高中 周昀軒 首 submit</span><br><span class="line">[bicycle]       0:41:05 建國中學 陳柏凱 首得分 &gt;= 36</span><br><span class="line">[bicycle]       0:42:03 師大附中 張亦頡 二得分 &gt;= 36</span><br><span class="line">[bicycle]       1:19:28 師大附中 鄭宇宏 三得分 &gt;= 36</span><br><span class="line"></span><br><span class="line">[card]          0:07:41 建國中學 陳柏凱 首殺</span><br><span class="line">[card]          0:12:15 成功高中 周宜勳 二殺</span><br><span class="line">[card]          0:13:52 台中一中 龔德恩 三殺</span><br><span class="line"></span><br><span class="line">[editor]        0:29:13 台南一中 王　淇 首 submit</span><br><span class="line">[editor]        1:08:58 建國中學 張秉中 首殺</span><br><span class="line">[editor]        1:22:21 科園實中 曹允碩 二殺</span><br><span class="line">[editor]        1:32:06 台南一中 王　淇 三殺</span><br><span class="line"></span><br><span class="line">[gears]         0:12:50 建國中學 張庭瑋 首殺</span><br><span class="line">[gears]         0:15:42 台中一中 劉以翔 二殺</span><br><span class="line">[gears]         0:18:46 建國中學 陳柏凱 三殺</span><br><span class="line">[gears]         2:49:43 板橋高中 林加樂 尾殺</span><br><span class="line"></span><br><span class="line">[scratchcard]   0:42:44 台中一中 張皓凱 首 submit</span><br><span class="line">[scratchcard]   1:14:24 恆毅中學 李昶毅 首得分 &gt;= 6</span><br><span class="line">[scratchcard]   1:22:21 建國中學 陳柏凱 首得分 &gt;= 37</span><br><span class="line">[scratchcard]   1:25:16 建國中學 張庭瑋 首殺</span><br><span class="line">[scratchcard]   1:55:38 台南一中 高嘉泓 二殺</span><br><span class="line">[scratchcard]   2:03:37 建國中學 陳柏凱 三殺</span><br><span class="line"></span><br><span class="line">[tree]          1:24:05 台南一中 郭育愷 首得分 &gt;= 27</span><br><span class="line">[tree]          2:32:45 康橋高中 江承為 首殺</span><br><span class="line">[tree]          2:58:24 台南一中 王　淇 二殺</span><br><span class="line">[tree]          3:12:02 科園實中 曹允碩 三殺</span><br><span class="line"></span><br><span class="line">[ussr]          0:35:16 高雄中學 郭久銘 首得分 &gt;= 4</span><br><span class="line">[ussr]          2:05:28 台南一中 郭育愷 首得分 &gt;= 35</span><br><span class="line">[ussr]          2:09:10 台中一中 彭詳睿 二得分 &gt;= 35</span><br><span class="line">[ussr]          2:50:11 台中一中 劉以翔 三得分 &gt;= 35</span><br><span class="line"></span><br><span class="line">[xmas]          0:18:46 復旦高中 賴宇弘 首得分 &gt;= 32</span><br><span class="line">[xmas]          0:30:26 台中一中 龔德恩 首殺</span><br><span class="line">[xmas]          0:30:28 建國中學 陳柏凱 二殺</span><br><span class="line">[xmas]          0:40:43 武陵高中 蕭凱鴻 三殺</span><br></pre></td></tr></table></figure>
<p>各 Subtask 得分人數</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base:         4  (0) / 20  (0) / 11  (0) / 32  (0) / 33  (0)</span><br><span class="line">bicycle:     15 (32) / 16 (20) /  5 (16) / 64  (0)</span><br><span class="line">card:        29 (43) / 71 (41)</span><br><span class="line">editor:       1 (25) /  4 (24) / 19 (24) / 76 (22)</span><br><span class="line">gears:       20 (46) / 80 (46)</span><br><span class="line">scratchcard:  6 (26) / 31 (12) / 63  (6)</span><br><span class="line">tree:        24 (10) / 27 (13) / 49  (6)</span><br><span class="line">ussr:         4 (28) / 31 (11) / 38  (0) / 27  (0)</span><br><span class="line">xmas:         5 (40) / 27 (39) / 68 (34)</span><br></pre></td></tr></table></figure>
<p>今年認識的人明顯少了許多，但多虧了 IONCamp
還是有認識一些人才不至於完全沒看頭。但是好像也寫不出什麼觀戰心得，所以就先放一邊ㄅ。</p>
<p>比賽完之後每題大約花兩三分鐘思考一遍，感想如下：</p>
<ul>
<li><code>base</code>：這題看得比較久，聽說是論文題但題目好像有問題，按照評分規則來看什麼事都不做應該要拿到滿分但實際上並不會。</li>
<li><code>bicycle</code>：目前只會 36 分 <span
class="math inline">\(\mathcal{O}(nm)\)</span> DP。</li>
<li><code>card</code>：輕鬆 AC 的水題。</li>
<li><code>editor</code>：目前只會 24 分暴力 +
greedy，還不確定是不是好的。</li>
<li><code>gears</code>：輕鬆 AC 的水題。</li>
<li><code>scratchcard</code>：看起來像是枚舉 5
種答案做三維偏序，但是我不會三圍偏序所以精神只有二維偏序的 37 分。</li>
<li><code>tree</code>：輕鬆 AC 的水題，但是對沒有學過 <span
class="math inline">\(\text{Prüfer Code}\)</span> 特殊性質「<span
class="math inline">\(\text{cnt}_i = \text{deg}_i -
1\)</span>」的人並不容易。</li>
<li><code>ussr</code>：構造 <span class="math inline">\(n\)</span>
個點的 <span class="math inline">\(k\)</span>-regular
平面圖，好像也是論文題。只會做 <span class="math inline">\(k \le
3\)</span> 的 35 分。</li>
<li><code>xmas</code>：調和級數水題，也是輕鬆
AC。今年好像看到了很多調和的題目耶～</li>
</ul>
<p>總共精神分數是 <span class="math inline">\([508, 532]\)</span>
穩二等線，分數取決於 greedy 是不是好的。</p>
<p>晚上打算一邊打 <a
href="https://codeforces.com/contest/1774">Codeforces Polynomial Round
2022</a> 一邊看世足季軍戰，2023 之前只剩下最後兩場 rated
比賽了，希望可以順利上紅！</p>
]]></content>
      <categories>
        <category>競程</category>
        <category>日記</category>
      </categories>
      <tags>
        <tag>unknown</tag>
      </tags>
  </entry>
  <entry>
    <title>2022.12.18 -- 2022.12.24</title>
    <url>/cp/diaries/2022-12-24/</url>
    <content><![CDATA[<p>第二篇周記，categories
寫日記只是為了避免之後<del>這系列變成月記或是季記</del>還有寫日記不想分成很多類。</p>
<span id="more"></span>
<h3 id="day--293----2022.12.18-cf-1774">Day -293 -- 2022.12.18 (CF
1774)</h3>
<p>昨天晚上的比賽大掉分了，但在得知自己 FST 的時候並沒有什麼心情變化。
特別值得一提的題目是 <a
href="https://codeforces.com/contest/1774/problem/E">1774E. Two Chess
Pieces</a>：</p>
<div class="note info no-icon"><p>給定一棵樹，一開始有兩個棋子位在點 <span
class="math inline">\(1\)</span>，兩個棋子分別有可以以任意順序拜訪的點們：<span
class="math inline">\(a_1, a_2, \ldots, a_{m_1}\)</span> 以及 <span
class="math inline">\(b_1, b_2, \ldots,
b_{m_2}\)</span>，並且最後兩個棋子必須都回到點 <span
class="math inline">\(1\)</span>。</p>
<p>你每一次操作可以將一個棋子移動一步，你需要保持兩個棋子的距離不超過
<span class="math inline">\(d\)</span>，請問最少的移動步數是多少？</p>
<ul>
<li><span class="math inline">\(2 \le n \le 200\,000\)</span>。</li>
<li><span class="math inline">\(2 \le d \le n\)</span>。</li>
<li><span class="math inline">\(1 \le m_1, m_2 \le n\)</span>。</li>
</ul>
</div>
<p><a
href="https://codeforces.com/contest/1774/submission/185746082">我的做法</a>比較暴力而且是
<span class="math inline">\(\mathcal{O}(n\lg{n})\)</span>
的，因為有學弟來問所以就整理一下：</p>
<ol type="1">
<li>將所有點重新用 DFS 順序編號，重編號時會一併維護一個點的父親
<code>par[v]</code>、子樹的最小最大編號
<code>mn[v]</code>、<code>mx[v]</code>、深度
<code>par[v]</code>，並且會把每個點的 adjacency list 排序過。</li>
<li>用一個 deque 來記錄兩個點之間的路徑。</li>
<li>每次看哪個棋子的目標編號比較小就讓他往目標走過去。
<ul>
<li>如果 <code>mn[v] &lt;= goal &amp;&amp; goal &lt;= mx[v]</code>
就代表在子樹裡，因為 adj. list 排序過所以可以使用
<code>prev(upper_bound(ALL(adj[v]), x))</code>
得到要往哪個小孩走；反之就代表目標要往 <code>par[v]</code> 走。</li>
<li>這邊需要額外處理的是「往回走」的情形（不是往 <code>par[v]</code>
走），可以透過判斷要加進去的位置跟 deque
裡面的正數或倒數第二個位置來判斷。</li>
</ul></li>
<li>在走的時候如果 deque 裡面有 <span class="math inline">\(&gt;
d+1\)</span> 個點就代表距離 <span class="math inline">\(&gt;
d\)</span>，這時就會把另一端的點 pop 出來。</li>
<li>最後因為要讓兩個點都移回根，需要再將答案加上兩個點的深度。</li>
</ol>
<p>在做完之後看了題解發現他寫的超級精簡，需要用到以下觀察。</p>
<div class="note success"><p>某一個棋子在 <span class="math inline">\(v\)</span>
的時候另一個棋子一定在 <span
class="math inline">\(\texttt{par}^d[v]\)</span> 的子樹裡面。</p>
</div>
<p>也就是代表另一個棋子會經過 <span
class="math inline">\(\texttt{par}^d[v]\)</span>，所以可以直接把所有的
<span class="math inline">\(\texttt{par}^d[a_i]\)</span> 加進 <span
class="math inline">\(b\)</span> 裡面；以及把所有的 <span
class="math inline">\(\texttt{par}^d[b_i]\)</span> 加進 <span
class="math inline">\(a\)</span> 裡面。</p>
<p>加完之後兩個棋子就完全可以分開來了！變得可以在 <span
class="math inline">\(\mathcal{O}(n)\)</span>
時間做完，而且超級好寫。用我之前的做法來看的話會發現他們的距離永遠會保持在
<span class="math inline">\(d\)</span> 以內。</p>
<hr />
<p>中午吃了弘爺當早午餐（好久沒吃ㄌ），稍微休息了一會兒就去收拾行李帶著飲料準備去坐火車了。希望五件發熱衣可以幫助我撐過這個冬天
OwO</p>
<p>晚上去西門吃晚餐，本來想吃沒吃過的拉麵，但發現手機快沒電了到時候一定會迷路就放棄了，鳥人在
18 號吃感覺就很虧 (?)，花月嵐排超多人，最後就決定吃 Coco ㄌ。掃 QRCode
點餐的時候手機只剩下 1% 電，還好來得及耶～</p>
<p>吃完後去雜誌瘋買了 Blue Lock 跟菜鳥煉金術師，再來本想去 animate
但是剛好遇到物品盤點 (?)
所以提前兩小時關門，改去虎之穴發現帶著飲料不讓進去只好先在外面喝完上廁所丟掉。想去買運彩壓阿根廷
2 : 1 法國又因為手機沒電不知道怎麼用又放棄了（還好沒買哈哈）。</p>
<p>回到宿舍的時候大約是 11:15 左右，發現 118
的同學在看世足於是就放棄先把行李抬上樓的想法去追完整場決賽。</p>
<p>本來以為上半場 2 : 0 法國要下去了，結果下半場 Mbappe 又上演驚天地的
90 秒進兩球追平。到了延長賽本以為會維持 2 : 2 進到 PK，卻看到在 E.T.
下半場阿根廷進了一球之後在禁區內手球被 Mbappe
追平。最後是法國十二碼全部都踢左邊被守爆才輸的（不過 Mbappe
三次踢左邊都進了），感覺完全是他在被隊友雷嘛 OwO</p>
<p>最後是直接在 118
睡了一個晚上，早上起床把行李搬到四樓才意識到沒有準備日文小考，燒雞
QQ</p>
<h3 id="day--292----2022.12.19-at-custom-lockout">Day -292 -- 2022.12.19
(AT Custom Lockout)</h3>
<p>早上上完日文課之後跟 ub33 ㄘ午餐順便討論了一些 PCCACamp
要做的事情，我覺得去年的時間實在是太趕了，甚至到了比賽當天還在改、換題目。</p>
<p>上禮拜 2023 OIS Round 2
那場我說要樹剖的題目完全是我在吃毒，我把題目轉化成強制在線的<b>「單點加值、詢問點到根的權值和」</b>之後就直接
claim
他只能樹剖，但其實可以再變成<b>「子樹加值、詢問點權」</b>就一樣也只要一棵
BIT，複雜度還少個 <span class="math inline">\(\log\)</span>。</p>
<p>下午則是去 ub33 宿舍玩 (X) 思考比賽要出什麼咚咚
(O)，結果想出了一些我完全不會做的 idea，不知道最後能不能用上。</p>
<p>吃完晚餐後回宿舍打掃了一會兒書桌就開了一場 <a
href="https://kenkoooo.com/atcoder#/contest/show/b2e101f8-a594-4a82-9363-25c67b3b7eef">AtCoder
Lockout</a>，取了 ABC 裡面難度 18xx 到 23xx
的題目各一題來打兩小時，最後是寫掉了 18xx、20xx、21xx
的三題順利拿下分數，ub33 因為燒雞在 23xx 的題目（AC x 50 + WA x
1，超慘）導致最後掛蛋。</p>
<p>其中有一題看起來很幾何的題目我記得之前有看過，而這次終於把他做出來了！</p>
<div class="note info no-icon"><p>平面上有 <span class="math inline">\(y = 100\)</span> 跟 <span
class="math inline">\(y = -100\)</span>
兩條邊界線，以及一堆大小可以忽略的點 <span class="math inline">\(\{(x_i,
y_i)\}_{i=1}^{N}\)</span>。你要從 <span class="math inline">\((-10^9,
0)\)</span> 推一個圓盤到 <span class="math inline">\((10^9,
0)\)</span>，並且你不能穿過邊界線跟那些點，請問圓盤的最大半徑可以是多少？</p>
<ul>
<li><span class="math inline">\(1 \le N \le 100\)</span>。</li>
<li><span class="math inline">\(|x_i|, |y_i| &lt; 100\)</span>（<span
class="math inline">\(1 \le i \le N\)</span>）。</li>
</ul>
</div>
<p>一開始的想法是二分搜半徑 <span
class="math inline">\(r\)</span>，並讓邊界線跟每個點都往外長 <span
class="math inline">\(r\)</span>，再去計算聯集出來的形狀能不能會不會完全蓋住。這時仍一度以為是噁心的幾何題，直到在紙上畫了幾個圓才發現一個重要性質：上下連通
<span class="math inline">\(\implies\)</span> 左右不連通，可以用 DSU
做判斷。</p>
<p>而二分搜也可以被壓掉，實際上答案只會是某兩個點或是線之間的距離，所以就把那些距離都蒐集起來從小做到大就可以了！</p>
<p>打完之後看了沒做出來的題目題解，發現我完全沒想法的字串根本就是大水題，接下來就到處亂逛，去看了
<a
href="https://5a0401.notion.site/5a0401/0-5A-Blog-d926ced62f84473e82f1feddb8df788e">0+5a
的 blog</a>，又意識到應該回來做事才對，就開始寫這篇記錄ㄌ。</p>
<h3 id="day--291----2022.12.20">Day -291 -- 2022.12.20</h3>
<h3 id="day--290----2022.12.21">Day -290 -- 2022.12.21</h3>
<h3 id="day--289----2022.12.22">Day -289 -- 2022.12.22</h3>
<p>本來打算要通霄弄完 SA
作業，但是直到凌晨兩點多我突然意識到今天是禮拜四，有早八體育課要上，就計畫著先睡到
6:30 再說。</p>
<p>不過顯然，我太懶了，根本不會只睡四小時在這麼冷的天氣爬起來，甚至睡到了
8:20 才下床。</p>
<p>趕緊洗漱完，騎著 Youbike 2.0 就往高爾夫球場去。但是意外就在短短的 20
分鐘之後來臨：金山寺站的 2.0
被禁用了不能停！懷著「放棄了吧」的想法，我繼續騎著車按照地圖上最近的 2.0
站的方向前行，又花了 20 分鐘的時間。因為那邊也沒有 1.0
的車了，當我走回到高爾夫球場的時候已經是 9:58
了，只好直接搭紅巴回學校。</p>
<p>[此處應有圖片]</p>
<p>不知道為什麼今天的紅巴是紫色的，途中有好多人都在問到底是哪一班，但是司機好像不知道他開的是紫色的
(?)</p>
<p>回到宿舍之後繼續寫 SA
作業，上次的進度是把虛擬機搞爛了連不到網路，經過了一個半小時的搶修，終究還是連不到網路，看來在下次作業之前要全部重做ㄌ。</p>
<p>在回顧上一次的作戰紀錄的時候意外發現其實 HW3 有交出一個 20 分的
submission，但是被後來的 submission 蓋掉了所以沒拿到分數 QQ</p>
<p>下午一點多去一餐吃炒泡麵，吃完大約兩點半就直接回宿舍睡覺，睡醒後已經是六點了，遂前往女二餐吃自助餐。久違的遇到了高中同學王さん，發現他最近也過的不太順利
._.</p>
<p>晚上耍個廢之後就去玩 Terraria 了。</p>
<h3 id="day--288----2022.12.23">Day -288 -- 2022.12.23</h3>
<p>玩到大約凌晨兩點之後就去 Youtube 找直播來聽。</p>
<p>來推一個可愛ㄉ VTuber <a
href="https://www.youtube.com/@UTANOch">白玖ウタノ</a>～從初配信之前意外滑到發現翻唱
ANIMA
很好聽就訂閱了，之後連開了幾次雜談跟歌回都碰巧有跟到，短短兩周的時間訂閱數已經從
1k 增長到 11k 了！</p>
<p>因為 ISSC 要我用 Word 給題目，但我只會用 Markdown 跟
LaTeX，於是為了研究怎麼裝字體，還有為了各種麻煩的排版問題弄了超級久。</p>
<p>感覺 LaTeX 跟 Word 對於初見都非常不友好，Markdown
相比之下實在好太多了。但 LaTeX
的模板給出來之後就很容易直接在上面做事，而 Word
就算有模板也很容易不小心動到；再來就是 google
到資訊的多寡差距太大了（也可能是我對 Word 相關論壇不瞭解），想知道 LaTeX
怎麼設定只要把指令打出來通常就能在 <a
href="https://tex.stackexchange.com">LaTeX 的 Stack Overflow</a>
上找到，但是想找到 Word
的用法爬文爬了幾個小時還是只找到文不對題的東西。</p>
<p>上午七點半點決定要去睡覺，直到下午一點半醒來之後去吃新竹美食，吃完則繼續排版工作。</p>
<p>即將到聖誕節了，今天划手機幾乎都是跟聖誕節有關的貼文。因為感興趣就稍微查了一下
12 Days of Christmas 是哪些天，得到的結果是聖誕節 12.25 到隔年的主顯節
(Epiphany) 前一天 01.05 這 12 天。</p>
<p>反正這學期基本上是都炸了，不如就想想 12.25 到 01.05 要怎麼度過這「12
Days of Christmas」吧！第一個想法是每天 virtual 一場 OI 或
ICPC，但是段考畢竟還是要考，於是計畫暫時變成「前五天打 CF / AT、後七天打
JOISC + 三場咚咚」的感覺，希望有辦法做到 OwO</p>
<p>突然想到二手版上有人在徵機率作業教學，我才意識到好像又要有作業了。一陣子沒開
E3 了，發現 25 號下午要寫完機率 HW4，而 HW3
已經不知不覺間過去了。比起每次看著作業 deadline
一個接一個的從身邊飛過去，直接忽略他好像比較不會有罪惡感耶。</p>
<p>下禮拜包含體育有 6
科段考分別在一二三四四四，我要讀哪幾科才不會被二一啊。</p>
<p>直到晚上八點半終於把版排完了！到時候在出題心得那邊再把題目丟出來吧～套一個冰箱梗：</p>
<blockquote>
<p>我每次望向題本，不是希望我學到的新功能可以利用在題本上，而是希望我對成品的期待降低到我可以把現在這份交差了事。</p>
</blockquote>
<p>明天早上還要趕去台中開會，其實我到現在都不知道出這個到底能不能賺錢，又或是能賺多少錢。說到賺錢，我覺得夠好的題目（像是
IOI Seats、Aliens 等等）應該有 20k+
的價值，因為在上面花的心力絕對不只有一個人的一兩百個小時；而一般的難題大約是
4k、中等題 2.5k、簡單題 1.5k
吧。當然這是指出題人認真想題目生題目的狀況，如果是隨便從別的地方偷題，或是官解寫爛、亂生測資、題意不清等等問題那麼該題的價值就會不斷下降……</p>
<p>說實話這幾年 ISSC
的題目讓我很驚訝，明明感覺上這是高中生一年中的大比賽之一，題目品質卻每況愈下。從
2019 年還有考察各種算法，到 2020 跟 2021
的時候題目各種卻出包、感覺幾乎變成手速大賽，今年的題目更是只能用黑人問號來形容。理論上如果有錢可賺一定會有許多有打比賽的人願意出題的吧？</p>
<p>順帶一題，Codeforces 一年一度的 magic 又可以使用了，目前我是偽裝成
International Master 的顏色 --- 橘色。沒錯，我從橘色變成橘色了 (?)</p>
<p>[此處應有圖片]</p>
<h3 id="day--287----2022.12.24-2022-issc">Day -287 -- 2022.12.24 (2022
ISSC)</h3>
<p>今年當上了 ISSC 工人才意識到這個比賽是多麼落後 QQ</p>
<ul>
<li>11:00</li>
</ul>
<p>本來是 11:00 要開評審會議，但是因為拉肚子導致出發時間更晚，直到 11:50
左右才抵達 ST039。</p>
<ul>
<li>11:45</li>
</ul>
<p>到場之後先看到題本的排版消失了，等寬字體不見，還有 pJ
的範測被複製了一份塞到 pI 上 (?)</p>
<p>因為我 pH 的驗題解爛掉了所以在嘗試修它，之後突然想起 pJ 有 checker
要放上去，試了很久終於發現是 <code>testlib.h</code> 要放 <a
href="https://github.com/cn-xcpc-tools/testlib-for-domjudge">domjudge
專用的版本</a>才有效。</p>
<ul>
<li>13:10</li>
</ul>
<p>快速吃過午餐之後就到了測機時間，聽旺陽學長跟掛長說前一天收到的測試賽
pC 沒有測資是臨時生的，而今天發現 pA 跟 pB
的測資也都是爛的，只好臨時手生一些測資。其中 pB 測資甚至只有範例測資
OwO</p>
<ul>
<li>14:10</li>
</ul>
<p>看到工人開始打紅色以外的氣球，一問之下發現因為溝通不良導致工人以為只要打紅色的就好。最後決定把
pA 跟 pC 的顏色換掉，讓最簡單的 pC 變成紅色。</p>
<ul>
<li>14:30</li>
</ul>
<p>比賽開始了，一片混亂。</p>
<p>有三個隊伍共用到別人的帳號，導致會有一些隊伍共用 submission
的成績，好在把全部人的隊伍都重新檢視一遍之後暫時解決掉這個問題，不過已經造成的影響只能透過賽後手動加扣分來解決了
QQ</p>
<p>場內好像沒有電子檔題本可以用，Judge
裡也沒有提供可以下載的範例測資，參賽者們要面對的是兩題有超長範例的
pH、pI（pH 甚至範例測資足足就佔了一頁半）。</p>
<ul>
<li>15:00</li>
</ul>
<p>我發現比賽時間設定成三個小時而官網上是寫 2.5
小時，不過因為先前紙本說明上寫的也是三小時，我們討論了一下決定維持原樣。</p>
<blockquote>
<p>結果後來又有人進來吵到底要不要維持三小時 ._.</p>
</blockquote>
<ul>
<li>15:15</li>
</ul>
<p>有人提問 pA 輸入測資結尾有沒有空白，雖然沒有但是有
<code>\r\n</code>，可惜他沒問到點所以我就放棄回覆「測資以
<code>\r\n</code> 結尾」了。</p>
<ul>
<li>15:37</li>
</ul>
<p>終於有一隊 (pixelcat) 上傳了 pJ，可惜它的輸出連範例都過不了，幫
QQ</p>
<ul>
<li>16:05</li>
</ul>
<p>最後還是決定要把行尾的 <code>\r</code> 拿掉並
rejudge，結果是「小象幫」超越了「隊伍名稱」早一分鐘拿到了首殺。</p>
<ul>
<li>16:20</li>
</ul>
<p>發現 pA 限制有錯，每筆測資的空格數可能會超過 100
個。一開始先發了「空格數有誤」的
clarification，後來改成把不符合格式的兩筆測資刪掉再 rejudge。</p>
<ul>
<li>17:00</li>
</ul>
<p>封版ㄌ，我的題目怎麼都變成防破台題了啦 QQ</p>
<ul>
<li>17:13</li>
</ul>
<p>becaido 起飛。</p>
<ul>
<li>17:20</li>
</ul>
<p>becaido 跟蝸牛同時在 170 min 過 pJ，雖然是蝸牛拿到首殺但 becaido
仍然是大一位。</p>
<ul>
<li>17:30</li>
</ul>
<p>比賽結束，準備頒獎。</p>
<ul>
<li>18:xx</li>
</ul>
<p>結束之後跟教授們吃了一間看起來就很貴的餐廳。感覺我就很不適合吃這種東西，每次喜宴感覺都是去吃生菜的
._.</p>
<div class="note default no-icon"><p>因為到了隔年的五月我才想起來要把東西丟上去，所以就寫到這裡吧
OAO。</p>
</div>
]]></content>
      <categories>
        <category>競程</category>
        <category>日記</category>
      </categories>
      <tags>
        <tag>unknown</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 ISSC 題解</title>
    <url>/cp/editorials/issc22/</url>
    <content><![CDATA[<p>本來沒有打算打所有題目的題解的，因為題目應該也沒有難到會有人想看所有題目的解。不過出於強迫症我還是嘗試把每題的題解打出來了。</p>
<p>出題心得以及觀賽心得還沒寫完，寫完再更新連結。</p>
<p>我寫的每題 AC Code 還有題本會放到 GitHub 裡面，但先讓我整理一下。</p>
<span id="more"></span>
<h2 id="problem-a.-write-only-once-memory">Problem A. Write-Only-Once
Memory</h2>
<h3 id="題目大意">題目大意</h3>
<div class="note info no-icon"><p>待補。</p>
<ul>
<li><span class="math inline">\(1 \le\)</span> 測資筆數 <span
class="math inline">\(\le 10\)</span>。</li>
<li><span class="math inline">\(1 \le |s| \le 999\)</span>。</li>
<li><span class="math inline">\(s\)</span>
只包含大小寫英文字母以及空白字元。</li>
<li><span class="math inline">\(s\)</span> 中的空白字元數量 <span
class="math inline">\(\le 100\)</span>。</li>
<li>保證 <span class="math inline">\(s\)</span>
的第一跟最後一個字元不是空白，且不會有兩個相鄰空白字元出現。</li>
</ul>
</div>
<h3 id="解法">解法</h3>
<p>以下用 <span class="math inline">\(n\)</span> 代表 <span
class="math inline">\(s\)</span> 中以空白字元切出的字串數量。</p>
<p>先利用 <code>getline</code> 與 <code>stringstream</code>
將輸入讀進來，顯然重要的只有字串的長度，於是問題從一堆字串們變成了一陣列的數字們。</p>
<p>觀察到題目給出的條件是 <span class="math inline">\(\text{cost}_{i,j}
= \min\limits_{i \le k &lt; j}\{\text{cost}_{i,k} + \text{cost}_{k+1,j}
+ 1\}\)</span>，顯然可以直接遞迴 DP 在 <span
class="math inline">\(\mathcal{O}(n^3)\)</span> 解決，base case 就是
<span class="math inline">\(\text{cost}_{i,i} = \text{length of the
\(i\)-th string}\)</span>。</p>
<p>另外，利用轉移點單調的性質可以更進一步壓到 <span
class="math inline">\(\mathcal{O}(n^2)\)</span>，但不需要這樣做也能通過本題。</p>
<h2 id="problem-b.-schedule-for-nursing">Problem B. Schedule for
Nursing</h2>
<h3 id="題目大意-1">題目大意</h3>
<div class="note info no-icon"><p>有 <span class="math inline">\(d\)</span> 個工作，分別要在時段 <span
class="math inline">\([s_i, e_i)\)</span>
完成，一個員工能在兩個工作時段工作若且唯若這兩個時段不重疊，且其中至少有一單位的休息時間。請問要將所有工作做完至少需要幾個員工？</p>
<ul>
<li><span class="math inline">\(1 \le\)</span> 測資筆數 <span
class="math inline">\(\le 10\)</span>。</li>
<li><span class="math inline">\(1 \le d \le 100\)</span>。</li>
<li><span class="math inline">\(8 \le s_i &lt; e_i \le
22\)</span>（<span class="math inline">\(1 \le i \le d\)</span>）。</li>
</ul>
</div>
<h3 id="解法-1">解法</h3>
<p>待補。</p>
<h2 id="problem-c.-exponentiation">Problem C. Exponentiation</h2>
<h3 id="題目大意-2">題目大意</h3>
<div class="note info no-icon"><p>求 <span class="math inline">\(2^n \bmod{10}\)</span> 的結果。</p>
<ul>
<li><span class="math inline">\(0 \le n \le 10^{200}\)</span>。</li>
</ul>
</div>
<h3 id="解法-2">解法</h3>
<p>觀察到 <span class="math inline">\(2^n\)</span> 尾數是 <span
class="math inline">\(1, 2, 4, 8, 6, 2, 4, 8, 6, \ldots\)</span>
循環，於是就判斷 <span class="math inline">\(n \bmod{4}\)</span>
是多少以及特判 <span class="math inline">\(n = 0\)</span> 的 case。</p>
<p>實作上只要利用 <span class="math inline">\(n\)</span>
的末兩位數即可得到除以 <span class="math inline">\(4\)</span>
的餘數。</p>
<h2 id="problem-d.-isosceles-triangle">Problem D. Isosceles
Triangle</h2>
<h3 id="題目大意-3">題目大意</h3>
<div class="note info no-icon"><p>給你平面上不重複的 <span class="math inline">\(n\)</span> 個格子點
<span class="math inline">\((x_i, y_i)\)</span>，請求出有多少個 <span
class="math inline">\((a, b, c)\)</span> 滿足 <span
class="math inline">\(a &lt; b &lt; c\)</span> 使得 <span
class="math inline">\((x_a, y_a)\)</span>、<span
class="math inline">\((x_b, y_b)\)</span>、<span
class="math inline">\((x_c, y_c)\)</span> 構成等腰三角形。</p>
<ul>
<li><span class="math inline">\(3 \le n \le 3000\)</span>。</li>
<li><span class="math inline">\(|x_i|, |y_i| \le
100\,000\)</span>（<span class="math inline">\(1 \le i \le
n\)</span>）。</li>
</ul>
</div>
<h3 id="解法-3">解法</h3>
<p>枚舉每個點 <span class="math inline">\(v\)</span>
當成等腰夾的那個點並計算出 <span class="math inline">\(v\)</span>
跟其他所有點的距離，最後使用 <code>std::map</code> 來求出有幾個離 <span
class="math inline">\(v\)</span> 距離相同的點對。</p>
<p>注意到若是所有點都為格子點，則不會構成正三角形，不會有重複計算的情形。</p>
<p>實作上最好是儲存距離平方，避免因為精度誤差導致吃 Wrong Answer。</p>
<h2 id="problem-e.-derangement">Problem E. Derangement</h2>
<h3 id="題目大意-4">題目大意</h3>
<div class="note info no-icon"><p>計算 <span class="math inline">\(1, 2, \ldots, n\)</span> 的排列的<a
href="https://en.wikipedia.org/wiki/Derangement">錯排數</a>，並對 <span
class="math inline">\(10^9 + 7\)</span> 取餘數後輸出。</p>
<ul>
<li><span class="math inline">\(1 \le n \le 1\,000\,000\)</span>。</li>
</ul>
</div>
<h3 id="解法-4">解法</h3>
<p><a
href="https://hackmd.io/@jacky860226/rJ0lIKEFs">出題者的題解</a></p>
<h2 id="problem-f.-shengdiyage-city">Problem F. Shengdiyage city</h2>
<h3 id="題目大意-5">題目大意</h3>
<div class="note info no-icon"><p>給你一個 <span class="math inline">\(n \times m\)</span> 的地圖表格
<span class="math inline">\(A\)</span>，其中 <span
class="math inline">\(A_{i,j} = \texttt{&quot;.&quot;}\)</span>
代表空格、 <span class="math inline">\(A_{i,j} =
\texttt{&quot;\(\#\)&quot;}\)</span> 代表牆壁。<br>
定義一個「房間」是一個極大的四連通空格們，請問給定的地圖中有多少房間？</p>
<ul>
<li><span class="math inline">\(1 \le n, m \le 1000\)</span>。</li>
<li><span class="math inline">\(A_{i,j} \in \{\texttt{.},
\#\}\)</span>（<span class="math inline">\(1 \le i \le n\)</span>、<span
class="math inline">\(1 \le j \le m\)</span>）。</li>
</ul>
</div>
<h3 id="解法-5">解法</h3>
<p>對沒被拜訪過的空格做 BFS，並在每次做 BFS 時把答案 <span
class="math inline">\(+1\)</span>。</p>
<h2
id="problem-g.-strings-without-four-consecutive-same-symbols">Problem G.
Strings without Four Consecutive Same Symbols</h2>
<h3 id="題目大意-6">題目大意</h3>
<div class="note info no-icon"><p>待補。</p>
</div>
<h3 id="解法-6">解法</h3>
<p>待補。</p>
<h2 id="problem-h.-packing-rectangles">Problem H. Packing
Rectangles</h2>
<h3 id="題目大意-7">題目大意</h3>
<div class="note info no-icon"><p>待補。</p>
</div>
<h3 id="解法-7">解法</h3>
<p>記得使用 <code>std::map</code> 來存，還有要記得初始化。</p>
<p>待補。</p>
<h2 id="problem-i.-international-strategic-submission-contest">Problem
I. International Strategic Submission Contest</h2>
<h3 id="背景故事">背景故事</h3>
<p>原本沒有故事的版本在一年半前（2021.03.06）就出完了，只不過一開始的複雜度是帶
<span class="math inline">\(\text{lcm}{(1, 2, \ldots, R)}\)</span>
的版本，因為覺得可以做到更好就一直擱著了。</p>
<p>而本題分配到的程度是難題，而本來想出</p>
<ol type="1">
<li>秘密 <span class="math inline">\(\to\)</span> 燒雞</li>
<li>定理題 <span class="math inline">\(\to\)</span> 生一半</li>
<li>矩陣乘法 + NTT <span class="math inline">\(\to\)</span> 燒雞</li>
<li>秘密 + Kruskal + 虛樹 <span class="math inline">\(\to\)</span>
燒雞</li>
<li>秘密 + 秘密 <span class="math inline">\(\to\)</span> 生一半</li>
</ol>
<p>都失敗了，最後這題就被重新翻出來想有沒有更好的解，最後是想到了一個只帶
<span class="math inline">\(R\)</span> 的作法。不過我還是覺得有只帶
<span class="math inline">\(\text{polylog}(R)\)</span> 的解。</p>
<p>題敘部分的靈感是今年 ICPC World Final 時有隊伍提出了 <a
href="https://youtu.be/15Wyj_-PG9I?t=669">"strategic
submission"</a>。</p>
<p><img data-src="strategic-submission.png" style="width: 90%; max-width: 400px"></p>
<p>決定選了這題之後就打算取可以使縮寫是 ISSC 的 "International Strategic
Submission Contest"
當作題目名稱；決定完題目名稱之後就是決定要放什麼敘述，最後是套「機器人比賽」跟可愛的拉菲進去。</p>
<p>題目會這麼長的另一個原因單純是我想要試試看出題敘長的題目，雖然在
AtCoder
看到的題敘往往都非常簡短，且其實這題原本敘述也才五六行而已，但是看著
ICPC 上屢屢能寫到四五頁的題目也不禁讓我想試試看出題敘長一點的題目。</p>
<p>這題的英文題敘大部分是用 Grammarly
糾正出來的，事實證明它對於含有數學算式的文章很難抓出文法錯誤。而在生完題敘之後不久
ChatGPT 橫空出世，所以現在我基本上都是用那個來幫忙翻譯題敘跟題解了
&gt;////&lt;</p>
<h3 id="題目大意-8">題目大意</h3>
<div class="note primary"><p>12.26 公布。</p>
</div>
<h3 id="解法-8">解法</h3>
<div class="note primary"><p>12.26 公布。</p>
</div>
<h2 id="problem-j.-christmas-padoru">Problem J. Christmas Padoru</h2>
<h3 id="背景故事-1">背景故事</h3>
<p>這題的定位是中等難度的題目，但結果是變成第二難的題目，其實還挺出人意料的
OAO</p>
<p>一開始我想生的是互動或構造題，簡單來說就是需要動更多腦而且相對一般來說更困難的題目。最後因為遲遲沒有好的互動靈感，就打算生一題序列的構造題。我記得
2020 年好像有一題是「構造 <span class="math inline">\(n\)</span>
個數字的排列，使逆序數對數量恰為 <span
class="math inline">\(k\)</span>」相當經典，於是我想要找到一個不那麼
trivial 的 idea 來要求構造。</p>
<p>在 ISSC 開放報名時看到 PixelCat
徵隊友的貼文，之後獲得出題權後就打算出一題題敘裡有 Nachoneko
的題目（結果 PixelCat 整場都沒看那題
._.），就套了一個帶有一點點數學的題目上去。</p>
<h3 id="題目大意-9">題目大意</h3>
<div class="note primary"><p>12.26 公布。</p>
</div>
<h3 id="解法-9">解法</h3>
<div class="note primary"><p>12.26 公布。</p>
</div>
]]></content>
      <categories>
        <category>競程</category>
        <category>題解</category>
      </categories>
      <tags>
        <tag>ISSC</tag>
      </tags>
  </entry>
  <entry>
    <title>ZeroJudge c272. 趙哥的養成計畫 I --- 題解</title>
    <url>/cp/editorials/zj-c272/</url>
    <content><![CDATA[<h2 id="動機">動機</h2>
<p>刷
<a href="https://sites.google.com/site/pcshic/zi-xun-pei-xun">板中的講義題單</a>
的時候寫到了這一題，發現單純利用 sliding windows
過不了，花了大約四小時的時間去優化它才成功
AC。然後因為想寫題解，所以就順便來寫這一篇紀錄一下。</p>
<span id="more"></span>
<h2 id="題意">題意</h2>
<ul>
<li><a
href="https://zerojudge.tw/ShowProblem?problemid=c272">題目連結</a></li>
</ul>
<blockquote>
<p>給你 <span class="math inline">\(N\)</span>（<span
class="math inline">\(N \le 10\)</span>）個整數 <span
class="math inline">\(A_1 \sim A_N\)</span>（<span
class="math inline">\(|A_i| \le 10^6\)</span>）跟一個計分函式</p>
<p><span class="math display">\[score(i) = A_{\sigma_i} \times (M -
\min\{i, M + 1\} + 1) \notag\]</span> （<span
class="math inline">\(\sigma\)</span> 是一個 <span
class="math inline">\(1 \sim N\)</span> 的排列）。</p>
<p>接著有 <span class="math inline">\(Q\)</span>（<span
class="math inline">\(Q \le 10^6\)</span>）次詢問，請找出在分數不超過
<span class="math inline">\(qs\)</span>（<span
class="math inline">\(-2^{46} &lt; qs &lt;
2^{25}\)</span>）的前提下最多可以拿多少分。</p>
</blockquote>
<h2 id="暴力做法">暴力做法</h2>
<p>首先，C++ 裡可以透過
<a href="https://en.cppreference.com/w/cpp/algorithm/next_permutation"><code>std::next_permutation()</code></a>
來找到所有排列，再依序計算出每個排列的分數。因為 <span
class="math inline">\(N \le 10\)</span>，所以排列個數 <span
class="math inline">\(P \le 10! =
3\,628\,800\)</span>。如果對每次詢問都重新查詢一遍，那複雜度會爛到 <span
class="math inline">\(\mathcal{O}(QP)\)</span>，顯然無法通過。</p>
<div class="note info"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> A[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) cin &gt;&gt; A[i];</span><br><span class="line"><span class="built_in">sort</span>(A, A + N);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">/* calculate score */</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(A, A + N));</span><br></pre></td></tr></table></figure>
</details>
</div>
<h2 id="二分搜">二分搜</h2>
<p>不過因為每次詢問的排列都是相同的，先把所有排列的分數處理出來再利用二分搜（或直接用
<a href="https://en.cppreference.com/w/cpp/algorithm/upper_bound"><code>std::prev(std::upper_bound())</code></a>）得到第一個
<span class="math inline">\(\le qs\)</span> 的最大值，複雜度是 <span
class="math inline">\(\mathcal{O}(Q \lg P)\)</span>，應該可以拿到 <span
class="math inline">\(51\)</span> 或 <span
class="math inline">\(61\)</span> 分。</p>
<h2 id="滑動窗口">滑動窗口</h2>
<p>這樣還是太慢了，觀察到 <span class="math inline">\(qs\)</span>
越大相應的答案就越大，考慮把所有詢問先拿出來排序，最後利用 sliding
windows 的方法維護答案，複雜度是 <span
class="math inline">\(\mathcal{O}(Q \lg Q + P)\)</span>，還是只能拿到
<span class="math inline">\(51\)</span> 或 <span
class="math inline">\(61\)</span> 分。</p>
<h2 id="常數優化-1">常數優化 1</h2>
<p>分數的最大值不會超過 <span class="math inline">\(\max\{A_i\} \times M
\le 10^7\)</span>，所以不用使用 <code>long long</code>，可以用
<code>int</code> 處理就好，但要注意的是 <span
class="math inline">\(qs\)</span> 的範圍會到
<code>long long</code>，可以先把他判斷掉。</p>
<div class="note info"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> qs;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">query</span>(Q);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Q; ++i) &#123;</span><br><span class="line">    cin &gt;&gt; qs;</span><br><span class="line">    <span class="keyword">if</span> (qs &lt; all_score[<span class="number">0</span>]) qs = all_score[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">    query[i].first = qs, query[i].second = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<h2 id="常數優化-2">常數優化 2</h2>
<p>把所有 vector 都拔掉換成一般的 array、把區域變數開到全域、開
<code>#pragma GCC optimize("Ofast", "unroll-loops")</code>。</p>
<h2 id="io-優化">I/O 優化</h2>
<p>因為輸入大約有 <span class="math inline">\(6 \times 10^6\)</span>
個字元，輸出可能會到 <span class="math inline">\(2.5 \times
10^7\)</span> 個字元 (假設都是 <code>Case #xxxxx</code> 跟
<code>No Solution!</code>)，所以需要進行「適量」的優化。輸入跟輸出就選擇使用
<code>read()</code> 跟 <code>write()</code> 從 buffer
裡面一次讀進來跟印出去。</p>
<p>我的 I/O 模板是參考 FHVirus 的
<a href="https://fhvirus.github.io/blog/2020/fhvirus-io/">這篇
blog</a>，有興趣的人也可以去參考一下。</p>
<p>另外就是如果你是使用 <code>getchar()</code> 跟 <code>putchar()</code>
會拿到 <span class="math inline">\(74\)</span> 分，使用
<code>getchar_unlocked()</code> 跟 <code>putchar_unlocked()</code>
也可以拿到滿分。</p>
<h2 id="常數優化-3">常數優化 3</h2>
<p>因為不知道出題人是怎麼把空間壓到只有 <span
class="math inline">\(1.5\)</span> MB
的，所以就嘗試只當連續枚舉的答案不相同時才把答案加入陣列中，並把原本的滑動窗口改成二分搜，意外的直接拿到
TopCoder。</p>
<p><img data-src="https://i.imgur.com/lpSzrOH.png" /></p>
<div class="note info"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i) score += A[i] * (M - i);</span><br><span class="line">    <span class="keyword">if</span> (score != all_score[all_score_sz<span class="number">-1</span>]) all_score[all_score_sz++] = score;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(A, A + N));</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>這個方法只要 <span class="math inline">\(N = M = 10\)</span>
就可以輕鬆卡掉，測資竟然沒出滿 OAO！</p>
<h2 id="ac-code">AC code</h2>
<ul>
<li><a
href="https://github.com/SorahISA/competitive_programming/blob/master/ZeroJudge/c/c272-1.cpp">滑動窗口</a></li>
<li><a
href="https://github.com/SorahISA/competitive_programming/blob/master/ZeroJudge/c/c272-2.cpp">二分搜</a></li>
</ul>
]]></content>
      <categories>
        <category>競程</category>
        <category>題解</category>
      </categories>
      <tags>
        <tag>ZeroJudge</tag>
      </tags>
  </entry>
  <entry>
    <title>資訊之芽 2023 算法班第一階段認證火烤 出題心得</title>
    <url>/cp/organizes/sprout23-mid/</url>
    <content><![CDATA[<ul>
<li><a
href="https://drive.google.com/drive/folders/1GjYbJzCrMGNIbksjQdA5XYRfHB8saPj4">題目的
tps 資料夾</a></li>
</ul>
<p>這題其實原本是出給 4/21
的交大競程一期中考的，但當時由於題目太難就換了簡單的題目上去。</p>
<span id="more"></span>
<h2 id="想法">想法</h2>
<p>因為是出給競程一，所以這題的靈感來源其實是一樣我出的<a
href="https://codeforces.com/group/GG44hyrVLY/contest/385453/problem/220610E">去年競程一期末考的
Wifi</a>。當時這題因為變數太多（跟 TOI 2021
初選學的）導致很不好拆包裝，好像連一個 submission 都沒有，現在放在
Codeforces 上也沒有人來寫 QAQ。</p>
<figure>
<img data-src="version1.jpg" style="width: 90%">
<figcaption>
題目草稿
</figcaption>
</figure>
<p>4/5 的晚上是生出 prototype 的 deadline，這題好像是在 4/4
晚上迸發出來的。一開始先想到了上面的 Q1，然後馬上發現可以變成 <span
class="math inline">\(\mathcal{O}(\sqrt{s})\)</span>
段區間，再過了一陣子也都想不出更好的解。</p>
<p>隨後我就想到可能可以出 Wifi 反過來的版本：之前是問給訊號問第 <span
class="math inline">\(k\)</span>
大，現在不如就給最大值問任意一組訊號吧！這就是 Q2 的原形。</p>
<p>當下我就試著看能解到什麼程度：首先是先發現了她有個看起來就很對的
greedy 性質，接著畫了一下又 claim
她有優超性，這時我確定這題用李超線段樹就做到 <span
class="math inline">\(\mathcal{O}(n \lg^2 n)\)</span> 或是 <span
class="math inline">\(\mathcal{O}(n \lg n)\)</span>，但我不確定
convex-hull trick 能不能處理優超性函數，所以 deque
的解被我畫了個問號。</p>
<p>隨後，我去翻了一些講義，發現只要有優超性的函數就能直接套這個做法上去，而市面上通常不會看到
convex-hull trick
放在非線性函數上，我就覺得這題一定要找地方出出來，讓我之後可以拿來當例題用。</p>
<p>（當時還有想到幾題跟這個函數沒關係的題目，之後或許會丟到 YTP 或 IONC
吧？）</p>
<h2 id="生題">生題</h2>
<p>這題的解沒有花很多時間來寫（至少比題解快多了），之後 HNO2
有幫我看過確認想法應該是好的，不過當我丟到競程一的時候就被說太難了
QQ。</p>
<p>就這樣，題目被封存起來，直到競程一期中考的前兩天，CatAgain
敲我讓我看資芽 Slack 的訊息，我才知道我要負責出一題期中考，而且其他
subject 已經被領走了，剩下一題
DS。翻了一下上課講義，發現還沒教線段樹、BIT 等樹狀結構，也沒看到可以用
<code>std::set</code> 或
<code>std::map</code>（雖然好像可以？），我意識到我好像沒剩下多少種題目可以出了。</p>
<p>接著我看了一遍其他四題，一題裸的 priority queue 做
greedy（water）、一題建虛點做
01-BFS（mid）、一題後來被換掉的題目（water）、還有一題看不太懂但感覺也是水題的題目（water），感覺好像我再出水題就會有一大堆人破台了？</p>
<p>當時我也沒打算一定要用這題（hard），我就又想了一個簡單的 DS
題（easy-mid），然後把這兩題都丟上去讓 PM 選。最後出乎我預料的選了 hard
的那題，並提出了「增加 <span class="math inline">\(C = 1\)</span>
subtask
方便觀察函數圖形」、「提供範例圖片（本來就有打算提供）」，我就把測資生一生等人來驗題。</p>
<figure>
<img data-src="original-subtasks.png" style="width: 50%; max-width: 300px">
<figcaption>
初版子題分數及限制
</figcaption>
</figure>
<p>由於不知道怎樣的測資才算強，我大概想了幾種方法：</p>
<ol type="1">
<li>純 random</li>
<li>只在少數幾個位置蓋基地台</li>
<li>所有位置的信號強度總和很小</li>
<li>把所有是基地台的位置都 <span class="math inline">\(-1\)</span></li>
<li>全部的值都加上一個常數</li>
<li>遞增 / 遞減排序</li>
</ol>
<p>上述幾種都會在生完基地台之後在官解上先跑過一次去讓 <span
class="math inline">\(b_i = s_i\)</span>
再調整結果。而後續驗題又陸陸續續的多了四五種類型的測資。</p>
<p>擔心這題只有一個人驗會不夠，途中我又戳了幾個人來幫忙驗題，可惜恰逢期中考年（怎麼大學永遠都在段考），最後只有
PolarisChiba 跟 nella17 可以來幫忙，感謝他們各貢獻了半天來幫我驗題
&gt;////&lt;！也因此這題的測資變強了很多，本來甚至是暴力加上怪剪枝就能直接
AC，現在也已經卡掉了已知的所有唬爛方法。殘念的是，目前這題還沒有其他人拿到
AC。</p>
<p>現在剩下的就只有題解的部分了。我本來以為大概花五六個小時就能做完題解，但由於
nella17
只在最後一天有空，所以基本上從晚上八點到考試當天的上午十點就是在生測資、改測資跟寫題解中度過。</p>
<p>上午八點半，我在寫最後一個子題，突然就意識到：<span
class="math inline">\(b_1 \ge b_2 \ge \cdots \ge b_n\)</span> 有 <span
class="math inline">\(b_i = b_{i+1}\)</span>
的情況也要特殊處理，那麼那個子題到 AC 的難度區間是不是太小了？就把 <span
class="math inline">\(n \le 3000\)</span> 跟 <span
class="math inline">\(b_1 \ge b_2 \ge \cdots \ge b_n\)</span>
的配分都提高了一些，並把限制從非嚴格遞減改成嚴格遞減。</p>
<p>重新生測資並 background rejudge 之後，我發現本來給 <span
class="math inline">\(C \cdot b_i \le 60\)</span> 子題的解竟然吃 TLE
了！檢查一遍測資跟解發現沒有問題，於是就將問題歸咎於除法次數太多，只好把那個子題的
<span class="math inline">\(n\)</span> 也下調又重新 rejudge 一次（如果 C
語法班考試時會覺得 judge 有點卡那是我的鍋 QQ）。</p>
<p>稍憩一下，下午兩點從床上起來繼續完成題解。因為我<del>作死</del>把子題性質改了導致函數圖形要全部重畫。本來還想用題目中的函數演示一下是怎麼做
convex-hull trick 的，但最後連優超性的證明都還來不及寫。</p>
<h2 id="驗題">驗題</h2>
<p>發現 pA 跟 pC 的官解爛了，pA 是戳到了 UB 但測資沒有出問題，pC
是官解用 <code>int</code>，但實際上應該要用 <code>long long</code>。</p>
<p>我真的不懂要怎麼好好唬爛，我唯一會的可能就是想辦法套個 random 上去
QQ。身為出題者的時候更是如此，對自己的題目根本無從下手。</p>
<p>也或許是越難的題目就能想到越多種唬爛的辦法？</p>
<h2 id="考試">考試</h2>
<p>好像不能透漏太多。</p>
<p>不知道是誰在考試開始約 45 分鐘時戳了 Rejudge all submissions
的按鈕，結果 judge
大概就🔥火力全開🔥了快半小時？之後絕對不要再把「火」放進比賽名稱了......</p>
<p>本來我 claim 我的題目一定不會有人 <span class="math inline">\(&gt;
25\)</span> 分，然後大約會有 <span class="math inline">\(10\)</span>
人拿到 <span class="math inline">\(25\)</span> 分，幾個人拿到 <span
class="math inline">\(10\)</span> 分，不過 baluteshih
覺得這題可能只有競賽選手會開，其中某人可以期待一下。</p>
<p>他燒雞。</p>
<p>這題最後的結果是 [25 分] * 1 + [10 分] * 11 + [0 分] *
56，不確定是我對資芽學員 or
現役高中生實力的誤判比較嚴重，還是我對這題題目難度的低估比較致命。</p>
<p>考試途中有一個有趣的提問：「子題分數是取聯集還是交集？」</p>
<p>說實話，取交集聽起來很好玩耶，哪天辦愚人節比賽應該就要這樣搞w</p>
<h2 id="結語">結語</h2>
<p>這是第一次為出題寫心得，本來去年 IONCamp、校內賽、花中模考、ISSC
等比賽都有打算寫心得的，但是 IONCamp
是太累，拖了幾天就沒心情了；其它則是沒什麼認識的人或參賽者，讓我也沒動力寫心得。</p>
<p>當某天我能為一些題池裡的未解題目生出滿意的解，我還蠻想要找一些人辦類似
LYB
邀請賽的咚咚的，也不知道在大學時期有沒有這種機會（也不知道我的大學時期還有多久
uwu）。</p>
<p>對這場考試的難度，我 claim 如果放到 TOI 初選線會在 380 上下。其中 D
跟 E（不考慮對於 interactive 的不熟悉程度）該有 <span
class="math inline">\(&gt; 60\)</span> AC、A 跟 C 該有 <span
class="math inline">\(\sim 30\)</span> AC、B 可能會有人拿到 65 或
100。</p>
<p>比起這題 <code>wifi2</code>，我覺得 <code>Wifi</code> 更適合出成 OI
題（方便用子題來 debug），而這題的子題其實沒有太大的用處，反而丟去 ICPC
可能會更好？但我還是比較喜歡出 OI
題就是了。畢竟大部分的比賽我都沒辦法看到參賽者的螢幕畫面，只要他們沒有上傳我就不知道他們在做什麼。看到參賽者一步一步的拿到子題們的分數，遠比看著只有
0 與 1 的記分板要有趣的多。</p>
<p>PolarisChiba
在驗題時精神出了一個很巧妙的解法：把函數都取倒數，算完答案再取倒數回來，這樣算答案時每個函數就會變成兩條直線，也不用再通靈那個奇怪函數的性質了！</p>
<p>這個解聽起來超讚，如果隔幾天寫完能拿 AC 我就把他補進題解裡面吧～</p>
]]></content>
      <categories>
        <category>競程</category>
        <category>出題心得</category>
      </categories>
      <tags>
        <tag>sprout</tag>
      </tags>
  </entry>
  <entry>
    <title>演算法概論－期中考</title>
    <url>/learning/nycu-introduction-to-algorithms/nycu-i2a-midterm/</url>
    <content><![CDATA[<p>好久沒發文了，電腦好像還有些東西沒設定好，沒辦法本機 deploy ;w;</p>
<span id="more"></span>
<hr />
<h2 id="準備階段">準備階段</h2>
<p>本來表定是 9:00 ~ 13:00 的，但是大家進教室之後就已經 9:00
了，還要測試環境，所以就延到 9:35 才開始。</p>
<p>先測一下 gcc 11.2 有支援什麼，發現不能直接
<code>#include &lt;bits/extc++.h&gt;</code>，會少東西，也不能宣告
<code>int _N</code>，他會說底線開頭的是預留字，但是可以宣告
<code>int _test</code> OwO。</p>
<p>在開始前約 10 分鐘，助教說今年的系統會跟以往的 Formosa OJ
不一樣，結果竟然是用 CMS！？而且還有計分板可以看，當下感覺好爽
&gt;////&lt;</p>
<div class="note info"><h4 id="想要-virtual-看看">想要 virtual 看看？</h4>
<p>如果你想要找有這些題目可以做跟上傳的地方，你可以來
<a href="https://oj.nctu.edu.tw/groups/36/problems/">這裡</a> 上傳。</p>
<p>請注意你會需要先 apply 這個
group，而要等教授按確認可能會需要幾天的時間（教授基本上都不會在意有誰要加
group）。</p>
</div>
<hr />
<h2 id="考試開始">考試開始</h2>
<p>可以直接用測機時打的模板耶！</p>
<p>本來的策略是先看過所有題目跟 Subtask
再去想要用什麼順序去寫，結果...</p>
<h3 id="b---spaghetti-tower-again-spaghetti">B - Spaghetti Tower Again
(Spaghetti)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(30\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(70\)</span></span><span
class="math inline">\()\)</span> (02:38) 全場首 Submit、全場首殺</p>
<blockquote>
<p>給你 <span class="math inline">\(N\)</span> 個正整數 <span
class="math inline">\(S_i\)</span>，接著詢問 <span
class="math inline">\(Q\)</span> 次有多少數字在 <span
class="math inline">\([l_i, r_i]\)</span> 內。</p>
<p>限制：</p>
<ul>
<li><span class="math inline">\(\hphantom{0}30\%\)</span>：<span
class="math inline">\(N \le 10\,000\)</span>、<span
class="math inline">\(Q \le 5000\)</span>。</li>
<li><span class="math inline">\(100\%\)</span>：<span
class="math inline">\(N \le 1\,000\,000\)</span>、<span
class="math inline">\(Q \le 500\,000\)</span>、<span
class="math inline">\(1 \le S_i \le 10^9\)</span>。</li>
</ul>
</blockquote>
<p>顯然就是
<code>upper_bound(ALL(S), r) - lower_bound(ALL(S), l)</code>，花了一分鐘把東西刻完之後發現題本上的範測複製不起來，只能載他的
.zip 或是手打，於是就乾脆不測範例直接丟，然後他就 AC 了。</p>
<p>接著就把剩下的幾題看完，挑出最水的（已經有人 AC 的）F 來做。</p>
<h3 id="f---preventing-conflicts-conflicts">F - Preventing Conflicts
(Conflicts)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(10\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(90\)</span></span><span
class="math inline">\()\)</span> (06:50)</p>
<blockquote>
<p>給你兩個長度為 <span class="math inline">\(N\)</span> 的整數陣列
<span class="math inline">\(A\)</span>、<span
class="math inline">\(B\)</span>，請求出如果可以任意重新排列裡面的元素，變成
<span class="math inline">\(A&#39;\)</span> 跟 <span
class="math inline">\(B&#39;\)</span>，那 <span
class="math inline">\(\sum_{i=1}^{N}{A&#39;_i B&#39;_i}\)</span>
的最小值可以是多少。</p>
<p>限制：</p>
<ul>
<li><span class="math inline">\(\hphantom{0}10\%\)</span>：<span
class="math inline">\(N \le 10\)</span>。</li>
<li><span class="math inline">\(100\%\)</span>：<span
class="math inline">\(N \le 100\,000\)</span>、<span
class="math inline">\(|A_i|, |B_i| \le 10\,000\)</span>。</li>
</ul>
</blockquote>
<p>經典題，讓 <span class="math inline">\(A\)</span> 順序 <span
class="math inline">\(B\)</span> 逆序，相乘就會最小。</p>
<p>因為剩下的題目感覺稍微有點麻煩，所以就先去開一眼就精神掉的 D。</p>
<h3 id="d---get-together-together">D - Get Together (Together)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(25\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(75\)</span></span><span
class="math inline">\()\)</span> (12:17) 首殺</p>
<blockquote>
<p>給你 <span class="math inline">\(N\)</span> 個人在數線上的初始位置
<span class="math inline">\(\ell_i\)</span> 以及速度 <span
class="math inline">\(v_i\)</span>，每個人可以往任意方向用至多 <span
class="math inline">\(v_i\)</span>
的速度移動，詢問使全部的人都到同一個位置上的最小時間。 精度誤差要 <span
class="math inline">\(\le 10^{-6}\)</span>。</p>
<p>限制：</p>
<ul>
<li><span class="math inline">\(\hphantom{0}25\%\)</span>：<span
class="math inline">\(N \le
5000\)</span>、最佳解中，所有人會在整數點相遇。</li>
<li><span class="math inline">\(100\%\)</span>：<span
class="math inline">\(N \le 1\,000\,000\)</span>、<span
class="math inline">\(|\ell_i| \le 10^9\)</span>、<span
class="math inline">\(1 \le v_i \le 10^9\)</span>。</li>
</ul>
</blockquote>
<p>好好的對答案二分搜就能過了，作業裡有很多這樣的題目。</p>
<p>因為要對浮點數二分搜，所以要固定搜的次數才不會爆炸，我就直接設 <span
class="math inline">\(100\)</span> 次ㄌwww。</p>
<p>小插曲：因為慢慢的 C++20 中毒，所以我用了 <code>std::midpoint</code>
去求 <span
class="math inline">\(\frac{\ell+r}{2}\)</span>，交上去就吃了一發
CE。</p>
<p>剩下的題目就是：裸作業題 A、裸作業題 E、（把我打爆的）經典題
C，因為昨天看東區有一題是有帶權的 C，所以我就以為 C
會是防破台題，先丟一邊再說。</p>
<h3 id="a---yet-another-good-sequence-sequence">A - Yet Another Good
Sequence (Sequence)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(60\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(40\)</span></span><span
class="math inline">\()\)</span> (19:01)</p>
<blockquote>
<p>就是 <a href="https://oj.nctu.edu.tw/problems/1367/">作業</a>
的簡化版，你只能做 <span class="math inline">\(+1\)</span> 的操作，不能
<span class="math inline">\(-1\)</span>。</p>
<p><img data-src="https://i.imgur.com/LzT3CcF.png" /></p>
<p>限制：</p>
<ul>
<li><span class="math inline">\(\hphantom{0}60\%\)</span>：<span
class="math inline">\(N \le 100\,000\)</span>。</li>
<li><span class="math inline">\(100\%\)</span>：<span
class="math inline">\(N \le 2\,000\,000\)</span>、<span
class="math inline">\(|a_i| \le 10^9\)</span>。</li>
</ul>
</blockquote>
<p>作業的版本還需要把左右 merge 起來，或是使用
<code>nth_element</code>，考試的簡化版直接往左右兩邊遞迴，回傳一個 <span
class="math inline">\((答案, 最大值)\)</span> 的 pair 就能更新ㄌ。</p>
<h3 id="e---awkwardness-continued-awkwardness">E - Awkwardness Continued
(Awkwardness)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(60\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(40\)</span></span><span
class="math inline">\()\)</span> (26:45) 首殺</p>
<blockquote>
<p>給你一棵 <span class="math inline">\(N\)</span>
個點的樹的合法前序跟中序表達，你要求出他的後序表達。</p>
<p>限制：</p>
<ul>
<li><span class="math inline">\(\hphantom{0}60\%\)</span>：<span
class="math inline">\(N \le 10\,000\)</span>。</li>
<li><span class="math inline">\(100\%\)</span>：<span
class="math inline">\(N \le 2\,000\,000\)</span>、保證有解。</li>
</ul>
</blockquote>
<p>跟 <a href="https://oj.nctu.edu.tw/problems/1366/">作業</a>
一樣，而且求的是前序，更直觀了。</p>
<div class="note info"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> tok = <span class="number">0</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre</span><span class="params">(N)</span>, <span class="title">in</span><span class="params">(N)</span>, <span class="title">inv_in</span><span class="params">(N)</span>, post</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">recur</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> rt = pre[tok++], p = inv_in[rt];</span><br><span class="line">    <span class="built_in">recur</span>(l, p<span class="number">-1</span>), <span class="built_in">recur</span>(p+<span class="number">1</span>, r);</span><br><span class="line">    post.<span class="built_in">emplace_back</span>(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>小插曲：因為已經 C++20 中毒，所以我用了
<code>for (int tok = 0; int &amp;x : in) cin &gt;&gt; x, inv_in[--x] = tok++;</code>
又吃了一次 CE。</p>
<h3 id="c---amd-stocks-stocks">C - AMD Stocks (Stocks)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(20\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(80\)</span></span><span
class="math inline">\()\)</span> (41:36)</p>
<blockquote>
<p>給你 <span class="math inline">\(N\)</span> 個區間 <span
class="math inline">\([s_i,
e_i]\)</span>，你要從中選出盡量多個區間使不存在任意位置被超過 <span
class="math inline">\(K\)</span> 個區間覆蓋。</p>
<p>限制：</p>
<ul>
<li><span class="math inline">\(\hphantom{0}20\%\)</span>：<span
class="math inline">\(K = 1\)</span>。</li>
<li><span class="math inline">\(100\%\)</span>：<span
class="math inline">\(1 \le K \le N \le 200\,000\)</span>、<span
class="math inline">\(1 \le s_i \le e_i \le 10^9\)</span>。</li>
</ul>
</blockquote>
<p>因為東區的題目，昨天剛好在討論這題帶權的做法，於是當下以為他很難。然後想了幾分鐘之後突然意識到昨天就討論過不帶權的作法ㄌ，只要
greedy 就能過。</p>
<p>當時沒有仔細的討論細節，所以當下我就直接跟著感覺走，刻了一棵區間加值查詢全域
max 的線段樹，所幸沒有太大的 bug，只有忘記端點離散化之後有 <span
class="math inline">\(2N\)</span> 個數字而吃了一次 WA。</p>
<h2 id="結語">結語</h2>
<p>就這樣，經過了考試約莫 <span
class="math inline">\(\frac{1}{6}\)</span>
的時間，成功破台了耶！本來聽說老師想把平均控制在 <span
class="math inline">\(40\)</span> 分（<span
class="math inline">\(40\%\)</span>
的意思）左右，又有整整四個小時可以寫，所以以為他會比競程一的期中考難，結果很失望（？</p>
<p>昨天在做怪怪的測機的時候，林栢瑋說我們應該要寫一個小時就出來不然不算分，這樣才好玩，沒想到真的可以在一個小時內破台
www。</p>
<p>出來之後意識到其實 C 已經寫過很多次了，去年競程也有這題，PCCA
團練也有這題，但是我每次都還是直接暴力砸線段樹下去做
._.，其實只要維護一個 <code>multiset</code> 就好了。</p>
<p>：「他一定能在 <span class="math inline">\(35\)</span>
分鐘破台。」<br/> ：「喔他寫線段樹喔，那沒救。」</p>
<p>88888888</p>
<p>希望期末考能夠有個夠難的防破台題，或是至少出一點有趣的題目（？</p>
]]></content>
      <categories>
        <category>競程</category>
        <category>比賽心得</category>
        <category>課業</category>
        <category>演算法概論</category>
      </categories>
  </entry>
</search>
