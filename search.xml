<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IOI 2021 場外心得</title>
    <url>/cp/contests/ioi21/</url>
    <content><![CDATA[<p>這是第一篇正式ㄉ文章ㄛ
&gt;////&lt;，本來該是另一篇的，但是因為太懶了還沒有動工，這篇就變成第一個了
www。</p>
<span id="more"></span>
<hr />
<p>前年的 IOI 2019 快結束的時候，看到 BB 搶下最後一題的首殺，拿到世界第
6
名，心情也不自覺的跟著變得激動雀躍，也讓我下定決心：只要還有認識的人在打，就一定要跟著看
scoreboard，甚至是同時打 Mirror（不知道為什麼 Yandex
沒開ㄌ），結果就變成線上了......</p>
<p>今年的 IOI 還是線上真的很可惜，少了那種在場外看著 scoreboard
跟著一起激動的感覺。當我想著自己一個人打會不會有點無聊的時候，正巧品庠來找我一起
virtual，就決定在 7/5 跟 7/7 的下午來打ㄌ！</p>
<hr />
<h2 id="day--2-day-0-----測試賽-nhdk-tpr">Day -2 ~ Day 0 --- 測試賽
&amp; NHDK TPR</h2>
<p>覺得自己需要稍微寫一下題目才不會燒雞，所以我就去找了測試賽的題目來打，但因為場外沒有今年的測試賽，所以我去
oj.uz 寫去年的測試題，發現有四分之三跟今年一樣ㄟ，賺到（X）。</p>
<p>反正也沒有限時，那就慢慢寫ㄅ。</p>
<ul>
<li><a href="https://oj.uz/problems/source/532">Judge</a></li>
</ul>
<h3 id="a---handcrafted-gift-gift">A - Handcrafted Gift (<a
href="https://oj.uz/problem/view/IOI20_gift">gift</a>)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(10\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(15\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(20\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(25\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(30\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>有一個長度 <span class="math inline">\(n\)</span> 的字串，每個字元是
<code>R</code> 或 <code>B</code>，你有 <span
class="math inline">\(r\)</span> 個任務，第 <span
class="math inline">\(i\)</span> 個任務要使 <span
class="math inline">\([a_i, b_i]\)</span> 恰有 <span
class="math inline">\(x_i\)</span>
種顏色，詢問有沒有合法的構造，有的話輸出任意一組。</p>
<ul>
<li><span class="math inline">\(n, r \le 500\,000\)</span>。</li>
<li><span class="math inline">\(x_i \in \{1, 2\}\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/440315">AC Solution</a></p>
<p>水題，把 <span class="math inline">\(x = 1\)</span> 的區間都 merge
起來剩下 RB 交錯放就好ㄌ。</p>
<h3 id="b---painting-squares-squares">B - Painting Squares (<a
href="https://oj.uz/problem/view/IOI20_squares">squares</a>)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(10\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(15\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(20\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(55\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>你需要完成兩個程式，第一個程式會給 jury 一個長度 <span
class="math inline">\(n\)</span> 的 01 陣列 <span
class="math inline">\(a\)</span> 和一個正整數 <span
class="math inline">\(k\)</span>，jury 會給你的第二個程式 <span
class="math inline">\(q\)</span> 段長度為 <span
class="math inline">\(k\)</span> 的 subarray <span
class="math inline">\(c = [a_x, a_{x+1}, \ldots,
a_{x+k-1}]\)</span>，你需要回傳這些 subarray 們在 <span
class="math inline">\(a\)</span> 的位置。</p>
<ul>
<li><span class="math inline">\(n, q \le 1000\)</span>。</li>
<li>給分方法：<span class="math inline">\(k \le 10\)</span> 滿分。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/441104">AC Solution</a> # <a
href="https://oj.uz/submission/440962">Random String</a></p>
<p>看到一眼就知道是要構造 de Bruijn sequence
的題目，但是忘記怎麼構造，所以先 random 生了一堆 01 字串來看看可以把
<span class="math inline">\(k\)</span> 壓到多少（BioInformatics 後遺症
www）。放了大約一小時最好的結果就是 <span class="math inline">\(k =
15\)</span>，就丟上去了。</p>
<p>想了幾個小時之後可恥的去看了 Wiki 寫了 inverse Burrows Wheeler
transform 過了。</p>
<p>有個小插曲是我中途交的所有 <span class="math inline">\(k \in [15,
20]\)</span> 的解也都拿到滿分，所以我就丟了一ㄍ issue
給他們，<del>不知道會不會被回 owo</del> 現在已經修好ㄌ
&gt;////&lt;。</p>
<h3 id="c---finding-routers-routers">C - Finding Routers (<a
href="https://oj.uz/problem/view/IOI20_routers">routers</a>)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(16\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(21\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(23\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(40\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>數線上 <span class="math inline">\([\,0, \ell\,]\)</span> 的位置放有
<span class="math inline">\(n\)</span> 座基地台，已知 <span
class="math inline">\(p_0 = 0, \quad p_i &lt; p_{i+1}\)</span> 且 <span
class="math inline">\(p_i \equiv 0 \pmod{2}\)</span>，你可以詢問他最多
<span class="math inline">\(q\)</span> 次離位置 <span
class="math inline">\(x\)</span>
最近的基地台在哪裡（相同距離就選左邊的），最後要回傳所有基地台的位置。</p>
<ul>
<li><span class="math inline">\(\ell = 100\,000\)</span>。</li>
<li><span class="math inline">\(n = 1000\)</span>。</li>
<li>給分方法：<span class="math inline">\(q \le 7500\)</span>
滿分。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/440944">AC Solution</a> # <a
href="https://oj.uz/submission/440817">Binary Search</a></p>
<p>詢問得到的陣列會長 <span class="math inline">\([\,0, \ldots, 1,
\ldots, i, \ldots, n-1\,]\)</span>
這樣子，每個數字都會出現至少一次且值非嚴格遞增。可以二分搜出每個 <span
class="math inline">\(p_c = x\)</span> 且 <span
class="math inline">\(p_{c+1} = x+1\)</span> 的位置並得到 <span
class="math inline">\(c\)</span> 就是 <span
class="math inline">\(x\)</span> 跟 <span
class="math inline">\(x+1\)</span> 的中點。這樣 query 的次數會是 <span
class="math inline">\(\mathcal{O}(n \lg \ell) \approx 20\,000\)</span>
次，拿到 <span class="score_70"><span
class="math inline">\(72.85\)</span> 分</span>。</p>
<p>不過，每一段的長度平均是 <span class="math inline">\(\frac{\ell}{n} =
100\)</span>，如果可以先花幾次把陣列分塊，大概就只需要再 <span
class="math inline">\(\mathcal{O}(n \lg \frac{\ell}{n}) \approx
7000\)</span> 次詢問。自然而然的就會想到用 CDQ
分治來做，實作也很簡單。</p>
<div class="note success"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq</span><span class="params">(<span class="type">int</span> nL, <span class="type">int</span> nR, <span class="type">int</span> pL, <span class="type">int</span> pR)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nL &gt; nR <span class="keyword">or</span> pL &gt; pR) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (pL == pR) <span class="keyword">return</span> <span class="built_in">chmax</span>(last_place[<span class="built_in">use_detector</span>(pL)], pL), <span class="built_in">void</span>();</span><br><span class="line">    <span class="type">int</span> pM = pL + pR &gt;&gt; <span class="number">1</span>, nM = <span class="built_in">use_detector</span>(pM);</span><br><span class="line">    <span class="built_in">chmax</span>(last_place[nM], pM);</span><br><span class="line">    <span class="built_in">cdq</span>(nL, nM<span class="number">-1</span>, pL, pM<span class="number">-1</span>), <span class="built_in">cdq</span>(nM, nR, pM+<span class="number">1</span>, pR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>實際上自己 random 的一些測資，大約會 query <span
class="math inline">\(7200 \sim 7300\)</span> 次。</p>
<h3 id="d---jelly-flavours-jelly">D - Jelly Flavours (<a
href="https://oj.uz/problem/view/IOI20_jelly">jelly</a>)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(11\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(24\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(9\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(10\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(14\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(32\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>有 <span class="math inline">\(n\)</span> 本相異的書，第 <span
class="math inline">\(i\)</span> 本書在商店 A 跟商店 B 分別賣 <span
class="math inline">\(a_i\)</span> 跟 <span
class="math inline">\(b_i\)</span> 元。你現在沒帶錢，但有 A 商店的 <span
class="math inline">\(x\)</span> 元折價券跟 B 商店的 <span
class="math inline">\(y\)</span>
元折價券，請求出你最多可以買幾本相異的書。</p>
<ul>
<li><span class="math inline">\(n \le 2000\)</span>。</li>
<li><span class="math inline">\(0 \le x, y \le 10\,000\)</span>。</li>
<li><span class="math inline">\(0 \le a_i, b_i \le
10\,000\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/440487">AC Solution</a></p>
<p>每個物品只有 3 種狀態：不選、選 Store A、選 Store B。Subtask 3
提供了很重要的想法，如果先對 <span class="math inline">\(a_i\)</span>
排序，之後會發現存在一個位置 <span class="math inline">\(p\)</span>
使在區間 <span class="math inline">\([\,0, p)\)</span> 的物品都會在
Store A 或 Store B 買；在區間 <span class="math inline">\([\,p,
N)\)</span> 的物品都會在 Store B 買或是不會買。</p>
<div class="note info"><details>
<summary>
<h4>
簡單的證明
</h4>
</summary>
以 A、B、X 代表在 Store A 買、在 Store B 買、不買的狀態。如果存在一個 A
在 X 後面 <span class="math inline">\([A, B, A, {\color{red}X}, B,
{\color{red}A}, X, B, X]\)</span>，那把 A 跟 X 交換一定更好。
</details>
</div>
<p>剩下就是 DP 了。你需要計算在一個前綴如何用 A 取代掉 B 來使剩下的 B
盡量小，這邊是一個簡單的背包問題，然後後綴就直接暴力計算 B 從小到大 B
可以買幾個。維護前綴是 <span
class="math inline">\(\mathcal{O}(x)\)</span>；維護後綴是 <span
class="math inline">\(\mathcal{O}(n \lg n)\)</span>。</p>
<p>總複雜度是 <span class="math inline">\(\mathcal{O}(nx + n^2 \lg
n)\)</span>。</p>
<h3 id="nhdk-ten-point-round-7-div.-1">NHDK Ten Point Round #7 (Div.
1)</h3>
<ul>
<li><a
href="https://codeforces.com/group/H0qY3QmnOW/contest/316436">Contest
link</a></li>
</ul>
<p>7/4
晚上又一次覺得沒事做，想說來找一場感覺不會太難的比賽來打，就選到了 NHDK
辦ㄉ TPR ㄌ。</p>
<p>題目基本上都蠻簡單的（？，花了兩個小時慢慢把他寫完，就去睡覺ㄌ。</p>
<hr />
<h2 id="day-1">Day 1</h2>
<ul>
<li><a href="https://oj.uz/problems/source/576">Judge</a></li>
<li><a href="https://youtu.be/GVPBfpvT6V0">Screencast</a></li>
</ul>
<p>開始之前先把兩天的題目都印好，因為開始之後就沒辦法跑出去印ㄌ。</p>
<h3 id="a---分發糖果-distributing-candies-candies">A - 分發糖果 /
Distributing Candies (<a
href="https://oj.uz/problem/view/IOI21_candies">candies</a>)</h3>
<p><span class="score_10">分數：<span
class="math inline">\(11\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(3\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(8\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(27\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(29\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(33\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>給定一長度為 <span class="math inline">\(n\)</span> 的陣列 <span
class="math inline">\(c\)</span> 跟 <span
class="math inline">\(q\)</span> 次操作，你需要對一個長度為 <span
class="math inline">\(n\)</span> 且初始值為 <span
class="math inline">\(0\)</span> 的陣列 <span
class="math inline">\(a\)</span> 執行操作：</p>
<ol type="1">
<li><span class="math inline">\(\forall i \in [l_j, r_j], \quad a_i =
\min\{c_i, a_i + v_j\}\)</span>（放糖果進盒子）；</li>
<li><span class="math inline">\(\forall i \in [l_j, r_j], \quad a_i =
\max\{0, a_i - v_j\}\)</span>（從盒子拿糖果）。</li>
</ol>
<p>最後需要輸出 <span class="math inline">\(a\)</span>。</p>
<ul>
<li><span class="math inline">\(n, q \le 200\,000\)</span>。</li>
<li><span class="math inline">\(1 \le c_i \le 10^9\)</span>。</li>
<li><span class="math inline">\(1 \le v_j \le 10^9\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/441424"><span
class="math inline">\(\mathcal{O}(nq)\)</span> brute force</a> # <a
href="https://oj.uz/submission/441429"><span class="math inline">\(v_j
&gt; 0\)</span></a> # <a href="https://oj.uz/submission/441562"><span
class="math inline">\((l_i, r_i) = (0, n-1)\)</span></a></p>
<p>看到題目的第一眼覺得是<a
href="https://codeforces.com/blog/entry/57319">吉如一線段樹</a>裸題（至少
Subtask 3（盒子容量都相同）是裸題），因為回想起第一次在 IOIC
刻他花了大約 6
小時，而且這題看起來要維護最大、次大、最小、次小，所以把這題放在最後想。</p>
<p>Subtask 1（<span class="math inline">\(n, q \le
2000\)</span>）是暴力，本來以為 Subtask
2（只有加值）要用線段樹，後來發現差分就好了 owo。拿到 <span
class="score_10"><span class="math inline">\(11\)</span>
分</span>之後，覺得好像對 Subtask
4（每次操作都是全域）有點想法，發現了一些性質：</p>
<p>首先，可以把整個陣列排序，然後你會發現：</p>
<ol type="1">
<li>每個盒子剩下的空位（<span class="math inline">\(c_i -
a_i\)</span>）非嚴格遞增；</li>
<li>每次 <span class="math inline">\(\texttt{Add}(l_j, r_j,
v_j)\)</span> 操作完會有且僅有一段前綴是滿的（<span
class="math inline">\(\exists\,p \Rightarrow (i \in [\,0, p)
\Longleftrightarrow a_i = c_i)\)</span>）；</li>
<li>每次 <span class="math inline">\(\texttt{Sub}(l_j, r_j,
v_j)\)</span> 操作完會有且僅有一段前綴是空的（<span
class="math inline">\(\exists\,p \Rightarrow (i \in [\,0, p)
\Longleftrightarrow a_i = 0)\)</span>）。</li>
</ol>
<p>接下來的要做的事會長這樣：</p>
<ol type="1">
<li>找到操作後全空（或全滿）的前綴 <span class="math inline">\([\,0,
p)\)</span>；</li>
<li>給 <span class="math inline">\([\,0, p)\)</span>
那段區間一個代表全空（或全滿）的 tag；</li>
<li>更新前綴 <span class="math inline">\([\,0, p)\)</span>
跟後面的交界處（<span class="math inline">\(a_{p-1}\)</span> 跟 <span
class="math inline">\(a_p\)</span>）的差值。</li>
</ol>
<div class="note success"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> lo = <span class="number">0</span>, hi = N, mi;</span><br><span class="line">    <span class="keyword">if</span> (V[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/// nothing or full ///</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">CheckVal</span>(N, i<span class="number">-1</span>) + V[i] &gt;= C[N].X) &#123;</span><br><span class="line">            <span class="built_in">RangeModify</span>(<span class="number">0</span>, N, <span class="number">-1</span>, i); <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">            mi = lo + hi &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">CheckVal</span>(mi, i<span class="number">-1</span>) + V[i] &gt;= C[mi].X) lo = mi + <span class="number">1</span>; <span class="comment">/// [0, mi] is full</span></span><br><span class="line">            <span class="keyword">else</span> hi = mi;                                         <span class="comment">/// [mi, N] is not full</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/// [0, lo) is full ///</span></span><br><span class="line">        <span class="built_in">PointModify</span>(lo, <span class="built_in">CheckVal</span>(lo, i<span class="number">-1</span>) - <span class="built_in">CheckVal</span>(lo<span class="number">-1</span>, i<span class="number">-1</span>));</span><br><span class="line">        <span class="built_in">RangeModify</span>(<span class="number">0</span>, lo<span class="number">-1</span>, <span class="number">-1</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/// nothing or empty ///</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>要找一個位置當下的值，就紀錄「上次變空（或變滿）是什麼時候」，再看那時候到現在的每次操作的
<span class="math inline">\(v_j\)</span> 的和就好了。</p>
<div class="note success"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">CheckVal</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> qID)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// push tags from root to idx ///</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/// pre_V[qID+1] - pre_V[last_change] ///</span></span><br><span class="line">    <span class="keyword">if</span> (seg[idx].last_type == <span class="string">&quot;Empty&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> pre_V[qID] - pre_V[seg[idx].last_change];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (seg[idx].last_type == <span class="string">&quot;Full&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> pre_V[qID] - pre_V[seg[idx].last_change] + C[idx].X;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>求答案就是最後再問一輪就好ㄌ。</p>
<div class="note success"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) ans[C[i].Y] = <span class="built_in">CheckVal</span>(i, Q);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>最慘的是因為這題實作的部份想太久，最後來不及 de 完 bug，在<a
href="https://youtu.be/GVPBfpvT6V0?t=18360">結束後 6 分鐘</a>才拿到
<span class="score_20"><span class="math inline">\(29\)</span>
分</span>，虧豹 QwQ。</p>
<h3 id="b---鑰匙-keys-keys">B - 鑰匙 / Keys (<a
href="https://oj.uz/problem/view/IOI21_keys">keys</a>)</h3>
<p><span class="score_30">分數：<span
class="math inline">\(37\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(9\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(11\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(17\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(30\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(33\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>有一座地牢，<span class="math inline">\(n\)</span>
個房間每間都有一把不盡相異的鑰匙 <span
class="math inline">\(r_i\)</span>，且 <span
class="math inline">\(m\)</span> 條雙向通道 <span
class="math inline">\((u_j, v_j)\)</span> 每條都有一顆需要鑰匙 <span
class="math inline">\(c_j\)</span>
才能開的鎖（不會消耗鑰匙），你要輸出從哪些房間出發可以到達的房間數量最少。</p>
<ul>
<li><span class="math inline">\(n, m \le 300\,000\)</span>。</li>
<li><span class="math inline">\(0 \le r_i, c_j &lt; n\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/441446"><span
class="math inline">\(\mathcal{O}(nm)\)</span> DFS</a></p>
<p>前 3 個 Subtask 都有 <span class="math inline">\(n, m \le
2000\)</span>，用 <span class="math inline">\(n\)</span> 次 DFS
就拿到了，因為之前在 <a
href="https://drive.google.com/file/d/1G5kHW5mN6tPeCqVI_QxrnF3GaT0U_CHT">TPOJ
#6 pE</a> 看過一樣的題目，所以就很順利的拿到這 <span
class="score_30"><span class="math inline">\(37\)</span> 分</span>。</p>
<p>接下來想了很久，對後面的其他 Subtask 怎麼做都毫無頭緒。</p>
<h3 id="c---噴泉公園-fountain-parks-parks">C - 噴泉公園 / Fountain Parks
(<a href="https://oj.uz/problem/view/IOI21_parks">parks</a>)</h3>
<p><span class="score_50">分數：<span
class="math inline">\(55\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(5\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(10\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(15\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(20\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(20\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(30\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>有 <span class="math inline">\(n\)</span> 座噴泉，第 <span
class="math inline">\(i\)</span> 座噴泉在 <span
class="math inline">\((x_i,
y_i)\)</span>，座標兩兩相異且必為偶數，你需要判斷可不可行並規劃一種道路構建跟長椅擺放方式使</p>
<ul>
<li>每條道路長度皆為 <span class="math inline">\(2\)</span>
且連接兩座噴泉；</li>
<li>所有噴泉必須被道路們連通；</li>
<li>每條道路都有一張相鄰的長椅面向他（長椅的座標需為奇數）；</li>
<li>兩張長椅不能被放在同個位置。</li>
</ul>
<!-- -->
<ul>
<li><span class="math inline">\(n \le 200\,000\)</span>。</li>
<li><span class="math inline">\(2 \le x_i, y_i \le
200\,000\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/441398"><span
class="math inline">\(2 \le x_i \le 4\)</span></a> # <a
href="https://oj.uz/submission/441994">No <span class="math inline">\(2
\times 2\)</span> square</a></p>
<p>因為這題看起來最有趣就第一個做ㄌ。前兩個 Subtask 都有 <span
class="math inline">\(2 \le x_i \le
4\)</span>，就算把所有可以連的邊都連起來也只會像下面那樣，一定有解。</p>
<p><img data-src="Z7wVLiu.png" style="width: auto; max-width: 150px"></p>
<p>接下來感覺 Subtask 4（只有一種蓋道路的方式）好像可做，不過感覺跟
Subtask 5（沒有任四個噴泉形成 <span class="math inline">\(2 \times
2\)</span> 的方格）蠻像，都不會有像下面兩條<span
style="color:orange">橘線</span>或<span
style="color:blue">藍線</span>的情況，於是就想出一個跟 <span
class="math inline">\(\bmod 4\)</span> 相關的作法：</p>
<p><img data-src="r26XQWf.png" style="width: auto; max-width: 120px"></p>
<p>先隨便建一棵樹，對所有的<span style="color:red">平行 <span
class="math inline">\(y\)</span> 軸的邊（紅邊）</span>把 <span
style="color:blue"><span class="math inline">\(x + y \equiv 2
\pmod{4}\)</span> 的椅子（藍椅）</span>指給他；對所有<span
style="color:lime">平行 <span class="math inline">\(x\)</span>
軸的邊（綠邊）</span>把 <span style="color:#FFBF00"><span
class="math inline">\(x + y \equiv 0 \pmod{4}\)</span>
的椅子（黃椅）</span>指給他。</p>
<p><img data-src="oDF75lk.png" style="width: auto; max-width: 400px"></p>
<p>因為不會有上面平行相鄰的狀況，所以不用擔心一張椅子被指到兩條平行的邊。</p>
<div class="note success"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (X[u[i]] == X[v[i]]) &#123;</span><br><span class="line">        <span class="type">int</span> midY = (Y[u[i]] + Y[v[i]]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ((X[u[i]] + <span class="number">1</span> + midY) % <span class="number">4</span> == <span class="number">2</span>) a[i] = X[u[i]] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> a[i] = X[u[i]] - <span class="number">1</span>;</span><br><span class="line">        b[i] = midY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Y[u[i]] == Y[v[i]]) &#123;</span><br><span class="line">        <span class="type">int</span> midX = (X[u[i]] + X[v[i]]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ((Y[u[i]] + <span class="number">1</span> + midX) % <span class="number">4</span> == <span class="number">0</span>) b[i] = Y[u[i]] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> b[i] = Y[u[i]] - <span class="number">1</span>;</span><br><span class="line">        a[i] = midX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>有這 <span style="score_40"><span class="math inline">\(40\)</span>
分</span>讓我放心了許多，可是感覺有很多人會的 Subtask 3（<span
class="math inline">\(2 \le x_i \le
6\)</span>）一直沒有想法，燒雞的以為是位元 DP owo。</p>
<h3 id="小結">小結</h3>
<ul>
<li>Day 1 總分：<span class="score_10"><span
class="math inline">\(11\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_30"><span
class="math inline">\(37\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_50"><span
class="math inline">\(55\)</span></span><span
class="math inline">\({}={}\)</span><span class="score_30"><span
class="math inline">\(103\)</span> 分</span></li>
<li>Day 1 排名：<span class="medal_cu"><span
class="math inline">\(106\)</span></span><span
class="math inline">\(/351\)</span></li>
</ul>
<p>因為在 IOI 當下也有看 scoreboard，所以清楚的記得有三位選手拿到 <span
class="score_30"><span class="math inline">\(38\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_30"><span
class="math inline">\(37\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_70"><span
class="math inline">\(70\)</span></span><span
class="math inline">\({}={}\)</span><span class="score_40"><span
class="math inline">\(145\)</span> 分</span>，本來想說拿到 gift 的 <span
class="score_20"><span class="math inline">\(29\)</span>
分</span>可以補上不太會寫的大資結，結果耍廢到什麼都沒有 QwQ。</p>
<p>開場打好模板，看了約半小時的題目，就開始寫水分ㄌ。我的策略是先給一題一個小時的時間寫，如果可以拿到精神分數就先換題。</p>
<p>在 C 跟 A 拿到水分之後意外有了 C Subtask 4+5
的想法，多花了一點時間把他寫完，再把 B
的水分拿掉之後總共的時間也才過一半而已，不過有了之前 vir JOISC
的經驗，我知道這之後我就會開始思考力下降，就算吃ㄌ一條巧克力也不會變好。果然，思考了一個小時，實作又花了一個半小時，剛剛好在結束之後作完。</p>
<p>希望明天的 Day 2 可以打好一點 owo，至少可以到銀牌線上ㄅ
&gt;////&lt;。</p>
<hr />
<h2 id="day-2">Day 2</h2>
<ul>
<li><a href="https://oj.uz/problems/source/577">Judge</a></li>
<li><a href="https://youtu.be/62C07VDg_1g">Screencast</a></li>
</ul>
<h3 id="a---dna-突變-mutating-dna-dna">A - DNA 突變 / Mutating DNA (<a
href="https://oj.uz/problem/view/IOI21_dna">dna</a>)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(21\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(22\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(13\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(28\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(16\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>給定兩個長度 <span class="math inline">\(n\)</span> 且只包含
<code>A</code>、<code>T</code>、<code>C</code> 的字串 <span
class="math inline">\(a, b\)</span>，接下來會有 <span
class="math inline">\(q\)</span> 次詢問，每次給一段區間 <span
class="math inline">\([x, y]\)</span>，你需要計算 <span
class="math inline">\(a[x..y]\)</span>
最少需要經過幾次「交換兩個字元的位置」來變成 <span
class="math inline">\(b[x..y]\)</span>。</p>
<ul>
<li><span class="math inline">\(n, q \le 100\,000\)</span>。</li>
<li><span class="math inline">\(0 \le x \le y \le n-1\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/442137">AC Solution</a></p>
<p>今年最水 IOI
題，一開始看錯題以為是「交換兩個<strong>相鄰</strong>字元的位置」，結果交上去
WA 才發現根本不需要那麼麻煩 QAQ。</p>
<p>發現之後就把他水掉了，大概只有 Div2B ~ Div2C
左右的難度吧，但是這時已經經過兩個小時了，慘。</p>
<h3 id="b---地牢遊戲-dungeons-game-dungeons">B - 地牢遊戲 / Dungeons
Game (<a
href="https://oj.uz/problem/view/IOI21_dungeons">dungeons</a>)</h3>
<p><span class="score_50">分數：<span
class="math inline">\(50\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(11\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(26\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(13\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(12\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(27\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(11\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>有 <span class="math inline">\((n+1)\)</span> 座地牢，其中編號 <span
class="math inline">\(i\)</span> <span class="math inline">\((0 \le i
\le n-1)\)</span> 的地牢有一位力量為 <span
class="math inline">\(s_i\)</span> 的對手，假設英雄現在在地牢 <span
class="math inline">\(x\)</span> 並擁有 <span
class="math inline">\(z\)</span> 的力量：</p>
<ul>
<li>如果 <span class="math inline">\(x = n\)</span>，遊戲結束；</li>
<li>如果 <span class="math inline">\(z \ge s_x\)</span>，則 <span
class="math inline">\(z \leftarrow z + s_x\)</span> 且 <span
class="math inline">\(x \leftarrow w_x\)</span>（<span
class="math inline">\(w_x &gt; x\)</span>）；</li>
<li>如果 <span class="math inline">\(z &lt; s_x\)</span>，則 <span
class="math inline">\(z \leftarrow z + p_x\)</span> 且 <span
class="math inline">\(x \leftarrow l_x\)</span>。</li>
</ul>
<p>你需要進行 <span class="math inline">\(q\)</span>
次模擬，每次給你英雄的初始位置 <span class="math inline">\(x\)</span>
跟初始力量 <span
class="math inline">\(z\)</span>，請求出當遊戲結束時英雄的力量。</p>
<ul>
<li><span class="math inline">\(n \le 400\,000\)</span>。</li>
<li><span class="math inline">\(q \le 50\,000\)</span>。</li>
<li><span class="math inline">\(1 \le s_i, p_i, z \le
10^7\)</span>。</li>
<li><span class="math inline">\(0 \le w_i, l_i \le n\)</span>。</li>
<li><span class="math inline">\(0 \le x &lt; n\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/442807">AC Solution</a> # <a
href="https://oj.uz/submission/442812"><span class="math inline">\(n \le
50\,000\)</span></a> # <a
href="https://oj.uz/submission/442814">Doubling on <span
class="math inline">\(s_i = p_i\)</span></a> # <a
href="https://oj.uz/submission/442835"><span class="math inline">\(\#\{x
: x \in s\} = 1\)</span></a> # <a
href="https://oj.uz/submission/442827"><span class="math inline">\(\#\{x
: x \in s\} \le 5\)</span></a> # <a
href="https://oj.uz/submission/442142"><span
class="math inline">\(\mathcal{O}(q(n + C))\)</span> brute force</a></p>
<p>在寫這題之前先想到 Subtask 2（<span class="math inline">\(s_i =
p_i\)</span>）有個有趣的性質可以倍增，那就是如果英雄某一場打輸了，那他的力量至少會變成兩倍，所以就做
<span class="math inline">\(\mathcal{O}(\lg n)\)</span>
次「最多可以連勝到哪裡」就會到終點了，複雜度大約是 <span
class="math inline">\(\mathcal{O}(\lg n \lg
C)\)</span>。把暴力寫完之後也把倍增寫掉了，這時才發現倍增的作法可以一次過前兩筆
Subtask www。</p>
<p>接著還剩下約 70 分鐘，接下來只能想 Subtask 3（<span
class="math inline">\(\#\{x : x \in s\} = 1\)</span>）了，因為 Subtask 3
<span class="math inline">\(\subsetneq\)</span> Subtask 4 <span
class="math inline">\(\subsetneq\)</span> Subtask 5 <span
class="math inline">\(\subsetneq\)</span> Subtask 6。有了剛剛 Subtask 2
的倍增想法，這邊就變的很好想了，只要同樣用倍增維護「力量 <span
class="math inline">\(&lt; s_0\)</span> 走 <span
class="math inline">\(2^i\)</span> 步會到哪裡」跟「力量 <span
class="math inline">\(\ge s_0\)</span> 走 <span
class="math inline">\(2^i\)</span> 步會到哪裡」就能 AC
了，應該也很好寫......</p>
<p>結果我因為開的陣列層數剛剛好只有 <span
class="math inline">\(\lceil{\lg(50\,000)}\rceil = 16\)</span>
層，最後一層是代表可以一次走 <span class="math inline">\(2^{15} =
32\,768\)</span> 步的值，結果在某些測資會爛掉，花了 10
分鐘寫完卻花了一小時 debug，最後還是真的找不出 bug
於是就倍增做完亂暴力，意外的在 4:56:56 拿到這唬爛來的 <span
class="score_10"><span class="math inline">\(13\)</span>
分</span>。真是不知道該感到笑還是該哭呢 OwO。</p>
<p>話說，這題是前國手何達睿學長出的ㄛ
&gt;////&lt;，最後面有他的心得文喵。</p>
<h3 id="c---位元移位暫存器-bit-shift-registers-registers">C -
位元移位暫存器 / Bit Shift Registers (<a
href="https://oj.uz/problem/view/IOI21_registers">registers</a>)</h3>
<p><span class="score_10">分數：<span
class="math inline">\(10\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(10\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(11\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(12\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(25\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(13\)</span></span>$/ $<span
class="score_na"><span class="math inline">\(29\)</span></span><span
class="math inline">\()\)</span></p>
<div class="note info no-icon"><p>你有 <span class="math inline">\(100\)</span> 個容量 <span
class="math inline">\(2000\)</span> bits 的 register <span
class="math inline">\(r_0 \sim
r_{m-1}\)</span>，你可以進行以下操作：</p>
<ul>
<li><span class="math inline">\(\texttt{move}(t, y)\)</span>：<span
class="math inline">\(r_t = r_y\)</span>；</li>
<li><span class="math inline">\(\texttt{store}(t, v)\)</span>：<span
class="math inline">\(r_t = v\)</span>；</li>
<li><span class="math inline">\(\texttt{and}(t, x, y)\)</span>：<span
class="math inline">\(r_t = r_x \land r_y\)</span>；</li>
<li><span class="math inline">\(\texttt{or}(t, x, y)\)</span>：<span
class="math inline">\(r_t = r_x \lor r_y\)</span>；</li>
<li><span class="math inline">\(\texttt{xor}(t, x, y)\)</span>：<span
class="math inline">\(r_t = r_x \oplus r_y\)</span>；</li>
<li><span class="math inline">\(\texttt{not}(t, x)\)</span>：<span
class="math inline">\(r_t = \neg r_x\)</span>；</li>
<li><span class="math inline">\(\texttt{left}(t, x, p)\)</span>：<span
class="math inline">\(r_t = r_x \ll p\)</span>；</li>
<li><span class="math inline">\(\texttt{right}(t, x, p)\)</span>：<span
class="math inline">\(r_t = r_x \gg p\)</span>；</li>
<li><span class="math inline">\(\texttt{add}(t, x, y)\)</span>：<span
class="math inline">\(r_t = r_x + r_y\)</span>。</li>
</ul>
<p>一開始有 <span class="math inline">\(n\)</span> 個 <span
class="math inline">\(k\)</span>-bit 整數 <span
class="math inline">\(c_0 \sim c_{n-1}\)</span> 依序儲存在 <span
class="math inline">\(r_0\)</span>，其他所有 bits 皆為 <span
class="math inline">\(0\)</span>，你可以進行最多 <span
class="math inline">\(q\)</span> 次操作使：</p>
<ul>
<li><span class="math inline">\(s = 0\)</span>：<span
class="math inline">\(r_0\)</span> 在 <span class="math inline">\([\,0,
k)\)</span> 區間的 bits 需要是 <span
class="math inline">\(\min\limits_{0 \le i \le
n-1}\{c_i\}\)</span>；</li>
<li><span class="math inline">\(s = 1\)</span>：<span
class="math inline">\(r_0\)</span> 在 <span class="math inline">\([\,i
\cdot k, (i+1) \cdot k)\)</span> 區間的 bits 需要是 <span
class="math inline">\(c\)</span> 裡面第 <span
class="math inline">\(i\)</span> 小的數字。</li>
</ul>
<p>其他不在要求區間裡的 bit 可以是任意值。</p>
<ul>
<li>限制（<span class="math inline">\(s = 0\)</span>）：<span
class="math inline">\(n \le 100\)</span>、<span class="math inline">\(k
\le 10\)</span>、<span class="math inline">\(q = 150\)</span>。</li>
<li>限制（<span class="math inline">\(s = 1\)</span>）：<span
class="math inline">\(n \le 100\)</span>、<span class="math inline">\(k
\le 10\)</span>、<span class="math inline">\(q = 4000\)</span>。</li>
</ul>
</div>
<p><a href="https://oj.uz/submission/442197"><span
class="math inline">\(s = 0\)</span>、<span class="math inline">\(n =
2\)</span>、<span class="math inline">\(k \le 2\)</span>、<span
class="math inline">\(q = 1000\)</span></a></p>
<p>光是題目敘述就有整整 6 頁，而且他的左移和右移的方向跟 grader
輸出的方向又讓我頭昏腦脹，很久才理解要怎麼實作出東西來。</p>
<p>根據我在「數位電路設計」<del>學習</del>耍廢的經驗，對兩個 <span
class="math inline">\(2\)</span>-bit 的數字 <span
class="math inline">\(a, b\)</span>，有以下式子：</p>
<p><span class="math display">\[\min\{a, b\}_1 = a_1 \cdot
(\overline{a_1} \cdot \overline{a_0} + b_1 \cdot b_0 + \overline{a_1}
\cdot b_1) + b_1 \cdot \overline{(\overline{a_1} \cdot \overline{a_0} +
b_1 \cdot b_0 + \overline{a_1} \cdot b_1)} \notag\]</span></p>
<p><span class="math display">\[\min\{a, b\}_0 = a_0 \cdot
(\overline{a_1} \cdot \overline{a_0} + b_1 \cdot b_0 + \overline{a_1}
\cdot b_1) + b_0 \cdot \overline{(\overline{a_1} \cdot \overline{a_0} +
b_1 \cdot b_0 + \overline{a_1} \cdot b_1)} \notag\]</span></p>
<p>我就花了一個多小時在把這個寫出來，結果還用了 <span
class="math inline">\(26\)</span> 次操作，只有拿到 <span
class="score_10"><span class="math inline">\(10\)</span>
分</span>，然後我就放棄了。</p>
<h3 id="小結-1">小結</h3>
<ul>
<li>Day 2 總分：<span class="score_ac"><span
class="math inline">\(100\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_50"><span
class="math inline">\(50\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_10"><span
class="math inline">\(10\)</span></span><span
class="math inline">\({}={}\)</span><span class="score_50"><span
class="math inline">\(160\)</span> 分</span></li>
<li>Day 2 排名：<span class="medal_cu"><span
class="math inline">\(105\)</span></span><span
class="math inline">\(/351\)</span></li>
</ul>
<p>多虧有印出題目，不然電腦先卡了大約 20 分鐘應該就會先死去ㄌ www。</p>
<p>策略跟 Day 1 是一樣的，但是因為 dna 跟 register
都太特別了，導致今天根本沒能按照計畫進行。</p>
<p>嘛，題目應該要多讀幾次的，最好可以把自己的理解寫出來再對比一次，不然在「看錯題目」這種小錯誤上花整整一小時還是很燒雞ㄉ，還有有時候遇到真的超級麻煩的題目應該先不要管他，<del>只要祈禱大家都拿不到分數就好了</del>。</p>
<p>今天整體狀況比較平靜，多虧 dna
超水，讓我沒有遇到「會做卻沒時間做」的狀況（也有我直接把 register
當成實作題的原因啦），Day 2 花在<del>寫 code</del> debug 的時間就比 Day
1 多出不少呢，能跟 Day 1 有著幾乎相同的名次也很令我意外吶。</p>
<hr />
<h2 id="總結">總結</h2>
<ul>
<li>總分：<span class="score_10"><span
class="math inline">\(11\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_30"><span
class="math inline">\(37\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_50"><span
class="math inline">\(55\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_ac"><span
class="math inline">\(100\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_50"><span
class="math inline">\(50\)</span></span><span
class="math inline">\({}+{}\)</span><span class="score_10"><span
class="math inline">\(10\)</span></span><span
class="math inline">\({}={}\)</span><span class="score_40"><span
class="math inline">\(263\)</span> 分</span></li>
<li>排名：<span class="medal_cu"><span
class="math inline">\(104\)</span></span><span
class="math inline">\(/351\)</span></li>
<li>牌線：<span class="medal_au"><span
class="math inline">\(373\)</span></span><span
class="math inline">\(/\)</span><span class="medal_ag"><span
class="math inline">\(289\)</span></span><span
class="math inline">\(/\)</span><span class="medal_cu"><span
class="math inline">\(203\)</span></span></li>
</ul>
<p>如你所見，Day 1、Day 2、總排名呈等差數列，而且有越來越好的趨勢
www。如果 Day 1 再多 6 分鐘就有壓線銀牌ㄌ QwQ。</p>
<p>目前覺得最大的缺陷是沒有調整好自己的心態，對分數沒有執著，有點把這種
virtual 當成在玩的感覺（？</p>
<p>現在，平常在打 ICPC
的時候也是這樣，甚至連正式比賽都有點提不起勁。如果沒辦法對得獎、對分數有執著，基本上就只能當個休閒選手了吧......</p>
<p>希望這個暑假可以讓我重新拿回學習新東西的熱情ㄅ &gt;////&lt;。</p>
<hr />
<ul>
<li><a href="https://www.wiwiho.me/2021/07/01/ioi2021/">現任國手 WiwiHo
的比賽心得</a></li>
<li><a
href="https://hackmd.io/@E3-nUNPsRmy1gPXmWIt8jQ/r1yMcVOhu">前國手何達睿學長的
dungeons 出題心得</a></li>
</ul>
]]></content>
      <categories>
        <category>競程</category>
        <category>比賽心得</category>
      </categories>
      <tags>
        <tag>IOI</tag>
      </tags>
  </entry>
  <entry>
    <title>MHC 2022 Qualification 比賽心得</title>
    <url>/cp/contests/mhc22-0/</url>
    <content><![CDATA[<p>今年開始 Facebook Hacker Cup 改叫 Meta Hacker
Cup，瞬間感覺變得高大上了 (X)，不過現在聽到 MHC
的簡寫完全無法直接反應過來 www。</p>
<span id="more"></span>
<div class="note primary"><p>如果你沒有打過 Meta Hacker Cup，可以參考看看
<a href="https://hackmd.io/@SorahISA-OIer/r1C5ZsT4F">這篇介紹文</a>。</p>
</div>
<h2 id="前言">前言</h2>
<p>雖然 Qualification 總共有三天、要什麼時候打都可以、也只要 AC
一題就能晉級，但是如果想要拿到高名次反而就只能選這種比較少電神會認真打的比賽了
www。</p>
<p>於是，目標就成形了：</p>
<ul>
<li>在 8/27 01:00 開始做題</li>
<li>把能寫的都寫完，能唬爛的都唬爛完
<ul>
<li>目標是在三個小時內全部 submit 成功</li>
<li><del>吃 FST 再說</del></li>
</ul></li>
<li>拿到盡量高的排名</li>
</ul>
<hr />
<h2 id="qualification-round">Qualification Round</h2>
<ul>
<li><a
href="https://www.facebook.com/codingcompetitions/hacker-cup/2022/qualification-round">Judge</a></li>
<li><a href="https://youtu.be/hsWBNidLFqY">Screencast</a></li>
</ul>
<p>因為是以破台為目標，所以基本上就是按照順序開題。開場先花了兩分鐘把東西整理好，就開始看題了～</p>
<h3 id="a.-second-hands">A. Second Hands</h3>
<p><span class="score_ac"><span class="math inline">\(9\)</span>
分</span> (6:17)</p>
<div class="note info no-icon"><p>你要把 <span class="math inline">\(N\)</span> 個正整數 <span
class="math inline">\(S_1, S_2, \ldots, S_N\)</span>
分成兩堆，使得兩堆的大小都 <span class="math inline">\(\le K\)</span>
且各自都不能包含重複的數字。<br/> 只要輸出 <code>YES</code> 或
<code>NO</code>，不用構造解法。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 90\)</span>。</li>
<li><span class="math inline">\(1 \le N, K \le 100\)</span>。</li>
<li><span class="math inline">\(1 \le S_i \le 100\)</span>（<span
class="math inline">\(1 \le i \le N\)</span>）。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0A.cpp">AC
Solution</a></p>
<p>直觀的想法就是把出現兩次的數字都分開放，有出現三次以上的數字或是
<span class="math inline">\(N &gt; 2K\)</span> 就是
<code>NO</code>。</p>
<p>稍微想了一下就發現不用真的放數字，只要上面 <code>NO</code>
的條件不符合就會有解。</p>
<h3 id="b1.-second-friend">B1. Second Friend</h3>
<p><span class="score_ac"><span class="math inline">\(9\)</span>
分</span> (30:18)</p>
<div class="note info no-icon"><p>在 <span class="math inline">\(R \times C\)</span> 的格子裡有一些道路
<code>.</code> 跟樹木
<code>^</code>，你要在道路上種一些樹使得每一棵樹的四方位相鄰格子都只少有兩棵樹。<br/>
如果有解請輸出構造方法。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 85\)</span>。</li>
<li><span class="math inline">\(1 \le R, C \le 100\)</span>。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0B.cpp">AC
Solution</a></p>
<p>我看到最上面說 B2 <span class="math inline">\(\supseteq\)</span> B1
之後就直接跳到 B2 了，所以我沒有看這題。</p>
<h3 id="b2.-second-second-friend">B2. Second Second Friend</h3>
<p><span class="score_ac"><span class="math inline">\(17\)</span>
分</span> (31:06)</p>
<div class="note info no-icon"><p>接 B1，在 <span class="math inline">\(R \times C\)</span>
的格子裡有一些道路 <code>.</code> 跟樹木 <code>^</code> <strong>跟石頭
<code>#</code></strong>。<br/></p>
<ul>
<li>測資數量<span class="math inline">\({} = 80\)</span>。</li>
<li><span class="math inline">\(1 \le R, C \le
\mathbf{3000}\)</span>。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0B.cpp">AC
Solution</a></p>
<p>第一眼的感覺是填滿會最好，不過因為有些位置會被石頭擋到只剩下一個
<em>氣</em>（定義一個位置的 <em>氣</em>
是他四方位相鄰的格子中可以種樹的位置數量），而那些只剩下 <span
class="math inline">\(0 \sim 1\)</span>
個氣的位置又會讓周圍的氣減少，於是要使用 DFS 來找所有會影響的位置。</p>
<p>寫了一堆 bug 讓我多花了 9 分鐘
QwQ。像是一開始把氣的初始值定義為周圍是道路或樹木的數量，結果 DFS
時又會把石頭周圍的氣都 <span
class="math inline">\(-1\)</span>，就導致石頭被扣兩次。</p>
<p>上傳的時候發現會燒雞，感覺是檔案太大的問題？於是就按照他們說的發了個
Clarification 附上 code 跟輸出 .zip 檔。</p>
<p>這時候我才發現每一題的名稱都有 Second www。</p>
<h3 id="c1.-second-meaning">C1. Second Meaning</h3>
<p><span class="score_ac"><span class="math inline">\(14\)</span>
分</span> (43:27)</p>
<div class="note info no-icon"><p>有一個神秘的語言，它總共有 <span class="math inline">\(N\)</span>
種符號，現在你希望只使用 <code>.</code> 跟 <code>-</code>
壓縮這個語言的任何訊息。<br/> 現在要求你第一種符號一定要壓縮成 <span
class="math inline">\(C_1\)</span>，請求出任何一組 <span
class="math inline">\(C_2, C_3, \ldots, C_N\)</span> 使得所有由
<code>.</code> 跟 <code>-</code> 構成的訊息都只有 <span
class="math inline">\(0\)</span> 或 <span
class="math inline">\(1\)</span> 種解讀方式。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 100\)</span>。</li>
<li><span class="math inline">\(2 \le N \le 100\)</span>。</li>
<li><span class="math inline">\(1 \le |C_1| \le 100\)</span>。</li>
<li><span class="math inline">\(1 \le |C_i| \le 200\)</span>（<span
class="math inline">\(2 \le i \le N\)</span>）。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0C.cpp">AC
Solution</a></p>
<p>第一個想法是「只要所有符號壓縮後的長度都一樣就不會出現歧異」，不過給你的
<span class="math inline">\(C_1\)</span> 可能會超短（<span
class="math inline">\(\le 6\)</span>）讓我們沒辦法弄出 <span
class="math inline">\(N\)</span> 個相異字串。</p>
<p>那不如就把 <span class="math inline">\(C_1\)</span> 獨立出來看？讓
<span class="math inline">\(C_1\)</span>
的開頭跟其他人都不一樣，這樣讀到 <span
class="math inline">\(C_1[0]\)</span> 就知道是 <span
class="math inline">\(C_1\)</span>；讀到不是 <span
class="math inline">\(C_1[0]\)</span> 就知道是 <span
class="math inline">\(C_2, C_3, \ldots, C_N\)</span>，再讓 <span
class="math inline">\(C_2, C_3, \ldots, C_N\)</span> 的長度都相同就能把
<span class="math inline">\(C_1\)</span> 分出來了！</p>
<h3 id="c2.-second-second-meaning">C2. Second Second Meaning</h3>
<p><span class="score_ac"><span class="math inline">\(18\)</span>
分</span> (43:44)</p>
<div class="note info no-icon"><p>接 C1。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 95\)</span>。</li>
<li><span class="math inline">\(2 \le N \le 100\)</span>。</li>
<li><span class="math inline">\(1 \le |C_1| \le 100\)</span>。</li>
<li><span class="math inline">\(1 \le |C_i| \le
\mathbf{10}\)</span>（<span class="math inline">\(2 \le i \le
N\)</span>）。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0C.cpp">AC
Solution</a></p>
<p>本來想說 C2 是給你 <span class="math inline">\(C_1, C_2, \ldots,
C_K\)</span> 求 <span class="math inline">\(C_{K+1}, C_{K+2}, \ldots,
C_N\)</span>（沒看題目被抓到），結果只是限制輸出長度要 <span
class="math inline">\(\le 10\)</span>，直接一起水掉 &gt;////&lt;。</p>
<p>C1 跟 C2 都上傳完之後看了一下輸出檢查有沒有弄錯檔案，結果發現我的
<code>Case #x:</code> 後面沒有換行，嚇死。</p>
<p>不過 validation 都有過，應該沒有差ㄅ？反正我又重新傳了一次。</p>
<blockquote>
<p>為什麼不要出到 <span class="math inline">\(|C_i| \le 7\)</span> 呢
OwO。</p>
</blockquote>
<h3 id="d.-second-flight">D. Second Flight</h3>
<p><span class="score_ac"><span class="math inline">\(33\)</span>
分</span> (91:40)</p>
<div class="note info no-icon"><p>有 <span class="math inline">\(N\)</span> 個城市，城市之間以 <span
class="math inline">\(M\)</span> 個航班 <span
class="math inline">\((A_i, B_i, C_i)\)</span> 連通。<br/>
每個航班在一天內會發 <span class="math inline">\(4\)</span> 班飛機，早晚
<span class="math inline">\(A_i \to B_i\)</span> 跟 <span
class="math inline">\(B_i \to A_i\)</span> 都各有一班，可以載 <span
class="math inline">\(C_i\)</span> 個 <strong>t</strong>ourists。<br/>
接著你會詢問 <span class="math inline">\(Q\)</span> 次 <span
class="math inline">\((X_j,
Y_j)\)</span>：在一天之內最多有多少人可以從城市 <span
class="math inline">\(X_j\)</span> 前往 <span
class="math inline">\(Y_j\)</span>。注意一個乘客一天之內最多可以搭乘兩個航班（早晚各一個）。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 70\)</span>。</li>
<li><span class="math inline">\(1 \le N, M, Q \le
200\,000\)</span>。</li>
<li><span class="math inline">\(\sum\limits_{所有測資}{Q} \le
5\,000\,000\)</span>。</li>
<li><span class="math inline">\(1 \le A_i, B_i \le N\)</span>（<span
class="math inline">\(1 \le i \le M\)</span>）。</li>
<li>保證 <span class="math inline">\(A_i \ne
B_i\)</span>，且所有<strong>無序數對</strong> <span
class="math inline">\((A_i, B_i)\)</span> 皆相異（<span
class="math inline">\(1 \le i \le M\)</span>）。</li>
<li><span class="math inline">\(1 \le C_i \le 10^9\)</span>（<span
class="math inline">\(1 \le i \le M\)</span>）。</li>
<li><span class="math inline">\(1 \le X_j, Y_j \le N\)</span>（<span
class="math inline">\(1 \le j \le Q\)</span>）。</li>
<li>保證 <span class="math inline">\(X_j \ne Y_j\)</span>（<span
class="math inline">\(1 \le j \le Q\)</span>）。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0D-1.cpp">AC
Solution (<span class="math inline">\(\texttt{bitset}\)</span>)</a> # <a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-0D-2.cpp">AC
Solution (<span
class="math inline">\(\texttt{unordered_map}\)</span>)</a></p>
<p>一開始覺得跟最大流有關，不過發現只要看 <span
class="math inline">\((X_j, Y_j)\)</span> 有沒有邊以及枚舉中間點 <span
class="math inline">\(Z_j\)</span> 計算 <span
class="math inline">\(\min\left\{C_{(X_j, Z_j)}, C_{(Z_j,
Y_j)}\right\}\)</span> 就能得到答案，我就覺得與其好好想解不如直接寫暴力
www。</p>
<p>不過 <span class="math inline">\(\mathcal{O}(QN)\)</span>
還是太大了，就算暴力也應該跑不完。</p>
<p>我決定來試試一個簡單的簡化法：把詢問過的答案存起來，並每次枚舉 <span
class="math inline">\(X_j\)</span> 跟 <span
class="math inline">\(Y_j\)</span> 度數小的去詢問大的有沒有。</p>
<p>把度數前 <span
class="math inline">\(\mathcal{O}\left(\sqrt{N}\right)\)</span>
大的點的鄰居存成 <code>bitset</code> 以求 <span
class="math inline">\(\mathcal{O}(1)\)</span> 查詢，如果 <span
class="math inline">\(X_j\)</span> 跟 <span
class="math inline">\(Y_j\)</span>
都是度數小的那群就直接線性掃過去（先把鄰居按照編號排序）。這樣複雜度就會變成
<span
class="math inline">\(\mathcal{O}\left(Q\sqrt{N}\right)\)</span>。</p>
<blockquote>
<p>其實是 <span class="math inline">\(\mathcal{O}\left(M
\sqrt{Q}\right)\)</span>，我不會算複雜度 QwQ。</p>
</blockquote>
<div class="note success"><details>
<summary>
<h4>
複雜度證明
</h4>
</summary>
<p><a href="https://www.facebook.com/codingcompetitions/hacker-cup/2022/qualification-round/problems/D/solution">官方有提供證明（最下面
Solution
2）</a>，不過有個更簡單的作法（<a href="https://codeforces.com/blog/entry/106451?#comment-947999">Credit
to smax</a>）：</p>
<ul>
<li>首先，對於出現過的 <span class="math inline">\((X_j, Y_j)\)</span>
的回答都是 <span class="math inline">\(\mathcal{O}(1)\)</span>
的，因為有用 <code>unordered_map</code> 存起來。</li>
<li>以下假設有 <span class="math inline">\(\text{deg}(X_j) \le
\text{deg}(Y_j)\)</span>。</li>
<li>定義一個 threshold <span class="math inline">\(B\)</span>，把度數
<span class="math inline">\(\ge B\)</span> 的叫做阿姨，<span
class="math inline">\(&lt; B\)</span> 的叫ㄌㄌ。
<ul>
<li>如果 <span class="math inline">\(X_j\)</span>
是ㄌㄌ：&gt;////&lt;。因為ㄌㄌ的複雜度夠小，只有 <span
class="math inline">\(\mathcal{O}(B)\)</span>。</li>
<li>如果 <span class="math inline">\(X_j\)</span> 是阿姨：頂多只有 <span
class="math inline">\(\mathcal{O}\left(\frac{M}{B}\right)\)</span>
個阿姨，所以只會遇到至多 <span
class="math inline">\(\mathcal{O}\left(\frac{M^2}{B^2}\right)\)</span>
次。
<ul>
<li><span class="math inline">\(X_j\)</span> 是阿姨 <span
class="math inline">\(\implies\)</span> <span
class="math inline">\(Y_j\)</span> 是阿姨。</li>
<li>只考慮不重複的詢問，因為有把回答存起來。</li>
</ul></li>
</ul></li>
<li>所有遇到ㄌㄌ的複雜度加起來是 <span
class="math inline">\(\mathcal{O}(QB)\)</span>；所有遇到阿姨的複雜度加起來是
<span class="math inline">\(\mathcal{O}(\frac{M^2}{B^2} \cdot
B)\)</span>。</li>
<li>取 <span class="math inline">\(B = \frac{M}{\sqrt{Q}}\)</span>
可以讓複雜度達到最小的 <span class="math inline">\(\mathcal{O}\left(M
\sqrt{Q}\right)\)</span>。</li>
</ul>
</details>
</div>
<blockquote>
<p>寫到這裡我才發現其實把 <code>pair&lt;int, int&gt;</code> 壓成
<code>int64_t</code> 就可以用 <code>unordered_map</code> 了。<br/> 然後
<code>bitset</code> 跟整個 <code>adj[]</code> 也都可以被
<code>unordered_map</code> 取代掉，我 <code>bitset</code> 中毒 QwQ。</p>
</blockquote>
<p>光是 validation 就跑半分鐘了，所幸正式的 input
也大約兩分鐘就跑完了，不知道筆電如果開風扇會不會跑快一點。</p>
<blockquote>
<p>賽後才意識到 D 的輸出足足有 36 MB，不知道為什麼反而上傳的了？</p>
</blockquote>
<blockquote>
<p>做法可以參考
<a href="https://youtu.be/AbF6-TtkPLs?t=468">官方的影片解說</a>，我把上面的
Solution 1 改成 Solution 2 之後就跟其中一個官解幾乎一樣了。</p>
</blockquote>
<hr />
<h2 id="總結">總結</h2>
<ul>
<li>分數：<span class="score_ac"><span
class="math inline">\(100\)</span></span><span class="math inline">\(/
100\)</span> 分</li>
<li>排名：<span class="medal_au"><span
class="math inline">\(11\)</span></span><span class="math inline">\(/
27\,603\)</span> 名</li>
</ul>
<p><img data-src="scoreboard.png" width="90%"></p>
<p>果然拿到了超高的名次，感覺 C 意外的水，而且 D
看題解才發現根號就是官解的複雜度，有種失望的感覺... 本來希望看到神奇的帶
<span class="math inline">\(\log\)</span> 作法的。</p>
<p>能用原定時間的一半多一點點破台是我沒想過的，不過自己感覺還有許多可以進步的地方<del>（像是剪指甲）</del>，接下來可能還有許多題目要出，剩下的就等
Round 1 再說ㄅ。</p>
<div class="note primary"><ul>
<li>下一篇：<a href="../mhc22-1">Round 1</a></li>
</ul>
</div>
]]></content>
      <categories>
        <category>競程</category>
        <category>比賽心得</category>
      </categories>
      <tags>
        <tag>MHC</tag>
      </tags>
  </entry>
  <entry>
    <title>MHC 2022 Round 1 比賽心得</title>
    <url>/cp/contests/mhc22-1/</url>
    <content><![CDATA[<p>最近要開學了，交大 9/8 才能開始搬進宿舍，然後就撞連假又遇到颱風
QwQ。</p>
<p>因為這天（9/11）剛好要搬行李到學校，七點多就要起床，所以沒辦法好好打完。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>前言都寫在前面了耶～</p>
<h2 id="round-1">Round 1</h2>
<ul>
<li><a
href="https://www.facebook.com/codingcompetitions/hacker-cup/2022/round-1">Judge</a></li>
<li>Maybe no screencast</li>
</ul>
<h3 id="a1.-consecutive-cuts---chapter-1">A1. Consecutive Cuts - Chapter
1</h3>
<p><span class="score_ac"><span class="math inline">\(10\)</span>
分</span> (91:44)</p>
<div class="note info no-icon"><p>定義一次「切牌」的動作是把撲克牌分成非空的兩堆，再交換順序疊回去。<br>
現在給定 <span class="math inline">\(N\)</span> 張撲克牌由上而下的數字
<span class="math inline">\(A_1, A_2, \ldots,
A_N\)</span>，請問你能不能利用恰好 <span
class="math inline">\(K\)</span> 次切牌讓牌堆由上而下變成 <span
class="math inline">\(B_1, B_2, \ldots, B_N\)</span> 的樣子？</p>
<ul>
<li>測資數量<span class="math inline">\({} = 200\)</span>。</li>
<li><span class="math inline">\(2 \le N \le 500\,000\)</span>。</li>
<li><span class="math inline">\(\sum\limits_{所有測資}{N} \le
5\,000\,000\)</span>。</li>
<li><span class="math inline">\(0 \le K \le 10^9\)</span>。</li>
<li><span class="math inline">\(1 \le A_i, B_i \le N\)</span>（<span
class="math inline">\(1 \le i \le N\)</span>）。</li>
<li><span class="math inline">\(A\)</span> 跟 <span
class="math inline">\(B\)</span> 都是 <span class="math inline">\(1, 2,
\ldots, N\)</span> 的排列。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-1A.cpp">AC
Solution</a></p>
<p>因為只做 A1 不能晉級，所以我直接去看 A2。</p>
<h3 id="a2.-consecutive-cuts---chapter-2">A2. Consecutive Cuts - Chapter
2</h3>
<p><span class="score_ac"><span class="math inline">\(16\)</span>
分</span> (93:03)</p>
<div class="note info no-icon"><p>定義一次「切牌」的動作是把撲克牌分成非空的兩堆，再交換順序疊回去。<br>
現在給定 <span class="math inline">\(N\)</span> 張撲克牌由上而下的數字
<span class="math inline">\(A_1, A_2, \ldots,
A_N\)</span>，請問你能不能利用恰好 <span
class="math inline">\(K\)</span> 次切牌讓牌堆由上而下變成 <span
class="math inline">\(B_1, B_2, \ldots, B_N\)</span> 的樣子？</p>
<ul>
<li>測資數量<span class="math inline">\({} = 205\)</span>。</li>
<li><span class="math inline">\(2 \le N \le 500\,000\)</span>。</li>
<li><span class="math inline">\(\sum\limits_{所有測資}{N} \le
7\,000\,000\)</span>。</li>
<li><span class="math inline">\(0 \le K \le 10^9\)</span>。</li>
<li><span class="math inline">\(1 \le A_i, B_i \le
\mathbf{10^9}\)</span>（<span class="math inline">\(1 \le i \le
N\)</span>）。</li>
<li><strong><span class="math inline">\(\mathbf{A}\)</span> 跟 <span
class="math inline">\(\mathbf{B}\)</span> 是彼此的排列。</strong></li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-1A.cpp">AC
Solution</a></p>
<p>看到的當下就發現是循環字串匹配，也就是
<a href="https://oi-wiki.org/string/minimal-string/">最小表示法</a>
的裸題。</p>
<p>不過在 <span class="math inline">\(N = 2\)</span> 跟 <span
class="math inline">\(K = 0, 1\)</span> 時好像需要特判，有點噁心
._.。</p>
<p>因為想要自己寫寫看，於是我就手刻了 <span
class="math inline">\(\mathcal{O}(N \lg^2{N})\)</span> 的 suffix
array，大約在 35 分鐘時刻完，特判這幾種 case 又寫了 10 分鐘。</p>
<p>不過很慘的是複雜度太爛了，在 validation input
跑了兩分鐘都還沒有出來，我只好去<del>偷</del>利用 BBQube codebook 的
SA-IS 來算，過了一陣子之後發現我看不懂 SA-IS 所以不會把它改成我要的樣子
QwQ。</p>
<p>最後我決定直接拿 OI-Wiki 上的模板來用，就成功過了！</p>
<blockquote>
<p>直到比賽結束我才發現我漏看「<span class="math inline">\(A\)</span> 跟
<span class="math inline">\(B\)</span>
是彼此的排列」的限制，讓我多刻了幾行特判。</p>
</blockquote>
<blockquote>
<p>話說這題好多人吃 FST 喔 OwO。</p>
</blockquote>
<h3 id="b1.-watering-well---chapter-1">B1. Watering Well - Chapter
1</h3>
<p><span class="score_ac"><span class="math inline">\(12\)</span>
分</span> (102:20)</p>
<div class="note info no-icon"><p>平面上有 <span class="math inline">\(N\)</span> 棵樹 <span
class="math inline">\((A_i, B_i)\)</span> 以及 <span
class="math inline">\(Q\)</span> 個水井 <span
class="math inline">\((X_j, Y_j)\)</span>。請找出</p>
<p><span class="math display">\[\sum_{i=1}^{N}\sum_{j=1}^{Q}{(A_i -
X_j)^2 + (B_i - Y_j)^2} \notag\]</span></p>
<p>的值，並輸出其對 <span class="math inline">\(10^9+7\)</span>
取模的結果。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 55\)</span>。</li>
<li><span class="math inline">\(1 \le N, Q \le 500\,000\)</span>。</li>
<li><span class="math inline">\(\sum\limits_{所有測資}{N},
\sum\limits_{所有測資}{Q} \le 3\,000\,000\)</span>。</li>
<li><span class="math inline">\(0 \le A_i, B_i \le 3000\)</span>（<span
class="math inline">\(1 \le i \le N\)</span>）。</li>
<li><span class="math inline">\((A_i, B_i) \ne (A_j,
B_j)\)</span>（<span class="math inline">\(1 \le i &lt; j \le
N\)</span>）。</li>
<li><span class="math inline">\(0 \le X_i, Y_i \le 3000\)</span>（<span
class="math inline">\(1 \le i \le Q\)</span>）。</li>
<li><span class="math inline">\((X_i, X_i) \ne (X_j,
X_j)\)</span>（<span class="math inline">\(1 \le i &lt; j \le
Q\)</span>）。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-1B1.cpp">AC
Solution</a></p>
<p>因為對 B2 暫時沒有想法，於是就先來寫 B1。</p>
<p>上面那個算式的兩個維度是完全互斥的，所以可以紀錄每個 <span
class="math inline">\(x\)</span> 跟 <span
class="math inline">\(y\)</span> 分別有幾棵樹跟幾個水井，再 <span
class="math inline">\(\mathcal{O}(C^2)\)</span> 暴力計算答案。</p>
<h3 id="b2.-watering-well---chapter-2">B2. Watering Well - Chapter
2</h3>
<p><span class="score_ac"><span class="math inline">\(18\)</span>
分</span> (135:04)</p>
<div class="note info no-icon"><p>平面上有 <span class="math inline">\(N\)</span> 棵樹 <span
class="math inline">\((A_i, B_i)\)</span> 以及 <span
class="math inline">\(Q\)</span> 個水井 <span
class="math inline">\((X_j, Y_j)\)</span>。請找出</p>
<p><span class="math display">\[\sum_{i=1}^{N}\sum_{j=1}^{Q}{(A_i -
X_j)^2 + (B_i - Y_j)^2} \notag\]</span></p>
<p>的值，並輸出其對 <span class="math inline">\(10^9+7\)</span>
取模的結果。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 50\)</span>。</li>
<li><span class="math inline">\(1 \le N, Q \le 500\,000\)</span>。</li>
<li><span class="math inline">\(\sum\limits_{所有測資}{N},
\sum\limits_{所有測資}{Q} \le 3\,000\,000\)</span>。</li>
<li><span class="math inline">\(0 \le A_i, B_i \le
\mathbf{10^9}\)</span>（<span class="math inline">\(1 \le i \le
N\)</span>）。</li>
<li><span class="math inline">\((A_i, B_i) \ne (A_j,
B_j)\)</span>（<span class="math inline">\(1 \le i &lt; j \le
N\)</span>）。</li>
<li><span class="math inline">\(0 \le X_i, Y_i \le
\mathbf{10^9}\)</span>（<span class="math inline">\(1 \le i \le
Q\)</span>）。</li>
<li><span class="math inline">\((X_i, X_i) \ne (X_j,
X_j)\)</span>（<span class="math inline">\(1 \le i &lt; j \le
Q\)</span>）。</li>
</ul>
</div>
<p><a
href="https://github.com/SorahISA/competitive_programming/blob/master/(MHC)%20Meta%20Hacker%20Cup/2022/Qualification%20Round/mhc22-1B2.cpp">AC
Solution</a></p>
<p>先去刷了牙、收了一部分的行李，突然意識到他只是維護平方和而已，而印象中這可以透過維護平方和、一次方和、零次方和來做到。</p>
<p><span class="math display">\[\begin{aligned}
\sum_{i=1}^{k}{(p_i + \Delta)^2}
&amp;= \sum_{i=1}^{k}{(p_i^2 + 2 \Delta p_i + \Delta^2)} \\
&amp;= \underbrace{\sum_{i=1}^{k}{p_i^2}}_{平方和} + 2 \Delta \cdot
\underbrace{\sum_{i=1}^{k}{p_i}}_{一次方和} + \Delta^2 \cdot
\underbrace{\sum_{i=1}^{k}{1}}_{零次方和} \\
\end{aligned} \notag\]</span></p>
<div class="note warning"><details>
<summary>
範例 code
</summary>
此處省略掉處理 mod 的部分。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> s0 = <span class="number">1</span>, s1 = <span class="number">0</span>, s2 = <span class="number">0</span>, dx;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Q; ++i) &#123;</span><br><span class="line">    <span class="keyword">while</span> (s0 &lt; N <span class="keyword">and</span> tree[s0] &lt;= well[i]) &#123;</span><br><span class="line">        dx = tree[s0] - tree[s0<span class="number">-1</span>];</span><br><span class="line">        s2 += <span class="number">2</span> * s1 * dx + s0 * dx * dx;</span><br><span class="line">        s1 += s0 * dx;</span><br><span class="line">        s0 += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dx = well[i] - tree[s0<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">if</span> (dx &gt;= <span class="number">0</span>) ans += s2 + <span class="number">2</span> * s1 * dx + s0 * dx * dx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<h3 id="c.-lemonade-life">C. Lemonade Life</h3>
<p><span class="score_na"><span class="math inline">\(44\)</span>
分</span></p>
<div class="note info no-icon"><p>平面上有 <span class="math inline">\(N\)</span> 個點 <span
class="math inline">\((X_i, Y_i)\)</span>，你要從點 <span
class="math inline">\(1\)</span> 走到點 <span
class="math inline">\(N\)</span>，並中途停在一些點休息，你只能停在「存在一個半平面，其上只有該點」的點上，並且你一次走的
Euclidean distance 不能超過 <span class="math inline">\(D\)</span>。</p>
<p>若你在點 <span class="math inline">\(H_1, H_2, \ldots, H_M\)</span>
停留（其中 <span class="math inline">\(H_1 = 1\)</span> 且 <span
class="math inline">\(H_M = N\)</span>），那麼你的花費會是</p>
<p><span class="math display">\[\sum_{i=1}^{M-1}{\max\left\{ K, (X_{H_i}
- X_{H_{i+1}})^2 + (Y_{H_i} - Y_{H_{i+1}})^2 \right\}}\]</span></p>
<p>請求出從點 <span class="math inline">\(1\)</span> 到點 <span
class="math inline">\(N\)</span> 的最小花費，或判斷其不可能被達成。</p>
<ul>
<li>測資數量<span class="math inline">\({} = 90\)</span>。</li>
<li><span class="math inline">\(2 \le N \le 1\,000\,000\)</span>。</li>
<li><span class="math inline">\(\sum\limits_{所有測資}{N} \le
4\,000\,000\)</span>。</li>
<li>至多只有 <span class="math inline">\(15\)</span> 筆測資滿足 <span
class="math inline">\(N &gt; 5000\)</span>。</li>
<li><span class="math inline">\(0 \le K, D \le 10^9\)</span>。</li>
<li><span class="math inline">\(0 \le X_i, Y_i \le
1\,000\,000\)</span>（<span class="math inline">\(1 \le i \le
N\)</span>）。</li>
<li><span class="math inline">\(X_1 &lt; \min\{X_2, X_3, \ldots,
X_N\}\)</span>。</li>
<li><span class="math inline">\(X_N &gt; \max\{X_1, X_2, \ldots,
X_{N-1}\}\)</span>。</li>
<li><span class="math inline">\((X_i, X_i) \ne (X_j,
X_j)\)</span>（<span class="math inline">\(1 \le i &lt; j \le
N\)</span>）。</li>
</ul>
</div>
<p>幾何題掰掰～</p>
<p>好啦，但是除了看出「存在一個半平面，其上只有該點」就是指凸包以及可以
<span class="math inline">\(\mathcal{O}(N^2)\)</span>
建圖跑最短路之外就沒想法了。</p>
<p>驅車前往新竹的路上有一大半的時間都在想這個，而且因為大塞車還開了九彎十八拐ㄉ北宜公路，整個超暈
zzz。</p>
<p>隱隱約約感覺會有什麼東西具有單調性，像是你在上路跟下路走的點都只會嚴格遞增（？）、最短路的轉移區間有單調性（爛的）等等，但最後還是什麼都沒有想出來。</p>
<h2 id="總結">總結</h2>
<ul>
<li>分數：<span class="score_50"><span
class="math inline">\(56\)</span></span><span class="math inline">\(/
100\)</span> 分（<span class="score_ac"><span
class="math inline">\(10\)</span></span>$/ $<span class="score_ac"><span
class="math inline">\(16\)</span></span>$/ $<span class="score_ac"><span
class="math inline">\(12\)</span></span>$/ $<span class="score_ac"><span
class="math inline">\(18\)</span></span>$/ $<span class="score_na"><span
class="math inline">\(44\)</span></span>）</li>
<li>排名：<span class="medal_ag"><span
class="math inline">\(212\)</span></span><span class="math inline">\(/
12\,330\)</span> 名</li>
</ul>
<p>因為總體排名輸慘，所以就放臺灣排名就好。</p>
<p><img data-src="scoreboard.png" width="90%"></p>
<p>結果 C 的官解就是直接建凸包跑最短路，不過他給出了有趣的性質：</p>
<div class="note success"><p>在 <span class="math inline">\(a \times a\)</span>
的格子點上做凸包最多只會包含 <span
class="math inline">\(\mathcal{O}(a^{2/3})\)</span> 的點。</p>
</div>
<p>於是直接暴力的複雜度會是好的 OwO。</p>
<p>不過這種題目感覺不適合出在比賽裡，因為他的難度全在證明上，而賽中會想用暴力唬爛的人也不在少數。</p>
<p>以下是檢討：</p>
<p>MHC 的賽制是開放使用網路上的公開程式碼的，所以若要最小化 penalty
其實我應該直接拿 OI-Wiki 上的 code
來用，而不是先嘗試自己刻。這樣的後果就是 A1 ~ B2 都多了約 75 分鐘的
penalty，致使排名下降了 120+ 名。</p>
<p>另外，在這場跟上一場的最後一題都是嚇人的題目，除了複雜度不好分析之外基本上就是暴力小優化就能過的類型。</p>
<p>從 Round 2 開始每場都只有三個小時，我應該多使用 codebook
以及面對無解題去嘗試暴力的做法並加以優化。MHC 的 validation input
都還蠻大的，或許也可以拿來驗證時間複雜度？</p>
<div class="note primary"><ul>
<li>上一篇：<a href="../mhc22-0">Qualification</a></li>
<li>下一篇：還不存在</li>
</ul>
</div>
]]></content>
      <categories>
        <category>競程</category>
        <category>比賽心得</category>
      </categories>
      <tags>
        <tag>MHC</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 東華盃 遊記</title>
    <url>/cp/contests/ndhu22/</url>
    <content><![CDATA[<blockquote>
<p>時間：2022.12.03 -- 2022.12.04</p>
</blockquote>
<p>東華盃是從去年開始辦的比賽，顧名思義，他就是東華大學所辦的比賽。</p>
<p>去年受 detaomega
推銷而去參加（結果他去年跟今年都沒來），雖然（他們的）問題重重，最終所幸還是順利的以
<code>ACKube</code> 的隊名拿下第一名，收穫 <span
class="math inline">\(15\,000\)</span> NTD 獎金。</p>
<span id="more"></span>
<p>去年的心得打到一半就放置了，可能就稍微紀錄一下去年最後發生什麼事情就好？</p>
<p>總之總共有 8 題，其中有 4
題測資是爛的，而這個「爛」是直到一年後的現在都沒有修好。</p>
<p>當時賽中一直 WA 還以為是邊界 case
或是讀題障礙，結果最後其中三題在出場後跟教授回報對測資的疑慮他才說是他們的官解爛掉
= =，最後一題則可能是 <code>\r\n</code> 跟 <code>\n</code>
的區別（沒有問出來，但這應該是唯一爛掉的可能性）。</p>
<p>但是有錢所以就算了，欸嘿 Ow&lt;～</p>
<h2 id="day-------報名階段">Day -? --- 報名階段</h2>
<p>今年又是被 detaomega 提醒報名東華盃（可是他又找藉口不去打 ._.）。</p>
<p>因為從今年開始跟黃迺絜（coldEr66）以及陳重諺（mmi366127）正式地在
ICPC 組隊，於是今年就用了 <code>NYCU_Yamada</code> 當作隊名。</p>
<p>可惜的是，迺絜到前一兩周突然發現跟系排出遊撞期無法參加，我跟重諺就決定<del>模仿
waynedisonitau123 今年在 World Final
的狀況</del>當成有一人缺席來打了，希望不會因此而爆炸。</p>
<h2 id="day-0-----前往花蓮-入住民宿">Day 0 --- 前往花蓮 &amp;
入住民宿</h2>
<ul>
<li>08:30</li>
</ul>
<p>因為早上在看球賽 + 出題導致 8:30
洗完澡變得超級累，結果就睡到將近一點。可能是被最近世界盃的作息搞的（本來好不容易都調整成可以五點前睡覺了耶），搭客運的時候一路上肚子又超級痛。本來打算跟重諺吃拉麵的計畫就移到明天比完賽了（希望可以吃的到），直到
15:10 左右到了台北車站隨便吃了個午餐。</p>
<p>然後我把我的百元粉紅雨傘丟在腳踏車上（清大門口 15-1）了
QAQ，希望明天回校能在草叢裡找到她，也希望今明兩天都不要下雨。</p>
<ul>
<li>15:10</li>
</ul>
<p>午餐吃的是北車微風廣場的某家的牛肉麵，我覺得無論是肉質、湯頭、份量都比段純真差多了
QQ</p>
<ul>
<li>16:20</li>
</ul>
<p>今天奶奶生日，我就去景平替奶奶慶生，讓重諺先去民宿 check-in。</p>
<p>差點搭不到末班車 OAO</p>
<ul>
<li>20:43</li>
</ul>
<p>搭上了開往志學站的末班車，在車上把要出的題目的題敘寫好感覺就花了我將近三個小時耶！至少這樣題目應該是全部都處理完了，就只剩下怎麼出真的很強的測資了。</p>
<ul>
<li>23:22</li>
</ul>
<p>都末班車了還能誤點五分鐘 ._.</p>
<p><img data-src="donghwa.jpg" style="width: 90%; max-width: 400px"></p>
<p>從志學站走到民宿要花整整 43
分鐘喔，而且手機在最糟糕的情況下沒電了：我走學校內的道路，Google
導航以為我在隔著一個鐵絲網的縣道，於是我就看著只剩 4
分鐘的路程、一線之隔的路口，我卻要再繞將近 30
分鐘才能抵達，此時手機就沒電了，我連要繞哪裡都不知道。</p>
<p><img data-src="donghwa-stuck.jpg" style="width: 90%; max-width: 400px"></p>
<p>所幸我有先拜託重諺在我手機沒電的時候來救我，最後是他找到了一個鐵絲網的破洞讓我從裡面鑽出去才逃出生天。因為重諺的飲料掉在洞口處，所以我們又回去拿，在那時候我踩到了一隻蝸牛，我很抱歉
QAQ</p>
<p>明天的比賽我想來試試看帶點風向？但搞不好都是實作題那也帶不起來。</p>
<ul>
<li>24:30</li>
</ul>
<p>其實我不知道是幾點到民宿的，今年住的這間「綠舍民宿」比去年的好上不少，除了灰塵比較少之外，終於不用爬樓梯了耶！但是也已經沒有什麼時間來混就是了。</p>
<p>重諺猜待會的阿根廷 v.s. 澳洲會是 1 : 2，因為他們都倒著踢球。</p>
<ul>
<li>27:47</li>
</ul>
<p>16 強阿根廷 v.s. 澳洲，上半場傷停補時階段，1 : 0
由阿根廷領先（沒，我今天沒打算看這場）。今天的紀錄終於寫完，明天 8:30
前要起床而我還沒洗澡。</p>
<p>ㄌㄌ之神啊！請保佑我能夠在明天的比賽上保持清醒，不要把東西留在東華或是民宿，也希望明天題目敘述跟測資一切正常。</p>
<h2 id="day-1-----2022-東華盃">Day 1 --- 2022 東華盃</h2>
<ul>
<li>09:15</li>
</ul>
<p><img data-src="green-villa.jpg" style="width: 90%"></p>
<p>本來預計是 08:30 要起床吃早餐，結果我跟重諺都睡著了，直到 09:15
老闆來敲門才起床 OwO</p>
<p>吃完老闆提供的早餐（沒有照片）之後，老闆還很好心的載我們去報到。</p>
<p>參加比賽的隊伍比想像中少了一大截，特別是高中組，去年還有 9
隊，今年直接只剩下被我推坑的 4 隊學弟們。雖然官網上寫說不足 6
隊將不會舉辦高中組，但看起來還是傲嬌地辦了呢～</p>
<p><img data-src="participants.jpg" style="width: 90%"></p>
<ul>
<li>10:00</li>
</ul>
<p>報到時他們說必須三人都到場才能進去，還好我們有先報備過才能入場比賽。</p>
<ul>
<li>10:20</li>
</ul>
<p>到了開幕式抽完座位，發現外面竟然有烤豬待會比賽可以吃！</p>
<p><img data-src="roast.jpg" style="width: 90%"></p>
<ul>
<li>10:50</li>
</ul>
<p>收完手機跟包包，被帶到座位之後就開始測機……喔不對沒有測機環節。工作人員說密碼紙放在報到時的紙袋裡面，結果因為我把那個袋子收進包包裡所以就跑出去拿，拿密碼回來的時候比賽已經開始了。</p>
<h3 id="比賽開始">比賽開始</h3>
<p>以金刀 template 重諺看題的分工開打。</p>
<p>然而那邊的電腦沒有 Notepad++、也沒有 DevC++，只有我不會用的
Code::Blocks，所以光是開檔案跟第一次成功編譯就花了十幾分鐘的時間
QQ。模板打完又一直編譯失敗，分段註解之後才發現是
<code>#include &lt;bits/stdc++.h&gt;</code> 的鍋，</p>
<p>花了約 25
分鐘，在我還在跟各種標頭檔苦戰時，重諺已經先把一些題目看完了，這是
pB：</p>
<h3 id="b---map-with-two-colors">B - Map with Two Colors</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(n\)</span> 點 <span
class="math inline">\(m\)</span> 邊的圖，請你判斷是不是二分圖。</p>
<ul>
<li>多筆測資。</li>
<li><span class="math inline">\(n &lt; 1000\)</span>。</li>
<li>其他範圍都沒給。</li>
</ul>
</div>
<blockquote>
<p>特別之處：</p>
<ul>
<li>多筆輸入，題目寫輸入 <span class="math inline">\(n = m = 0\)</span>
時結束，但範例是 <code>EOF</code> 結束。</li>
<li>輸出 <code>BICOLORABLE.</code> 或
<code>NOT BICOLORABLE.</code>，可能有句點坑掉了一些人 (?)。</li>
</ul>
</blockquote>
<p>在半小時的時候這題還只有一隊有 submission，而且沒人
AC。當模板就緒之後我就直接用 DSU 寫掉這題了。本來以為會是測資爛掉所以吃
WA，結果就直接 AC 了。</p>
<ul>
<li><strong>30 min, pB <span class="score_ac">Accepted</span> +
首殺</strong></li>
</ul>
<p>接著換重諺上去寫 pH，我去看題。</p>
<h3 id="d---texas-hold-em">D - Texas hold 'em</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(N\)</span>
個人的兩張底牌以及五張公共牌，請輸出誰會贏，多於兩人會贏則輸出
<code>Tie</code>。</p>
<ul>
<li><span class="math inline">\(N \le 10\)</span>。</li>
</ul>
</div>
<p>哈哈，是裸的 Texas
Hold'em（德州撲克判手排大小）ㄟ，可惜我們把它從模板裡註解掉了 QQ</p>
<h3 id="h---egg-shortage">H - Egg Shortage</h3>
<div class="note info no-icon"><p>有 <span class="math inline">\(n\)</span> 間商店，其中第 <span
class="math inline">\(i\)</span> 間有 <span
class="math inline">\(k_i\)</span> 件商品，每個人總共只能買至多 <span
class="math inline">\(\ell_i\)</span>
件，每件商品都只能買至多一個，且其中第 <span
class="math inline">\(j\)</span> 件物品的價格是 <span
class="math inline">\(p_{i,j}\)</span>、收益是 <span
class="math inline">\(w_{i,j}\)</span>。<br> 現在有兩個人帶著總共 <span
class="math inline">\(m\)</span>
元打算分別去一家商店買東西（可以去同一家），求收益最大多少，以及在此收益之下最少要花多少錢。</p>
<ul>
<li>測資數量 <span class="math inline">\(\le 100\)</span>。</li>
<li><span class="math inline">\(n \le 20\)</span>。</li>
<li><span class="math inline">\(m \le 10^4\)</span>。</li>
<li><span class="math inline">\(k_i \le 100\)</span>（<span
class="math inline">\(1 \le i \le n\)</span>）。</li>
<li><span class="math inline">\(\ell_i \le 10\)</span>（<span
class="math inline">\(1 \le i \le n\)</span>）。</li>
<li><span class="math inline">\(w_{i,j} \le 10^5\)</span>（<span
class="math inline">\(1 \le i \le n\)</span>、<span
class="math inline">\(1 \le j \le k_i\)</span>）。</li>
<li><span class="math inline">\(p_{i,j} \le 10^4\)</span>（<span
class="math inline">\(1 \le i \le n\)</span>、<span
class="math inline">\(1 \le j \le k_i\)</span>）。</li>
</ul>
</div>
<p>跟經典背包沒差多少，不過重諺把題目看錯成「每一家店的每個物品至多拿
<span class="math inline">\(\ell_i\)</span> 個」導致燒雞。</p>
<p>在他 debug 的時候我先把 pC 寫掉。</p>
<h3 id="c---optimal-resource">C - Optimal Resource</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(N\)</span>、<span
class="math inline">\((A_i, B_i, C_i)_{i=1}^{3}\)</span>，並定義 <span
class="math inline">\(f_i(x) = A_i x^2 + B_i x + C_i\)</span>，請求出
<span class="math display">\[\max\limits_{\substack{x + y \le N \\ x, y
\ge 1}}\{ f_1(x) + f_2(y), f_1(x) + f_3(y), f_2(x) + f_3(y) \}\]</span>
<!-- --></p>
<ul>
<li><span class="math inline">\(N \le 10^4\)</span>。</li>
<li>沒有 <span class="math inline">\(A_i, B_i, C_i\)</span>
的範圍。</li>
</ul>
</div>
<p>其實題目沒有說到底能不能 <span class="math inline">\(x + y &lt;
N\)</span>，但因為反正在 <span class="math inline">\(A, B, C\)</span>
都是正的時候不會影響到，所以我就寫了 <span
class="math inline">\(\mathcal{O}(N^2)\)</span> 枚舉取 max 的作法。</p>
<ul>
<li><strong>47 min, pC <span class="score_ac">Accepted</span> +
首殺</strong></li>
</ul>
<p>重諺又双叒叕少看 pH 題目了，他漏看了「兩個人」的條件，好在範例測資有
de 出這個問題。而我發現 pA 是字串處理，換我上去寫掉它。</p>
<h3 id="a---black-friday">A - Black Friday</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(X\)</span>
個商品的特價信息（皆為下面其中一種）：</p>
<ul>
<li><code>Buy N gets M free</code></li>
<li><code>Buy 2 second one get M% off</code></li>
<li><code>The total amount over N get M% off</code></li>
</ul>
<p>接著給你 <span class="math inline">\(Y\)</span>
次購買物品的紀錄，你需要計算出總共的花費，並四捨五入至整數。</p>
<ul>
<li><span class="math inline">\(Y \le X\)</span>。</li>
<li>沒有其他限制。</li>
</ul>
</div>
<blockquote>
<p>特別之處：</p>
<ul>
<li>題目沒有寫要四捨五入，範例也都是整數。這是問 clarification
才回覆的。</li>
<li>特價信息 3 的 over <span class="math inline">\(N\)</span> 其實是指
<span class="math inline">\(\ge
N\)</span>。這是經過很多次的測試才通靈出來的。</li>
</ul>
</blockquote>
<p>一開始用 double 計算再 round down，所以錯的很燒雞。</p>
<ul>
<li><strong>89 min, pA <span class="score_na">Compile
Error</span></strong></li>
<li><strong>90 min, pA <span class="score_na">Wrong
Answer</span></strong></li>
</ul>
<p>我在旁邊看算式有沒有問題時重諺終於把 pH 寫到可以過範測了！</p>
<ul>
<li><strong>98 min, pH <span class="score_na">Time Limit
Exceeded</span></strong></li>
</ul>
<p>因為重諺算複雜度時沒有考慮到測資筆數 <span
class="math inline">\(t\)</span>，其實複雜度是 <span
class="math inline">\(\mathcal{O}(t (nmkl + n^2m)) \approx 2 \cdot
10^{10}\)</span>，我認為是要利用 <span class="math inline">\(\ell_i \le
10\)</span> 來做到更好的複雜度。我接過 pH
的題敘想檢查重諺有沒有漏掉東西，順便問了一下 pF 沒寫的範圍限制，他去推
pG 的公式。</p>
<ul>
<li><strong>109 min, pF Request #1: "What is the upper bound of
N?"</strong></li>
</ul>
<h3 id="g---coding-square-plan">G - Coding Square Plan</h3>
<div class="note info no-icon"><p>給你一個長度 <span class="math inline">\(2k\)</span> 的 <span
class="math inline">\(\texttt{01}\)</span> 字串 <span
class="math inline">\(s\)</span>，請求出在 <span
class="math inline">\(2^k \times 2^k\)</span>
的方格內以希爾伯特曲線的方法依序填入數字 <span class="math inline">\(0,
1, \ldots, 2^{2k}-1\)</span> 之後，<span
class="math inline">\(s\)</span> 代表的數字會在哪個格子。</p>
<ul>
<li>測資數量 <span class="math inline">\(\le 1024\)</span>。</li>
<li><span class="math inline">\(2 \le 2k \le 30\,000\)</span>。</li>
</ul>
</div>
<p>pG
一開始就有精神出來了，只不過因為要用到大數所以先放一邊。重諺很快就推出遞迴式了，但我們遇到的第一個問題就是他的輸入格式。他是用
input-EOF，而我們都不知道怎麼用 python 做這件事。</p>
<p>一開始用了 <code>EOFError</code> 的寫法如下：</p>
<div class="note warning"><details>
<summary>
範例 code
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">expect EOFError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>在範例過了之後交上去，結果因為重諺把輸出格式打成
<code>f'Case: &#123;t&#125;: (&#123;x&#125;, &#123;y&#125;)'</code>，不出意外的吃了
WA。結果修好之後反而變成 RE？</p>
<ul>
<li><strong>120 min, pG <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>120 min, pG <span class="score_na">Runtime
Error</span></strong></li>
<li><strong>121 min, pF Respond #1: "N &lt;= 100"</strong></li>
</ul>
<p>pF <span class="math inline">\(N \le 100\)</span>
完全不會做，丟一邊。</p>
<p>我覺得這題可能像去年一樣又是測資再搞，所以就在字串長度是奇數的情況下在前面補零。</p>
<blockquote>
<p>事實證明這起到了反效果 QQ</p>
</blockquote>
<ul>
<li><strong>126 min, pG <span class="score_na">Runtime
Error</span></strong></li>
<li><strong>129 min, pG <span class="score_na">Wrong
Answer</span></strong></li>
</ul>
<p>這時其實非常危險，雖然 pB 跟 pC 兩題都是我們 1 try
首殺，其他題也都沒人 AC，但是一直到第 7 名都是 2 題，而且感覺上至少
pA、pD 題目也都不難只是搞人，如果有其他 3
隊過了某題我們就會直接沒有獎金。</p>
<p>分析了一下，好吧，還是只能繼續寫 code。重諺先回到旁邊 debug
算式，我則是繼續看 pA 有沒有什麼怪怪的地方。</p>
<p>猜了一下 <code>Buy N gets M free</code> 如果拿不到 <span
class="math inline">\(M\)</span> 個 free
就只能都用買的（猜錯了），還是吃了 WA。</p>
<ul>
<li><strong>134 min, pA <span class="score_na">Wrong
Answer</span></strong></li>
</ul>
<p>這時發現答案很可能不是整數，又因為題目寫 "Output a
integer"，所以我們打算問一下如果答案不是整數會怎麼樣。</p>
<ul>
<li><strong>136 min, pA Request #2: "If the answer is a floating point
number, how do we deal with it?"</strong></li>
<li><strong>137 min, pA Respond #2: "You should round it to
integer."</strong></li>
</ul>
<p>把計算答案的方法改成乘以 <span class="math inline">\(100\)</span>
之後用整數運算，又測了各種（他們）可能做錯的地方，還是一直吃 WA。</p>
<ul>
<li><strong>145 min, pA <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>145 min, pA <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>147 min, pA <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>148 min, pA <span class="score_na">Wrong
Answer</span></strong></li>
</ul>
<p>直到這時我想說「搞不好他的 over 定義是爛的呢？」於是就把
<code>A &lt;= N ? 100 : (100-M)</code> 改成
<code>A &lt; N ? 100 : (100-M)</code>，結果上傳上去，GOAL！</p>
<ul>
<li><strong>148 (+120) min, pA <span class="score_ac">Accepted</span> +
首殺</strong></li>
</ul>
<p>雖然拿到首殺卻一點也不開心。不過，其實原本今天的目標是成功抓到測資的問題啦哈哈哈，終於達成了耶！</p>
<p>放心了一些，繼續開水題 pE。</p>
<h3 id="e---through-the-dungeon">E - Through The Dungeon</h3>
<div class="note info no-icon"><p>給你由 <code>W</code>、<code>T</code>、<code></code>、<code>#</code>
構成的 <span class="math inline">\(h \times w\)</span>
迷宮矩陣，其中你的起始位置是 <code>W</code>、終點位置是
<code>T</code>。<br> 你每一步可以往四方位不是障礙物 <code>#</code>
的地方移動，而且你可以至多用一步來做一次「傳送到四方位兩格遠且不是障礙物的地方」，求
<code>W</code> 到 <code>T</code> 的最少步數。</p>
<ul>
<li><span class="math inline">\(h, w \le 1024\)</span>。</li>
<li>只會有一個 <code>W</code> 跟 <code>T</code>。</li>
<li>一定走的到終點。</li>
</ul>
</div>
<blockquote>
<p>特別之處：</p>
<ul>
<li>題目敘述沒有保證只有一個起點終點。這是問 clarification
才回覆的。</li>
<li>題目沒有保證一定走的到終點。這是問 clarification 才回覆的。</li>
<li>因為測資有大量空格，題本上又沒有用等寬字元，所以根本看不懂範例測資，也複製不下來。</li>
</ul>
</blockquote>
<p>這種只能做一次的通常都是從頭尾各做一遍，這題也不例外。</p>
<p><img data-src="pE-input.png" style="width: 90%"></p>
<p>看這噁心的輸入格式 = =</p>
<ul>
<li><strong>155 min, pE <span class="score_na">Compile
Error</span></strong></li>
<li><strong>156 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
</ul>
<p>搞不好是走不到終點呢？</p>
<ul>
<li><strong>158 min, pE Request #3: "Is it possible that Kazuma can't
reach treasure?"</strong></li>
<li><strong>160 min, pE Respond #3: "always can reach the treasure.
Maybe needs teleport"</strong></li>
</ul>
<p>？？？</p>
<p>感覺他測資又爛了，但是這次的寫法應該沒踩到 <code>\r\n</code>
的問題，也不知道怎麼 debug。</p>
<p>把 pG 的 input 換成 <code>for s in sys.stdin.readlines()</code>
之後重新上傳。得到 RE 之後認為可能是遞迴深度 <span
class="math inline">\(15\,000\)</span> 過深，所以換成 bottom-up
的做法。</p>
<ul>
<li><strong>160 min, pG <span class="score_na">Runtime
Error</span></strong></li>
<li><strong>164 min, pG <span class="score_na">Runtime
Error</span></strong></li>
</ul>
<p>反正現在罰時也已經不重要了，所以就把
<code>#define int long long</code> 關掉重傳 pH 看看能不能壓過。</p>
<ul>
<li><strong>172 min, pH <span class="score_na">Time Limit
Exceeded</span></strong></li>
</ul>
<p>回到 pG，決定把長度偶數的判斷關掉之後就拿到 AC 了？？？</p>
<p>結果是他輸入的長度可能是奇數，這時候要直接忽略最後一個字元 = =</p>
<p>又成功通靈出一題 &gt;////&lt;</p>
<ul>
<li><strong>181 min, pG <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>186 (+140) min, pG <span class="score_ac">Accepted</span> +
首殺</strong></li>
</ul>
<p>我們輪流 debug pE 跟 pH，順便對沒給範圍的 pF
丟了一個詢問，希望可以有特殊解法。</p>
<ul>
<li><strong>193 min, pF Request #4:
問人數跟人數和有沒有上限</strong></li>
<li><strong>195 min, pE Request #5: "Will there be multiple or no 'K' or
'T' on the map?"</strong></li>
<li><strong>201 min, pF Respond #4: "all the number can be handle using
int in C"</strong></li>
<li><strong>201 min, pE Respond #5: "both exactly one."</strong></li>
</ul>
<p>好吧，還是不會。</p>
<p>pH 前半邊的複雜度沒壓下來，倒是發現重諺在後半部找答案的地方根本就是
<span class="math inline">\(\mathcal{O}(t (n^2 m^2))\)</span>
的，把他改掉再 de 出一些小 bug 就成功 AC 了。</p>
<p>最可做的水題卻卡了快整場 QQ</p>
<ul>
<li><strong>207 min, pH <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>210 min, pH <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>210 min, pD <span class="score_na">No
Output</span></strong></li>
<li><strong>213 (+80) min, pH <span class="score_ac">Accepted</span> +
首殺</strong></li>
</ul>
<p>途中看到剩半小時封版了就直接傳了空檔案到 pD，strategic
submission（O）。</p>
<blockquote>
<p>啊封版之後怎麼還在發氣球 = =</p>
</blockquote>
<p>最後的時間都在猜 pE 出了什麼問題，可惜到最後都沒有猜出來 QQ</p>
<ul>
<li><strong>215 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>222 min, pE <span class="score_na">Compile
Error</span></strong></li>
<li><strong>223 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>224 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>233 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>237 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>238 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
<li><strong>239 min, pF <span class="score_na">No
Output</span></strong></li>
<li><strong>239 min, pE <span class="score_na">Wrong
Answer</span></strong></li>
</ul>
<p>還沒有講到的題目是
pF，不過感覺很不可做再加上其他題問題太多，所以賽中基本上沒有花任何時間來想這題。</p>
<h3 id="f---on-the-giants-trail">F - On the giant's trail</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(N\)</span>
個點的簡單圖的鄰接矩陣，起點跟終點是 <span
class="math inline">\(M\)</span> 跟 <span
class="math inline">\(G\)</span>，每個點上都有一個數字 <span
class="math inline">\(a_i\)</span>。<br> 你的力量 <span
class="math inline">\(\text{str}\)</span> 一開始是 <span
class="math inline">\(a_M\)</span>，你走到一個點 <span
class="math inline">\(v\)</span> 時要保證 <span
class="math inline">\(\text{str} &gt; a_v\)</span>，之後 <span
class="math inline">\(\text{str}\)</span> 就會加上 <span
class="math inline">\(a_v\)</span>。<br> 你要找出在所有不經過重複點的
<span class="math inline">\(M \leadsto G\)</span> 路徑之中最小的 <span
class="math inline">\(\text{str}\)</span>。</p>
<ul>
<li><span class="math inline">\(N \le 100\)</span>。</li>
<li><span class="math inline">\(1 \le M, G \le N\)</span>。</li>
<li><span class="math inline">\(a_i \ge 0\)</span>（<span
class="math inline">\(1 \le i \le N\)</span>）。</li>
<li><span class="math inline">\(\sum_{i=1}^{N} a_i \le
2^{31}-1\)</span>。</li>
</ul>
</div>
<blockquote>
<p>特別之處：</p>
<ul>
<li>題目沒有給 <span class="math inline">\(N\)</span> 的範圍。這是問
clarification 才回覆的。</li>
<li>題目沒有給 <span class="math inline">\(a_i\)</span> 的範圍。這是問
clarification 才回覆的。</li>
</ul>
</blockquote>
<p>因為這題光是讓 <span class="math inline">\(a_M = 101\)</span>、<span
class="math inline">\(a_G = 101 + (N-2)\)</span>、其他 <span
class="math inline">\(a_i = 1\)</span> 就等價於找 <span
class="math inline">\(M \leadsto G\)</span> 的 Hamiltonian path
了，所以這個困難版更是完全不會做。</p>
<h3 id="總結">總結</h3>
<ul>
<li>Rank: 1 / 40</li>
<li>AC: 5 / 8</li>
<li>Penalty: 946</li>
</ul>
<p><img data-src="scoreboard.png" width="90%"></p>
<p>不出意外的拿下了第一名，但打得不甚理想。檢討如下：</p>
<ul>
<li>pA：應該直接乘 <span class="math inline">\(100\)</span>
算，不要用容易吃誤差的 double。</li>
<li>pD：實作沒有那麼難卻被「模板沒帶到」這件事嚇到了，應該還是要好好分析類似題目的實作細節。</li>
<li>pG：對 python 語法很不熟悉。話說如果我當時沒有特判奇數的 case
應該就會直接不知道測資有錯就過了ㄟ。</li>
<li>pH：題目多次看錯，重諺在分析複雜度的地方燒雞。</li>
<li>很多函式都不知道要 include
什麼咚咚（<code>int64_t</code>、<code>atoi</code>、<code>setprecision</code>），如果又遇到類似情況必須先有準備。</li>
</ul>
<h3 id="比賽結束">比賽結束</h3>
<ul>
<li>15:15</li>
</ul>
<p>結束之後領完包包跟手機，快速的把 code
跟提交紀錄都存下來，並去隔壁教室吃快被吃完的午餐。可惜他的油飯跟肉都冷掉了，不過肉還不錯
AwA。</p>
<ul>
<li>16:00</li>
</ul>
<p>開幕式的時候說如果東華明年沒有至少拿到前三名明年就沒有烤豬可以吃了，結果除了第一名是我們之外剩下的名次都被海大包攬了（烤豬
88888888）。高中更是只有四隊參加，但我記得他好像發出了前三名跟一個佳作？到底是怎麼發的啊？</p>
<p>很開心的是學弟們在我在報名期限最後一天推薦之後還有來報名，去年還有好幾所高中組了九隊，今年直接只有花中的四隊包下了全部的高中組獎金（希望這套題目不會讓他們不想打競程
QQ）。</p>
<p>比賽結束並頒完獎之後就準備回家，從東華走到火車站真的超久，大概走了四十幾分鐘。</p>
<p><img data-src="teammate.jpg" style="width: 90%"></p>
<ul>
<li>17:10</li>
</ul>
<p>買了回程的票，結果本來想在台北吃拉麵卻發現只買的到 17:34 - 17:48
的志學 <span class="math inline">\(\leadsto\)</span> 花蓮跟 19:20 -
21:30 的花蓮 <span class="math inline">\(\leadsto\)</span>
台北車票。於是晚餐就只好改變計畫去車站樓下的「好正點港式點心」吃，吃完就順手買了伴手禮麻糬回去。</p>
<p>本來想點鮮蝦腸粉結果意外劃到紅米干貝腸粉，意外的好吃呢～</p>
<p>然後櫻花蝦高麗菜超盤，169 * 1.1 卻只有那樣的份量 QQ</p>
<p><img data-src="after-food.jpg" style="width: 90%"></p>
<ul>
<li>21:30</li>
</ul>
<p>到台北之後也沒有時間去安利美特或是逛地下街了，不過還是在空曠的地下街走了十幾分鐘才往客運站出發。北車果然是大型迷宮阿，我們迷路了好一陣子才終於找到轉運站在哪個方向。</p>
<p>轉運站大排長龍，又是排了一整圈才輪到我們。</p>
<ul>
<li>24:00</li>
</ul>
<p>因為清大風景比較好而在清大下車（?），這是清大的仙人掌。</p>
<p><img data-src="nthu-cactus.jpg" style="width: 90%"></p>
<ul>
<li>24:30</li>
</ul>
<p>好像差不多這個時間才回到宿舍，因為已經很累了所以就直接洗洗睡了，希望明年的比賽體驗可以更好一些吧。</p>
]]></content>
      <categories>
        <category>競程</category>
        <category>遊記</category>
        <category>比賽心得</category>
      </categories>
      <tags>
        <tag>ICPC</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 YCPC a.k.a. 交大年度賽 遊記</title>
    <url>/cp/contests/ycpc22/</url>
    <content><![CDATA[<blockquote>
<p>時間：2022.09.05 -- 2022.09.06</p>
</blockquote>
<p>一年一度的校內賽又來ㄌ &gt;////&lt;</p>
<p>大一拿到第三名，去年得了第七名（前六名可以去打
NCPC），結果因為忘記去開會導致來不及遞補到 NCPC 的名額 QwQ。</p>
<p>今年是跟新隊友黃迺絜（coldEr66）還有陳重諺（mmi366127）組隊，希望可以拿到好成績
&gt;w&lt;！</p>
<span id="more"></span>
<h2 id="day--1-day-0-----sitcon-宿舍入住">Day -1 ~ Day 0 --- SITCON
&amp; 宿舍入住</h2>
<p>賽前只有在 8/19 練到
<a href="https://codeforces.com/gym/102007">一場</a>。</p>
<p>9/4 恰逢
SITCON，所以就帶著行李出發去台北，可惜因為作息爆炸於是下午一點才到，有很多議程沒聽到。</p>
<p>晚上跟林律穎ㄘ睽違已久的北車武藏拉麵，五月在新竹吃完就確診了
QwQ。</p>
<p><img data-src="ramen.jpg" style="width: 90%"></p>
<p>回到交大先去借宿一晚，隔天中午醒來就去辦宿舍入住跟搬行李，發現有兩個室友暑宿。雖然只帶一箱行李但要整理都是灰塵的房間好麻煩
._.。</p>
<p>晚上在床上從 2:20 躺到
7:30，因為沒帶床墊感覺每一個小時就會醒過來一次，結果起床之後還是超累 =
=。</p>
<h2 id="day-1-----ycpc-2022">Day 1 --- YCPC 2022</h2>
<p>早上吃了麥當勞的雞塊薯餅跟紅茶，在 8:50
左右到校計中報到。迺絜一直裝弱說自己只會倒水。</p>
<p>比賽用的設備是 Windows +
VM，一開始只要全螢幕就會一直黑屏，還好比賽中都沒有發生這個問題。</p>
<p>發下密碼跟題本，大概在 DOMJudge 開放之前的半分鐘 lys
就進來說開始了？？？反正先看題目ㄅ～</p>
<ul>
<li><a
href="https://github.com/SorahISA/competitive_programming/tree/master/ICPC%20Practice/ycpc22">程式碼</a></li>
<li><a
href="https://github.com/SorahISA/competitive_programming/blob/master/ICPC%20Practice/ycpc22/ycpc22.pdf">題本</a></li>
</ul>
<blockquote>
<p>總共有 <span class="math inline">\(13\)</span>
題，我們開場的策略就是讓迺絜先打模板，我跟重諺先開前後的題目。不過我看到
pD 的題敘超短就先拿過來讀：</p>
</blockquote>
<h3 id="d---large-number-multiply">D - Large Number Multiply</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(A\)</span>、<span
class="math inline">\(B\)</span>，輸出 <span class="math inline">\(A
\times B\)</span>。</p>
<p>有 <span class="math inline">\(N\)</span> 組測資。</p>
<ul>
<li><span class="math inline">\(N\)</span> 的範圍不明。</li>
<li><span class="math inline">\(1 \le A, B &lt; 10^{21}\)</span>。</li>
</ul>
</div>
<ul>
<li><strong>1 min, pD <span class="score_ac">Correct</span> +
首殺</strong></li>
</ul>
<p>哈！直接用 python 寫拿到全場首殺，還是久違的 1 min AC
&gt;////&lt;。一開始看到分數不是深綠還以為沒有首殺ㄌ。</p>
<blockquote>
<p>總之我先繼續看我分到的 pABC，重諺看後面幾題，過一陣子重諺就發現 pM
跟我們
<a href="https://codeforces.com/gym/102007/problem/J">團練的一題</a>
一模一樣：</p>
</blockquote>
<h3 id="m---largest-quadrilateral">M - Largest Quadrilateral</h3>
<div class="note info no-icon"><p>給你四個正整數 <span class="math inline">\(a\)</span>、<span
class="math inline">\(b\)</span>、<span
class="math inline">\(c\)</span>、<span
class="math inline">\(d\)</span>，請求出他們可以圍出的最大四邊形面積。</p>
<ul>
<li><span class="math inline">\(1 \le a, b, c, d \le 100\)</span>。</li>
<li>保證可以圍出四邊形。</li>
<li>誤差 <span class="math inline">\(\le 10^{-6}\)</span>。</li>
</ul>
</div>
<p>在團練時我們使用的是二分搜，不過剛好在團練完的時候我們有看題解裡講到
<a href="https://en.wikipedia.org/wiki/Brahmagupta#Brahmagupta's_formula">Brahmagupta's
formula</a> 可以在 <span class="math inline">\(\mathcal{O}(1)\)</span>
時間求解，而且很精簡。</p>
<p><span class="math display">\[\begin{aligned} s &amp;=
\frac{a+b+c+d}{2} \\ A &amp;= \sqrt{(s-a)(s-b)(s-c)(s-d)} \\
\end{aligned} \notag\]</span> <!-- --></p>
<ul>
<li><strong>4 min, pM <span class="score_ac">Correct</span> +
首殺</strong></li>
</ul>
<p>於是我們自然又拿到了一個首殺 &gt;////&lt;！</p>
<blockquote>
<p>我覺得 pA 看起來很像 LCS，但是因為輸入看起來很麻煩所以先放一邊，其他
pBC 都是水題，所以繼續拿了 pEFG 來看。<br> pE 很水，pF
很經典的感覺所以丟給迺絜想，pG 看起來像子集枚舉裸題。<br> 重諺看 pHIJKL
發現 pH 也很水，於是確認了一下想法就在迺絜把模板打完之後上去寫掉ㄌ：</p>
</blockquote>
<h3 id="h---an-astronomers-task">H - An Astronomer's Task</h3>
<div class="note info no-icon"><p>給你兩個座標點 <span class="math inline">\((x_0, y_0)\)</span>、<span
class="math inline">\((x_1,
y_1)\)</span>，輸出他們連線會經過多少座標點。</p>
<p>有 <span class="math inline">\(T\)</span> 組測資。</p>
<ul>
<li><span class="math inline">\(0 \le T \le 100\)</span>。</li>
<li><span class="math inline">\(|x_0|, |y_0|, |x_1|, |y_1| \le
10^9\)</span>。</li>
</ul>
</div>
<p>顯然對 <span class="math inline">\(|x_0 - x_1|\)</span> 跟 <span
class="math inline">\(|y_0 - y_1|\)</span> 做個 <span
class="math inline">\(\text{gcd}\)</span> 就完事了。</p>
<ul>
<li><strong>15 min, pH <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>AC 之後換我寫相對最好寫的 pE：</p>
</blockquote>
<h3 id="e---total-number-of-segments-in-all-permutations">E - Total
Number of Segments in All Permutations</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(n\)</span>，詢問 <span
class="math inline">\(1, 2, \ldots, n\)</span>
的所有排列加起來共有幾個連續遞增區間。</p>
<ul>
<li><span class="math inline">\(1 \le n \le 11\)</span>。</li>
</ul>
</div>
<p>本來以為這是數學題，結果看範圍才發現是暴力題，於是好好的 <span
class="math inline">\(\mathcal{O}(n \times n!)\)</span> 水掉了。</p>
<ul>
<li><strong>19 min, pE <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>賽後才聽說這題有數學解，稍微推了一下發現就只是 <span
class="math inline">\(\frac{(n+1)!}{2}\)</span> OuO。<br>
接著我就繼續寫次好寫的 pC：</p>
</blockquote>
<h3 id="c---spiral-of-numbers">C - Spiral of Numbers</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(N\)</span>、<span
class="math inline">\(M\)</span>，你要在 <span class="math inline">\(N
\times M\)</span> 的表格上從左上角開始逆時針填上 <span
class="math inline">\(0, 1, \ldots, NM-1\)</span> 的數字。<br>
請輸出填完數字的表格。</p>
<ul>
<li><span class="math inline">\(0 \le N, M \le 100\)</span>。</li>
</ul>
</div>
<p>整個學科區賽感覺就出來了（X）。</p>
<ul>
<li><strong>27 min, pE <span
class="score_ac">Correct</span></strong></li>
</ul>
<p>現在才發現當時寫超久 QwQ，也不知道為什麼要寫那麼久。</p>
<blockquote>
<p>迺絜和重諺推出 pF 的做法了，所以換重諺上去刻：</p>
</blockquote>
<h3 id="f---fulcrum">F - Fulcrum</h3>
<div class="note info no-icon"><p>給你 <span class="math inline">\(a_1, a_2, \ldots,
a_n\)</span>，定義一個 subarray <span class="math inline">\(b_1, b_2,
\ldots, b_m\)</span> 的權重如下：</p>
<p><span class="math display">\[\text{weight}(b) = \sum_{i=1}^{m}{i
\cdot b_i}\]</span> <!-- --></p>
<p>請求出有幾個非空 subarray 的權重 <span class="math inline">\(\le
k\)</span>。</p>
<ul>
<li><span class="math inline">\(1 \le n \le 200\,000\)</span>。</li>
<li><span class="math inline">\(0 \le a_i \le 10^9\)</span>（<span
class="math inline">\(1 \le i \le n\)</span>）。</li>
<li><span class="math inline">\(0 \le k \le 10^{18}\)</span>。</li>
</ul>
</div>
<p>我還不知道要怎麼做 :)，不過因為爆 <code>long long</code> 以及把
<code>i</code> 打成 <code>l</code> 導致吃了兩次 penalty。</p>
<ul>
<li><strong>56 min, pF <span
class="score_na">Wrong-Answer</span></strong></li>
<li><strong>61 min, pF <span
class="score_na">Wrong-Answer</span></strong></li>
<li><strong>71 (+40) min, pF <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>中途重諺 WA 的時候換我上去寫 B：</p>
</blockquote>
<h3 id="b---one-way-traveler">B - One-way Traveler</h3>
<div class="note info no-icon"><p>給一張 functional graph <span
class="math inline">\(G\)</span>（所有點的出度都是 <span
class="math inline">\(1\)</span>），求可以經過最多點的路徑可以經過幾個點。</p>
<ul>
<li><span class="math inline">\(1 \le |V(G)| \le
1\,000\,000\)</span>。</li>
</ul>
</div>
<p>有個顯然的 SCC 縮點作法，不過因為 functional graph
的每個點最終都會落在一個環裡面，所以我就從入度 <span
class="math inline">\(0\)</span> 的點做 DFS
計算最長路徑，剩下的都會是環。</p>
<ul>
<li><strong>70 min, pB <span
class="score_na">Wrong-Answer</span></strong></li>
</ul>
<p>這時我才發現不只有左圖的狀況，還會出現右圖的樣子，我沒有維護每個點可以走到幾個點才會
WA。</p>
<table>
<td>
<img data-src="b-1.png" style="width: 50%; max-width: 300px">
</td>
<td>
<img data-src="b-2.png" style="width: 50%; max-width: 300px">
</td>
</table>
<p>修了一陣子，修好就 AC 了。</p>
<ul>
<li><strong>94 (+20) min, pB <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>中途迺絜上來打 SCC 的模板，所以說其實我可以直接用 SCC
寫掉這題，而且這題跟 pJ 根本一樣：</p>
</blockquote>
<h3 id="j---exhibition">J - Exhibition</h3>
<div class="note info no-icon"><p>給一張帶點權的有向圖 <span
class="math inline">\(G\)</span>，你只可以經過每個點至多一次，請求出點權最大的路徑的值。</p>
<ul>
<li><span class="math inline">\(1 \le |V(G)| \le
200\,000\)</span>。</li>
<li><span class="math inline">\(1 \le |E(G)| \le
200\,000\)</span>。</li>
<li><span class="math inline">\(1 \le a_i \le 10^9\)</span>（<span
class="math inline">\(1 \le i \le |V(G)|\)</span>）。</li>
</ul>
</div>
<p>SCC 縮點 + DAG 最長路裸題，所以重諺就 AC 了。</p>
<ul>
<li><strong>102 min, pJ <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>現在積著可以寫的題目有 pG 子集枚舉、pK 裸分塊、pL 倒水題，於是我想
pAI 要怎麼做、迺絜想 pK 實作細節、重諺寫 pL：</p>
</blockquote>
<h3 id="l---underground-sewer-system">L - Underground Sewer System</h3>
<div class="note info no-icon"><p>給一張 <span class="math inline">\(N \times M\)</span> 的下水道圖（由
<code>x</code>、<code>|</code>、<code>-</code>、<code>+</code>
構成）以及每個位置的高度 <span
class="math inline">\(h_{i,j}\)</span>，水不能流到更高的地方。<br>
詢問你水能不能從 <span class="math inline">\((x_0, y_0)\)</span> 流到
<span class="math inline">\((x_1, y_1)\)</span>。</p>
<ul>
<li><span class="math inline">\(0 \le N, M \le 100\)</span>。</li>
<li><span class="math inline">\(h_{i,j} \in \mathbb{Z}\)</span>（<span
class="math inline">\(0 \le i \le N-1\)</span>、<span
class="math inline">\(0 \le j \le M-1\)</span>）。</li>
<li><span class="math inline">\(0 \le x_0, x_1 \le N-1\)</span>。</li>
<li><span class="math inline">\(0 \le y_0, y_1 \le M-1\)</span>。</li>
</ul>
</div>
<p>輸入有些毒瘤，不過處理完之後就是確確實實的水題。偷偷譴責迺絜說只會倒水，結果遇到倒水題又不寫。</p>
<ul>
<li><strong>115 min, pL <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>換迺絜上去寫 pK：</p>
</blockquote>
<h3 id="k---street-light">K - Street Light</h3>
<div class="note info no-icon"><p>有 <span class="math inline">\(n\)</span> 盞路燈位於 <span
class="math inline">\(x_1, x_2, \ldots, x_n\)</span>，且分別有著 <span
class="math inline">\(a_1, a_2, \ldots, a_n\)</span> 的強度，定義在位置
<span class="math inline">\(p\)</span> 的亮度是</p>
<p><span class="math display">\[\text{luminance}(p) =
\sum_{i=1}^{n}{\left\lfloor\frac{a_i}{|p - x_i| + 1}\right\rfloor}
\notag\]</span> <!-- --></p>
<p>請求出在 <span class="math inline">\(1, 2, \ldots, L\)</span>
裡亮度最低跟最高的值。</p>
<ul>
<li><span class="math inline">\(1 \le n \le 500\)</span>。</li>
<li><span class="math inline">\(1 \le L \le 10^8\)</span>。</li>
<li><span class="math inline">\(1 \le x_1 \le x_2 \le \cdots \le x_n \le
L\)</span>。</li>
<li><span class="math inline">\(1 \le a_i \le 10^8\)</span>（<span
class="math inline">\(1 \le i \le n\)</span>）。</li>
</ul>
</div>
<p>因為一盞路燈的亮度只會有 <span
class="math inline">\(\mathcal{O}(\sqrt{C})\)</span> 種，所以就對那
<span class="math inline">\(\mathcal{O}(\sqrt{C})\)</span>
做區間加值。區間加值可以直接用差分 + <code>map</code> + 前綴和做掉。</p>
<ul>
<li><strong>129 min, pK <span class="score_ac">Correct</span> +
首殺</strong></li>
</ul>
<p>都這個時間了怎麼還有首殺可以拿啊 www。</p>
<blockquote>
<p>突然意識到這場比賽有點太過簡單了，才過 <span
class="math inline">\(\frac{2}{5}\)</span>
的時間卻有三隊只剩下三題。<br> 不過也沒有時間多想了，我就上去寫 pG：</p>
</blockquote>
<h3 id="g---gambling">G - Gambling</h3>
<div class="note info no-icon"><p>給定 <span class="math inline">\(n\)</span>
張牌的權重，其中第一張牌是鬼牌。</p>
<p>在每一輪中都會先洗牌，而你會依序抽牌並統計分數，若你抽到鬼牌可以接著選擇直接結束這輪。</p>
<p>你的總分是 <span
class="math inline">\(\frac{分數之和}{總共抽的卡牌數量}\)</span>，你想知道最佳策略下的期望得分是多少。</p>
<ul>
<li><span class="math inline">\(1 \le n \le 20\)</span>。</li>
<li><span class="math inline">\(0 \le a_i \le
1\,000\,000\)</span>（<span class="math inline">\(1 \le i \le
n\)</span>）。</li>
<li>誤差 <span class="math inline">\(\le 10^{-6}\)</span>。</li>
</ul>
</div>
<p>本來我以為計分方法是 <span
class="math inline">\(\sum{\frac{每輪分數之和}{每輪抽卡數}}\)</span>，所以就直接寫出遇到鬼牌就依據
break 掉會不會更好來判斷，但是在範例二就爛掉了。</p>
<p>重看一遍題目就意識到這個問題了，所以就回到角落重新想作法。</p>
<blockquote>
<p>這時我突然感覺 pA 可以直接給每個點 assign
根到他的字元所組成的字串並直接套 LCS，於是就把做法丟給其他人驗：</p>
</blockquote>
<h3 id="a---largest-common-ghassan-of-two-trees">A - Largest Common
Ghassan of Two Trees</h3>
<div class="note info no-icon"><p>給你兩棵有根樹，每個點上都有 <code>a</code> 到 <code>z</code>
的字母。你可以把兩棵樹都刪掉若干個 subtree
使剩下的部分完全一樣（孩子的順序也要相同），問你樹最大的大小是多少。</p>
<ul>
<li>兩棵樹點樹之和 <span class="math inline">\(\le 150\)</span>。</li>
</ul>
</div>
<p>確定解是好的之後我就開始刻這題，輸入雖然看起來毒瘤但其實卻很好寫，code
也超短 OwO。</p>
<ul>
<li><strong>165 min, pA <span
class="score_ac">Correct</span></strong></li>
</ul>
<p>接著想到 pG
的分數算法跟比例最短路一樣，好像也能套二分搜的做法上去。在算子集出現的頻率時卡了一陣子，不過大部分的
code 都沒有變，所以馬上就寫完了。</p>
<ul>
<li><strong>189 min, pG <span
class="score_ac">Correct</span></strong></li>
</ul>
<blockquote>
<p>這時只剩下
pI，打算看看計分板的時候發現封版了？結果又發公告說因為有隊伍已經 <span
class="math inline">\(12\)</span> 題所以要封版？？？<br>
總之這時記分板上只有我們是 <span class="math inline">\(12\)</span>
題。雖然如此，但 ACtame（team105）已經首殺 pI 了，而且我們 penalty
輸慘，感覺第一無望。</p>
</blockquote>
<h3 id="i---isomorphism">I - Isomorphism</h3>
<div class="note info no-icon"><p>給你字串 <span class="math inline">\(s\)</span>、<span
class="math inline">\(t\)</span>，你要求出有幾個 <span
class="math inline">\(s\)</span> 的 substring <span
class="math inline">\(s&#39;\)</span> 可以跟 <span
class="math inline">\(t\)</span> 匹配。</p>
<p>匹配的定義是存在一種雙射的 <span class="math inline">\(f : \Sigma \to
\Sigma\)</span> 使 <span class="math inline">\(s_i&#39; =
f(t_i)\)</span>。</p>
<ul>
<li><span class="math inline">\(1 \le |s| \le 10^7\)</span>。</li>
<li><span class="math inline">\(1 \le |t| \le |s|\)</span>。</li>
<li><span class="math inline">\(\Sigma = \{\texttt{a}, \texttt{b},
\ldots, \texttt{z}\}\)</span>。</li>
</ul>
</div>
<p>在先前看到題目的當下我就想到一種簡化法：紀錄 <span
class="math inline">\(s&#39;\)</span> 跟 <span
class="math inline">\(t\)</span>
內每個字元的出現順序，比對時只要出現順序相同就是能匹配的。當時因為很多細節不會寫所以沒有細想，在把這個方法丟出來之後越來越覺得可行，比對序列可以單純的用
hash，而加入跟刪除字元都可以在 <span
class="math inline">\(\mathcal{O}(|\Sigma|)\)</span>
更新順序以及每個字元對 hash 值的貢獻。</p>
<p>我們三個人一起手忙腳亂的寫
code，迺絜負責整體架構，重諺計算每個字元的貢獻，我更新字元出現的順序。雖然寫的很醜也出很多
bug ，但他至少有在動了！</p>
<ul>
<li><strong>287 min, pI <span
class="score_na">Wrong-Answer</span></strong></li>
</ul>
<p>想說是只對一個數字取模導致撞 hash，所以就加了第二個數字，code
整個變超醜 www。</p>
<ul>
<li><strong>293 min, pI <span
class="score_na">Wrong-Answer</span></strong></li>
</ul>
<p>我想說是不是我的部分寫爛了，準備打算換成 <span
class="math inline">\(\mathcal{O}(|\Sigma| \lg{|\Sigma|})\)</span>
的暴力計算法，不過他們覺得是模的數字太大才爛掉，於是就從 <span
class="math inline">\(10^{15}+7\)</span> 改成 <span
class="math inline">\(10^9+7\)</span> 就過了！</p>
<ul>
<li><strong>297 min, pI <span
class="score_ac">Correct</span></strong></li>
</ul>
<p>我還是不知道為什麼 <span class="math inline">\(10^{15}+7\)</span>
會爛耶 OuO。</p>
<blockquote>
<p>這題 hank 的官解是確定性的，而且複雜度不會帶 <span
class="math inline">\(\mathcal{O}(|\Sigma|)\)</span>。本來所有做出這題的四隊都會被
TLE 掉，可惜時限定的不夠緊。</p>
</blockquote>
<h2 id="總結">總結</h2>
<ul>
<li>Rank: 2 / 13</li>
<li>AC: 13 / 13</li>
<li>Penalty: 1328</li>
</ul>
<p><img data-src="scoreboard.png" width="90%"></p>
<p>以結果論的話，其實不做出 pI 也是第二名，penalty
會小贏第三名兩分鐘。<del>所以其實我們可以隨便傳一筆 pI
然後提早出場給其他人製造壓力。</del></p>
<p>很可惜除了 pA
之外好像沒有什麼在賽場上感覺不錯的題目（比完賽當然又多了一題 pI）。</p>
<p>比賽的狀況我感覺前期開局打得還算不錯，但是中期忽略了要考慮實作難易度的問題，浪費了不少時間。</p>
<p>還有一個重要的問題是我沒有在空閒時間先看範測會不會出事，這次的 pB 跟
pG 其實都是看範測就會抓到 bug 的。</p>
<p>最後一個可能不算問題的是沒有用到記分板，雖然有定期檢查記分板，卻幾乎沒有拿到資訊。別人開的題目我們已經在想了；別人都沒過的題目我們也還是照寫。可能是比賽偏水導致把簡單題開掉之後只剩下沒幾題可以想，希望之後團練可以好好利用記分板。</p>
<p>總之，接下來就是 10/22 的 TOPC 及 ??/?? 的 NCPC 了，加油
&gt;////&lt;！</p>
<p>P.S. 聽說去年跟今年的 Regional
只會算參加一場，所以有沒有可能打到六年呢？</p>
<p>P.P.S. 如果 ACtame 去年有拿到票，今年的 Regional
好像還是可以打，而且好像可以再拿一張票（但不能用），是不是代表只要
ACtame 夠強交大第二名就有機會坐享其成？</p>
<p>P.P.P.S. 好擔心 NCPC 的獎金ㄛ，現在是幾乎保底 20k 啦，不過想要拿 50k
甚至是 100k 就得要加緊練習啊 &gt;w&lt;！</p>
]]></content>
      <categories>
        <category>競程</category>
        <category>比賽心得</category>
        <category>遊記</category>
      </categories>
      <tags>
        <tag>ICPC</tag>
      </tags>
  </entry>
  <entry>
    <title>ZeroJudge c272. 趙哥的養成計畫 I --- 題解</title>
    <url>/cp/editorials/zj-c272/</url>
    <content><![CDATA[<h2 id="動機">動機</h2>
<p>刷
<a href="https://sites.google.com/site/pcshic/zi-xun-pei-xun">板中的講義題單</a>
的時候寫到了這一題，發現單純利用 sliding windows
過不了，花了大約四小時的時間去優化它才成功
AC。然後因為想寫題解，所以就順便來寫這一篇紀錄一下。</p>
<span id="more"></span>
<h2 id="題意">題意</h2>
<ul>
<li><a
href="https://zerojudge.tw/ShowProblem?problemid=c272">題目連結</a></li>
</ul>
<blockquote>
<p>給你 <span class="math inline">\(N\)</span>（<span
class="math inline">\(N \le 10\)</span>）個整數 <span
class="math inline">\(A_1 \sim A_N\)</span>（<span
class="math inline">\(|A_i| \le 10^6\)</span>）跟一個計分函式</p>
<p><span class="math display">\[score(i) = A_{\sigma_i} \times (M -
\min\{i, M + 1\} + 1) \notag\]</span> （<span
class="math inline">\(\sigma\)</span> 是一個 <span
class="math inline">\(1 \sim N\)</span> 的排列）。</p>
<p>接著有 <span class="math inline">\(Q\)</span>（<span
class="math inline">\(Q \le 10^6\)</span>）次詢問，請找出在分數不超過
<span class="math inline">\(qs\)</span>（<span
class="math inline">\(-2^{46} &lt; qs &lt;
2^{25}\)</span>）的前提下最多可以拿多少分。</p>
</blockquote>
<h2 id="暴力做法">暴力做法</h2>
<p>首先，C++ 裡可以透過
<a href="https://en.cppreference.com/w/cpp/algorithm/next_permutation"><code>std::next_permutation()</code></a>
來找到所有排列，再依序計算出每個排列的分數。因為 <span
class="math inline">\(N \le 10\)</span>，所以排列個數 <span
class="math inline">\(P \le 10! =
3\,628\,800\)</span>。如果對每次詢問都重新查詢一遍，那複雜度會爛到 <span
class="math inline">\(\mathcal{O}(QP)\)</span>，顯然無法通過。</p>
<div class="note info"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> A[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) cin &gt;&gt; A[i];</span><br><span class="line"><span class="built_in">sort</span>(A, A + N);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">/* calculate score */</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(A, A + N));</span><br></pre></td></tr></table></figure>
</details>
</div>
<h2 id="二分搜">二分搜</h2>
<p>不過因為每次詢問的排列都是相同的，先把所有排列的分數處理出來再利用二分搜（或直接用
<a href="https://en.cppreference.com/w/cpp/algorithm/upper_bound"><code>std::prev(std::upper_bound())</code></a>）得到第一個
<span class="math inline">\(\le qs\)</span> 的最大值，複雜度是 <span
class="math inline">\(\mathcal{O}(Q \lg P)\)</span>，應該可以拿到 <span
class="math inline">\(51\)</span> 或 <span
class="math inline">\(61\)</span> 分。</p>
<h2 id="滑動窗口">滑動窗口</h2>
<p>這樣還是太慢了，觀察到 <span class="math inline">\(qs\)</span>
越大相應的答案就越大，考慮把所有詢問先拿出來排序，最後利用 sliding
windows 的方法維護答案，複雜度是 <span
class="math inline">\(\mathcal{O}(Q \lg Q + P)\)</span>，還是只能拿到
<span class="math inline">\(51\)</span> 或 <span
class="math inline">\(61\)</span> 分。</p>
<h2 id="常數優化-1">常數優化 1</h2>
<p>分數的最大值不會超過 <span class="math inline">\(\max\{A_i\} \times M
\le 10^7\)</span>，所以不用使用 <code>long long</code>，可以用
<code>int</code> 處理就好，但要注意的是 <span
class="math inline">\(qs\)</span> 的範圍會到
<code>long long</code>，可以先把他判斷掉。</p>
<div class="note info"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> qs;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">query</span>(Q);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Q; ++i) &#123;</span><br><span class="line">    cin &gt;&gt; qs;</span><br><span class="line">    <span class="keyword">if</span> (qs &lt; all_score[<span class="number">0</span>]) qs = all_score[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">    query[i].first = qs, query[i].second = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<h2 id="常數優化-2">常數優化 2</h2>
<p>把所有 vector 都拔掉換成一般的 array、把區域變數開到全域、開
<code>#pragma GCC optimize("Ofast", "unroll-loops")</code>。</p>
<h2 id="io-優化">I/O 優化</h2>
<p>因為輸入大約有 <span class="math inline">\(6 \times 10^6\)</span>
個字元，輸出可能會到 <span class="math inline">\(2.5 \times
10^7\)</span> 個字元 (假設都是 <code>Case #xxxxx</code> 跟
<code>No Solution!</code>)，所以需要進行「適量」的優化。輸入跟輸出就選擇使用
<code>read()</code> 跟 <code>write()</code> 從 buffer
裡面一次讀進來跟印出去。</p>
<p>我的 I/O 模板是參考 FHVirus 的
<a href="https://fhvirus.github.io/blog/2020/fhvirus-io/">這篇
blog</a>，有興趣的人也可以去參考一下。</p>
<p>另外就是如果你是使用 <code>getchar()</code> 跟 <code>putchar()</code>
會拿到 <span class="math inline">\(74\)</span> 分，使用
<code>getchar_unlocked()</code> 跟 <code>putchar_unlocked()</code>
也可以拿到滿分。</p>
<h2 id="常數優化-3">常數優化 3</h2>
<p>因為不知道出題人是怎麼把空間壓到只有 <span
class="math inline">\(1.5\)</span> MB
的，所以就嘗試只當連續枚舉的答案不相同時才把答案加入陣列中，並把原本的滑動窗口改成二分搜，意外的直接拿到
TopCoder。</p>
<p><img data-src="https://i.imgur.com/lpSzrOH.png" /></p>
<div class="note info"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i) score += A[i] * (M - i);</span><br><span class="line">    <span class="keyword">if</span> (score != all_score[all_score_sz<span class="number">-1</span>]) all_score[all_score_sz++] = score;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(A, A + N));</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>這個方法只要 <span class="math inline">\(N = M = 10\)</span>
就可以輕鬆卡掉，測資竟然沒出滿 OAO！</p>
<h2 id="ac-code">AC code</h2>
<ul>
<li><a
href="https://github.com/SorahISA/competitive_programming/blob/master/ZeroJudge/c/c272-1.cpp">滑動窗口</a></li>
<li><a
href="https://github.com/SorahISA/competitive_programming/blob/master/ZeroJudge/c/c272-2.cpp">二分搜</a></li>
</ul>
]]></content>
      <categories>
        <category>競程</category>
        <category>題解</category>
      </categories>
      <tags>
        <tag>ZeroJudge</tag>
      </tags>
  </entry>
  <entry>
    <title>演算法概論－期中考</title>
    <url>/learning/nycu-introduction-to-algorithms/nycu-i2a-midterm/</url>
    <content><![CDATA[<p>好久沒發文了，電腦好像還有些東西沒設定好，沒辦法本機 deploy ;w;</p>
<span id="more"></span>
<hr />
<h2 id="準備階段">準備階段</h2>
<p>本來表定是 9:00 ~ 13:00 的，但是大家進教室之後就已經 9:00
了，還要測試環境，所以就延到 9:35 才開始。</p>
<p>先測一下 gcc 11.2 有支援什麼，發現不能直接
<code>#include &lt;bits/extc++.h&gt;</code>，會少東西，也不能宣告
<code>int _N</code>，他會說底線開頭的是預留字，但是可以宣告
<code>int _test</code> OwO。</p>
<p>在開始前約 10 分鐘，助教說今年的系統會跟以往的 Formosa OJ
不一樣，結果竟然是用 CMS！？而且還有計分板可以看，當下感覺好爽
&gt;////&lt;</p>
<div class="note info"><h4 id="想要-virtual-看看">想要 virtual 看看？</h4>
<p>如果你想要找有這些題目可以做跟上傳的地方，你可以來
<a href="https://oj.nctu.edu.tw/groups/36/problems/">這裡</a> 上傳。</p>
<p>請注意你會需要先 apply 這個
group，而要等教授按確認可能會需要幾天的時間（教授基本上都不會在意有誰要加
group）。</p>
</div>
<hr />
<h2 id="考試開始">考試開始</h2>
<p>可以直接用測機時打的模板耶！</p>
<p>本來的策略是先看過所有題目跟 Subtask
再去想要用什麼順序去寫，結果...</p>
<h3 id="b---spaghetti-tower-again-spaghetti">B - Spaghetti Tower Again
(Spaghetti)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(30\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(70\)</span></span><span
class="math inline">\()\)</span> (02:38) 全場首 Submit、全場首殺</p>
<blockquote>
<p>給你 <span class="math inline">\(N\)</span> 個正整數 <span
class="math inline">\(S_i\)</span>，接著詢問 <span
class="math inline">\(Q\)</span> 次有多少數字在 <span
class="math inline">\([l_i, r_i]\)</span> 內。</p>
<p>限制：</p>
<ul>
<li><span class="math inline">\(\hphantom{0}30\%\)</span>：<span
class="math inline">\(N \le 10\,000\)</span>、<span
class="math inline">\(Q \le 5000\)</span>。</li>
<li><span class="math inline">\(100\%\)</span>：<span
class="math inline">\(N \le 1\,000\,000\)</span>、<span
class="math inline">\(Q \le 500\,000\)</span>、<span
class="math inline">\(1 \le S_i \le 10^9\)</span>。</li>
</ul>
</blockquote>
<p>顯然就是
<code>upper_bound(ALL(S), r) - lower_bound(ALL(S), l)</code>，花了一分鐘把東西刻完之後發現題本上的範測複製不起來，只能載他的
.zip 或是手打，於是就乾脆不測範例直接丟，然後他就 AC 了。</p>
<p>接著就把剩下的幾題看完，挑出最水的（已經有人 AC 的）F 來做。</p>
<h3 id="f---preventing-conflicts-conflicts">F - Preventing Conflicts
(Conflicts)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(10\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(90\)</span></span><span
class="math inline">\()\)</span> (06:50)</p>
<blockquote>
<p>給你兩個長度為 <span class="math inline">\(N\)</span> 的整數陣列
<span class="math inline">\(A\)</span>、<span
class="math inline">\(B\)</span>，請求出如果可以任意重新排列裡面的元素，變成
<span class="math inline">\(A&#39;\)</span> 跟 <span
class="math inline">\(B&#39;\)</span>，那 <span
class="math inline">\(\sum_{i=1}^{N}{A&#39;_i B&#39;_i}\)</span>
的最小值可以是多少。</p>
<p>限制：</p>
<ul>
<li><span class="math inline">\(\hphantom{0}10\%\)</span>：<span
class="math inline">\(N \le 10\)</span>。</li>
<li><span class="math inline">\(100\%\)</span>：<span
class="math inline">\(N \le 100\,000\)</span>、<span
class="math inline">\(|A_i|, |B_i| \le 10\,000\)</span>。</li>
</ul>
</blockquote>
<p>經典題，讓 <span class="math inline">\(A\)</span> 順序 <span
class="math inline">\(B\)</span> 逆序，相乘就會最小。</p>
<p>因為剩下的題目感覺稍微有點麻煩，所以就先去開一眼就精神掉的 D。</p>
<h3 id="d---get-together-together">D - Get Together (Together)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(25\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(75\)</span></span><span
class="math inline">\()\)</span> (12:17) 首殺</p>
<blockquote>
<p>給你 <span class="math inline">\(N\)</span> 個人在數線上的初始位置
<span class="math inline">\(\ell_i\)</span> 以及速度 <span
class="math inline">\(v_i\)</span>，每個人可以往任意方向用至多 <span
class="math inline">\(v_i\)</span>
的速度移動，詢問使全部的人都到同一個位置上的最小時間。 精度誤差要 <span
class="math inline">\(\le 10^{-6}\)</span>。</p>
<p>限制：</p>
<ul>
<li><span class="math inline">\(\hphantom{0}25\%\)</span>：<span
class="math inline">\(N \le
5000\)</span>、最佳解中，所有人會在整數點相遇。</li>
<li><span class="math inline">\(100\%\)</span>：<span
class="math inline">\(N \le 1\,000\,000\)</span>、<span
class="math inline">\(|\ell_i| \le 10^9\)</span>、<span
class="math inline">\(1 \le v_i \le 10^9\)</span>。</li>
</ul>
</blockquote>
<p>好好的對答案二分搜就能過了，作業裡有很多這樣的題目。</p>
<p>因為要對浮點數二分搜，所以要固定搜的次數才不會爆炸，我就直接設 <span
class="math inline">\(100\)</span> 次ㄌwww。</p>
<p>小插曲：因為慢慢的 C++20 中毒，所以我用了 <code>std::midpoint</code>
去求 <span
class="math inline">\(\frac{\ell+r}{2}\)</span>，交上去就吃了一發
CE。</p>
<p>剩下的題目就是：裸作業題 A、裸作業題 E、（把我打爆的）經典題
C，因為昨天看東區有一題是有帶權的 C，所以我就以為 C
會是防破台題，先丟一邊再說。</p>
<h3 id="a---yet-another-good-sequence-sequence">A - Yet Another Good
Sequence (Sequence)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(60\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(40\)</span></span><span
class="math inline">\()\)</span> (19:01)</p>
<blockquote>
<p>就是 <a href="https://oj.nctu.edu.tw/problems/1367/">作業</a>
的簡化版，你只能做 <span class="math inline">\(+1\)</span> 的操作，不能
<span class="math inline">\(-1\)</span>。</p>
<p><img data-src="https://i.imgur.com/LzT3CcF.png" /></p>
<p>限制：</p>
<ul>
<li><span class="math inline">\(\hphantom{0}60\%\)</span>：<span
class="math inline">\(N \le 100\,000\)</span>。</li>
<li><span class="math inline">\(100\%\)</span>：<span
class="math inline">\(N \le 2\,000\,000\)</span>、<span
class="math inline">\(|a_i| \le 10^9\)</span>。</li>
</ul>
</blockquote>
<p>作業的版本還需要把左右 merge 起來，或是使用
<code>nth_element</code>，考試的簡化版直接往左右兩邊遞迴，回傳一個 <span
class="math inline">\((答案, 最大值)\)</span> 的 pair 就能更新ㄌ。</p>
<h3 id="e---awkwardness-continued-awkwardness">E - Awkwardness Continued
(Awkwardness)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(60\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(40\)</span></span><span
class="math inline">\()\)</span> (26:45) 首殺</p>
<blockquote>
<p>給你一棵 <span class="math inline">\(N\)</span>
個點的樹的合法前序跟中序表達，你要求出他的後序表達。</p>
<p>限制：</p>
<ul>
<li><span class="math inline">\(\hphantom{0}60\%\)</span>：<span
class="math inline">\(N \le 10\,000\)</span>。</li>
<li><span class="math inline">\(100\%\)</span>：<span
class="math inline">\(N \le 2\,000\,000\)</span>、保證有解。</li>
</ul>
</blockquote>
<p>跟 <a href="https://oj.nctu.edu.tw/problems/1366/">作業</a>
一樣，而且求的是前序，更直觀了。</p>
<div class="note info"><details>
<summary>
範例 code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> tok = <span class="number">0</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre</span><span class="params">(N)</span>, <span class="title">in</span><span class="params">(N)</span>, <span class="title">inv_in</span><span class="params">(N)</span>, post</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">recur</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> rt = pre[tok++], p = inv_in[rt];</span><br><span class="line">    <span class="built_in">recur</span>(l, p<span class="number">-1</span>), <span class="built_in">recur</span>(p+<span class="number">1</span>, r);</span><br><span class="line">    post.<span class="built_in">emplace_back</span>(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
</div>
<p>小插曲：因為已經 C++20 中毒，所以我用了
<code>for (int tok = 0; int &amp;x : in) cin &gt;&gt; x, inv_in[--x] = tok++;</code>
又吃了一次 CE。</p>
<h3 id="c---amd-stocks-stocks">C - AMD Stocks (Stocks)</h3>
<p><span class="score_ac">分數：<span
class="math inline">\(100\)</span></span> $( $<span
class="score_ac"><span class="math inline">\(20\)</span></span>$/ $<span
class="score_ac"><span class="math inline">\(80\)</span></span><span
class="math inline">\()\)</span> (41:36)</p>
<blockquote>
<p>給你 <span class="math inline">\(N\)</span> 個區間 <span
class="math inline">\([s_i,
e_i]\)</span>，你要從中選出盡量多個區間使不存在任意位置被超過 <span
class="math inline">\(K\)</span> 個區間覆蓋。</p>
<p>限制：</p>
<ul>
<li><span class="math inline">\(\hphantom{0}20\%\)</span>：<span
class="math inline">\(K = 1\)</span>。</li>
<li><span class="math inline">\(100\%\)</span>：<span
class="math inline">\(1 \le K \le N \le 200\,000\)</span>、<span
class="math inline">\(1 \le s_i \le e_i \le 10^9\)</span>。</li>
</ul>
</blockquote>
<p>因為東區的題目，昨天剛好在討論這題帶權的做法，於是當下以為他很難。然後想了幾分鐘之後突然意識到昨天就討論過不帶權的作法ㄌ，只要
greedy 就能過。</p>
<p>當時沒有仔細的討論細節，所以當下我就直接跟著感覺走，刻了一棵區間加值查詢全域
max 的線段樹，所幸沒有太大的 bug，只有忘記端點離散化之後有 <span
class="math inline">\(2N\)</span> 個數字而吃了一次 WA。</p>
<h2 id="結語">結語</h2>
<p>就這樣，經過了考試約莫 <span
class="math inline">\(\frac{1}{6}\)</span>
的時間，成功破台了耶！本來聽說老師想把平均控制在 <span
class="math inline">\(40\)</span> 分（<span
class="math inline">\(40\%\)</span>
的意思）左右，又有整整四個小時可以寫，所以以為他會比競程一的期中考難，結果很失望（？</p>
<p>昨天在做怪怪的測機的時候，林栢瑋說我們應該要寫一個小時就出來不然不算分，這樣才好玩，沒想到真的可以在一個小時內破台
www。</p>
<p>出來之後意識到其實 C 已經寫過很多次了，去年競程也有這題，PCCA
團練也有這題，但是我每次都還是直接暴力砸線段樹下去做
._.，其實只要維護一個 <code>multiset</code> 就好了。</p>
<p>：「他一定能在 <span class="math inline">\(35\)</span>
分鐘破台。」<br/> ：「喔他寫線段樹喔，那沒救。」</p>
<p>88888888</p>
<p>希望期末考能夠有個夠難的防破台題，或是至少出一點有趣的題目（？</p>
]]></content>
      <categories>
        <category>競程</category>
        <category>比賽心得</category>
        <category>課業</category>
        <category>演算法概論</category>
      </categories>
  </entry>
</search>
